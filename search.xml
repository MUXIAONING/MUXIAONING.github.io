<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arrays.asList的坑</title>
    <url>/2019/07/29/Arrays-asList%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>工具类Arrays.asList()方法在开发中常见的坑，重点集中转化之后调用其add/remove/clear方法的时候会出现抛出UnsupportedOperationException()的情况。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>测试代码中，只有转化<code>String[] myArray3 = {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;};</code>时，没有飘红，但是依旧会出现UnsupportedOperationException()的情况。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAsList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] myArray2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        String[] myArray3 = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list1 = Arrays.asList(myArray3);</span><br><span class="line">        list1.add(<span class="string">"d"</span>);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查看源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAsList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] myArray2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        String[] myArray3 = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list1 = Arrays.asList(myArray3);</span><br><span class="line">        <span class="comment">//list1.add("d");</span></span><br><span class="line">        System.out.println(list1.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到当前的类是<code>java.util.Arrays$ArrayList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">       <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">       ArrayList(E[] array) &#123;</span><br><span class="line">           a = Objects.requireNonNull(array);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> a.length;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">           <span class="keyword">return</span> a.clone();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">           <span class="keyword">int</span> size = size();</span><br><span class="line">           <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">               <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</span><br><span class="line">                                    (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class="line">           System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">           <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">               a[size] = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">return</span> a;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>发现Arrays看上去是个很正常的方法，然而实际上你点进到ArrayList发现，其实ArrayList并不是我们平时用的ArrayList。而是Arrays里面的一个内部类。而且这个内部类没有add/clear/remove方法，所以抛出的异常其实来自于AbstractList。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抛出异常的地方，clear底层也会调用到remove所以也会抛出异常。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-通过一个循环遍历"><a href="#1-通过一个循环遍历" class="headerlink" title="1.通过一个循环遍历"></a><strong>1.通过一个循环遍历</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for Java 1.5+</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">arrayToList</span><span class="params">(<span class="keyword">final</span> T[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> List&lt;T&gt; l = <span class="keyword">new</span> ArrayList&lt;T&gt;(array.length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> T s : array) &#123;</span><br><span class="line">    l.add(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for Java &lt; 1.5 (no generics, no compile-time type-safety, boo!)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> List <span class="title">arrayToList</span><span class="params">(<span class="keyword">final</span> Object[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> List l = <span class="keyword">new</span> ArrayList(array.length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    l.add(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-最简便的方法-推荐"><a href="#2-最简便的方法-推荐" class="headerlink" title="2.最简便的方法(推荐)"></a><strong>2.最简便的方法(推荐)</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-Java8-的Stream-推荐"><a href="#3-使用-Java8-的Stream-推荐" class="headerlink" title="3.使用 Java8 的Stream(推荐)"></a><strong>3.使用 Java8 的Stream(推荐)</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer [] myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List myList = Arrays.stream(myArray).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//基本类型也可以实现转换（依赖boxed的装箱操作）</span></span><br><span class="line"><span class="keyword">int</span> [] myArray2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List myList = Arrays.stream(myArray2).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-Guava-推荐"><a href="#4-使用-Guava-推荐" class="headerlink" title="4. 使用 Guava(推荐)"></a><strong>4. 使用 Guava(推荐)</strong></h3><p>对于不可变集合，你可以使用<code>ImmutableList</code>类及其<code>of()</code>与<code>copyOf()</code>工厂方法：（参数不能为空）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; il = ImmutableList.of(<span class="string">"string"</span>, <span class="string">"elements"</span>);  <span class="comment">// from varargs</span></span><br><span class="line">List&lt;String&gt; il = ImmutableList.copyOf(aStringArray);      <span class="comment">// from array</span></span><br></pre></td></tr></table></figure>

<p>对于可变集合，你可以使用<code>Lists</code>类及其<code>newArrayList()</code>工厂方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; l1 = Lists.newArrayList(anotherListOrCollection);    <span class="comment">// from collection</span></span><br><span class="line">List&lt;String&gt; l2 = Lists.newArrayList(aStringArray);               <span class="comment">// from array</span></span><br><span class="line">List&lt;String&gt; l3 = Lists.newArrayList(<span class="string">"or"</span>, <span class="string">"string"</span>, <span class="string">"elements"</span>); <span class="comment">// from varargs</span></span><br></pre></td></tr></table></figure>

<h3 id="5-使用-Apache-Commons-Collections"><a href="#5-使用-Apache-Commons-Collections" class="headerlink" title="5. 使用 Apache Commons Collections"></a><strong>5. 使用 Apache Commons Collections</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">CollectionUtils.addAll(list, str);</span><br></pre></td></tr></table></figure>

<p><strong>解决的办法采取<a href="https://stackoverflow.com/questions/157944/create-arraylist-from-array" target="_blank" rel="noopener">stackoverflow</a>以及JavaGuide的文章</strong></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>7月结束</title>
    <url>/2019/07/30/7%E6%9C%88%E7%BB%93%E6%9D%9F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="文章不能被校验,不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,这里需要密码" /><label>您好,这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="6848d976e8fbcd509f8e841ae73378369a6279c0daca7ca8c1f43fc093bb62a7">1891c2f55963eb33cec4959065e0d19d624dfa841e2adaa6df565fe7a09fe6be5b106fde9c94e9910ed853e8cb2888049925589a46044541ede8ab1850974605ae871e22ea22fcf6c79be017c1937370c923f6e5657cd4de03c3db16db63e99208b7a3937071d072cc9ddc03d57c822bfbdd3d61dfd42db63beeedc87031482a5ad8cc99a0eea1bb8b343de1d70dc9925c6d3cfd68354d75de6286f4eb3b916cd353ce7331ba003d01a4b0550ef6cde3f5e3711dc23bfe3d34822db6610e22411d2d523eb8da740fbfbb3ffc7cb2a174e3597850b71e37016d60d066bf9862ef3053f87eed767ead75c988f1767442fa42a749b948309859569169821e730854b0ff6df78dba7a1259bb83da4273d4d2d4d2675f39fc18e8bfaddf2902ce775460a2b07be76c0c13f82ba9147943c15356251976cdee21f34a0c0bb66fab223787a4129d6a1df904263137a83054546f727b05b9852b014d8af4b94f9f10ec13530fe60343077e962bfbca467b5bed36b62d79afdda932b2d28c9a6acd8204990e1bf899155d64f5837e52ad125ea74191cd4bb1cbca78c8375619efff3904e10956beef0ef2e5d9aa83559496a0afadd54ac5661250f08865c51c85b613d3fb00f32787c9fe31cad35925bb88aa3f10f8af10cd29e11fb26fc001f578da85c9ce25814446741293880a5c604fed11cdcd96e657dab4d3e734ea1595f7e2c7bbdd5ff01aec40ed1f31742072584d21a5366422ca83a71e6a3c2cfe57831548a2aa107c0e2c1678347fa39a145a973339d844de9d4a5b791aa5b9b191f8d6eacb203a862cbd4c23d7d5487b4ff10e454de95de10799495f2b07cd6d6cb390ac6232168527c67abbe5d02f7c7320f2b142b0b31760f39858172cf4e05da7e44b81e7dbd650f31db3f5e7494ce585326b06b95e371ab4f7be9b54579a8242363c79c9754805c653c68ef6433ca2429a8f7867d06c21ac996e06e3d8815ad8b0f5fbe16e0de92559b7501194dc5280af019a3d31d2e610186deba657c582061755414a47e362b232937bc888214892c567b8a324feefb0aca58076dd9336f10bcecb3be861194dd291b2c6d8d39578faf758dd8e3c7c59aa85eac35617f7ee9fe8c27facd7bebe041426323bb0fa3b440d3924108824938e8729ac5ca32acd11aadcdab1f9ef9caec556117fd447af8864cf68e89bb7e130c450ccc62108b5bd924a9ab54137d5d9984b2e103ee3afa1e6cc8babbbcadb8077e056ad04ffd69fbec71c950c32a7e626575299dab5300a699cfb299a9dba9896c75a43dbc2a7dd215d09f5632e84d14fde0dabfb885699356c1d8674155888f81b85a400df87b5304fbc3ffe9e29486a75a09a8ba40933a9c1b4c5c4e8d55cf4a01f5e51ac7fab967552b9b814cdb50979134002fd17eb65961573a646c8760ab4c53661c4276c0ba145cc153ef228b9857e353533e94654727843f9bb45742ba3a0083e63ce7a065db64b405b55282ced4da07251e5ba59eb21799fdb552d4bdcd3264909eda903dde8405636eb62d7acb0a0bc625cab00e2d32d690512f01bae9f0c00bf78e47fe9c262f6e803c109f38b4e309b09ea63f8d977f60464b4c3a53a0eb40743f2a970e0a9cb46f0aeb9823ac8e9c0ce62184e7e2713b545333f31bcc5267320c852365cf39f8c8433c293a38a450d73791baa19aebdb374565956930e45a856de8e5227e8ab215ac8c206de396eccd5675ce5b1520dd58fa9f9f595e5961e4effca5d742487600cb79453093876a003709437d950514131b602c6bb520e9bcdade18accf90998e9b9d1c9cc60c83a13bfea76b1a21a9dc67480eff17689ab9e8627150bd050364391d3b7dbd079e3e020dfd2cfde6d03dfdc754d35779bc7d8fe3534c2ea8e51a3445b9ba21a2debbb148485ffc3afc69d028f0598e6f12a842d98eaf2d4ee9c04775ef35024ee78e60658aa3c5fbc2123852dc3840fdca6b78c9ef5373483ee70b78685bb5bdf433903076c9a65cbc054420e8ab074adfe187e5303e7d80714cb01e5c54b784653e9fbe34b47a533917a4c3c8ee7d79b08809b4aefd6dfc511b330de1a2ae8aa41dca8ada5ef9de13d06775e2f16cc5fe353b1518da0a12b8506595446ee77eb50c2255a72aa3d16823d5ed1db855f7070704749c435b6f8eae07f40d4bd63ca99f57a96e987740ee72d7724f0245b34b194c55cbdbedcaa804239777b40f0ee05de65ae16c2754539427e1a7bb55608fe825c3d7d1b639627f2618b00e3c35786e73197ee3ec5c2c7d545a054fdefd054a9752b7fc5c20df49d95480840db3113bdeee6e7c34c45376f453f22351d2bdb28ffd86a15df420bfc9cb2952f4a80f9007050c72a79b197fe3df75d15fdd6fcdec47d091d065e4d250ac4d5bbf0300edd1e3800c6331f12b82030cbbb0b96acf50342c41d9ba1b15d9f73b2aee26a7b8e18ae258a5d16fc7d4dd05a6d8c62ca7916203abab12912f83805d41299181e6153d9e4875fccbca04405edbcf10b874533b7430c9726335b43975e08b885150e82a036</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>感触</category>
      </categories>
      <tags>
        <tag>J.Nemo</tag>
      </tags>
  </entry>
  <entry>
    <title>Echars经典仪表盘</title>
    <url>/2019/10/12/Echars%E7%BB%8F%E5%85%B8%E4%BB%AA%E8%A1%A8%E7%9B%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="文章不能被校验,不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,这里需要密码" /><label>您好,这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="28ac20347227c0956716e9ca2f003abf4604103be8402a2f47350fdff704d303"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Echars</tag>
      </tags>
  </entry>
  <entry>
    <title>Echars讲解分析</title>
    <url>/2019/10/12/Echars%E8%AE%B2%E8%A7%A3%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="安装与引入"><a href="#安装与引入" class="headerlink" title="安装与引入"></a>安装与引入</h2><p>通过 npm 安装 ECharts</p>
<p>通过命令<code>npm install echarts --save</code>安装得到ECharts 和 zrender，存放在 <strong>node_modules</strong> 目录，直接在项目中运行代码 <code>require(&#39;echarts&#39;)</code>得到 Echarts。</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"><span class="comment">// 绘制图表</span></span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">    title: &#123; <span class="attr">text</span>: <span class="string">'ECharts 入门示例'</span> &#125;,</span><br><span class="line">    tooltip: &#123;&#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">'销量'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>也可以按需引入</p>
<h2 id="Echarts元素"><a href="#Echarts元素" class="headerlink" title="Echarts元素"></a>Echarts元素</h2><h3 id="全局背景"><a href="#全局背景" class="headerlink" title="全局背景"></a>全局背景</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全图默认背景</span></span><br><span class="line"><span class="comment">// backgroundColor: 'rgba(0,0,0,0)',</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认色板</span></span><br><span class="line">color: [<span class="string">'#ff7f50'</span>,<span class="string">'#87cefa'</span>,<span class="string">'#da70d6'</span>,<span class="string">'#32cd32'</span>,<span class="string">'#6495ed'</span>,</span><br><span class="line">        <span class="string">'#ff69b4'</span>,<span class="string">'#ba55d3'</span>,<span class="string">'#cd5c5c'</span>,<span class="string">'#ffa500'</span>,<span class="string">'#40e0d0'</span>,</span><br><span class="line">        <span class="string">'#1e90ff'</span>,<span class="string">'#ff6347'</span>,<span class="string">'#7b68ee'</span>,<span class="string">'#00fa9a'</span>,<span class="string">'#ffd700'</span>,</span><br><span class="line">        <span class="string">'#6699FF'</span>,<span class="string">'#ff6666'</span>,<span class="string">'#3cb371'</span>,<span class="string">'#b8860b'</span>,<span class="string">'#30e0e0'</span>],</span><br></pre></td></tr></table></figure>

<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">    x: <span class="string">'left'</span>,                 <span class="comment">// 水平安放位置，默认为左对齐，可选为：</span></span><br><span class="line">                               <span class="comment">// 'center' ¦ 'left' ¦ 'right'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（x坐标，单位px）</span></span><br><span class="line">    y: <span class="string">'top'</span>,                  <span class="comment">// 垂直安放位置，默认为全图顶端，可选为：</span></span><br><span class="line">                               <span class="comment">// 'top' ¦ 'bottom' ¦ 'center'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（y坐标，单位px）</span></span><br><span class="line">    <span class="comment">//textAlign: null          // 水平对齐方式，默认根据x设置自动调整</span></span><br><span class="line">    backgroundColor: <span class="string">'rgba(0,0,0,0)'</span>,</span><br><span class="line">    borderColor: <span class="string">'#ccc'</span>,       <span class="comment">// 标题边框颜色</span></span><br><span class="line">    borderWidth: <span class="number">0</span>,            <span class="comment">// 标题边框线宽，单位px，默认为0（无边框）</span></span><br><span class="line">    padding: <span class="number">5</span>,                <span class="comment">// 标题内边距，单位px，默认各方向内边距为5，</span></span><br><span class="line">                               <span class="comment">// 接受数组分别设定上右下左边距，同css</span></span><br><span class="line">    itemGap: <span class="number">10</span>,               <span class="comment">// 主副标题纵向间隔，单位px，默认为10，</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        fontSize: <span class="number">18</span>,</span><br><span class="line">        fontWeight: <span class="string">'bolder'</span>,</span><br><span class="line">        color: <span class="string">'#333'</span>          <span class="comment">// 主标题文字颜色</span></span><br><span class="line">    &#125;,</span><br><span class="line">    subtextStyle: &#123;</span><br><span class="line">        color: <span class="string">'#aaa'</span>          <span class="comment">// 副标题文字颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    orient: <span class="string">'horizontal'</span>,      <span class="comment">// 布局方式，默认为水平布局，可选为：</span></span><br><span class="line">                               <span class="comment">// 'horizontal' ¦ 'vertical'</span></span><br><span class="line">    x: <span class="string">'center'</span>,               <span class="comment">// 水平安放位置，默认为全图居中，可选为：</span></span><br><span class="line">                               <span class="comment">// 'center' ¦ 'left' ¦ 'right'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（x坐标，单位px）</span></span><br><span class="line">    y: <span class="string">'top'</span>,                  <span class="comment">// 垂直安放位置，默认为全图顶端，可选为：</span></span><br><span class="line">                               <span class="comment">// 'top' ¦ 'bottom' ¦ 'center'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（y坐标，单位px）</span></span><br><span class="line">    backgroundColor: <span class="string">'rgba(0,0,0,0)'</span>,</span><br><span class="line">    borderColor: <span class="string">'#ccc'</span>,       <span class="comment">// 图例边框颜色</span></span><br><span class="line">    borderWidth: <span class="number">0</span>,            <span class="comment">// 图例边框线宽，单位px，默认为0（无边框）</span></span><br><span class="line">    padding: <span class="number">5</span>,                <span class="comment">// 图例内边距，单位px，默认各方向内边距为5，</span></span><br><span class="line">                               <span class="comment">// 接受数组分别设定上右下左边距，同css</span></span><br><span class="line">    itemGap: <span class="number">10</span>,               <span class="comment">// 各个item之间的间隔，单位px，默认为10，</span></span><br><span class="line">                               <span class="comment">// 横向布局时为水平间隔，纵向布局时为纵向间隔</span></span><br><span class="line">    itemWidth: <span class="number">20</span>,             <span class="comment">// 图例图形宽度</span></span><br><span class="line">    itemHeight: <span class="number">14</span>,            <span class="comment">// 图例图形高度</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">'#333'</span>          <span class="comment">// 图例文字颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">    x: <span class="number">80</span>,</span><br><span class="line">    y: <span class="number">60</span>,</span><br><span class="line">    x2: <span class="number">80</span>,</span><br><span class="line">    y2: <span class="number">60</span>,</span><br><span class="line">    <span class="comment">// width: &#123;totalWidth&#125; - x - x2,</span></span><br><span class="line">    <span class="comment">// height: &#123;totalHeight&#125; - y - y2,</span></span><br><span class="line">    backgroundColor: <span class="string">'rgba(0,0,0,0)'</span>,</span><br><span class="line">    borderWidth: <span class="number">1</span>,</span><br><span class="line">    borderColor: <span class="string">'#ccc'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dataRange（值域）"><a href="#dataRange（值域）" class="headerlink" title="dataRange（值域）"></a>dataRange（值域）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dataRange: &#123;</span><br><span class="line">    orient: <span class="string">'vertical'</span>,        <span class="comment">// 布局方式，默认为垂直布局，可选为：</span></span><br><span class="line">                               <span class="comment">// 'horizontal' ¦ 'vertical'</span></span><br><span class="line">    x: <span class="string">'left'</span>,                 <span class="comment">// 水平安放位置，默认为全图左对齐，可选为：</span></span><br><span class="line">                               <span class="comment">// 'center' ¦ 'left' ¦ 'right'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（x坐标，单位px）</span></span><br><span class="line">    y: <span class="string">'bottom'</span>,               <span class="comment">// 垂直安放位置，默认为全图底部，可选为：</span></span><br><span class="line">                               <span class="comment">// 'top' ¦ 'bottom' ¦ 'center'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（y坐标，单位px）</span></span><br><span class="line">    backgroundColor: <span class="string">'rgba(0,0,0,0)'</span>,</span><br><span class="line">    borderColor: <span class="string">'#ccc'</span>,       <span class="comment">// 值域边框颜色</span></span><br><span class="line">    borderWidth: <span class="number">0</span>,            <span class="comment">// 值域边框线宽，单位px，默认为0（无边框）</span></span><br><span class="line">    padding: <span class="number">5</span>,                <span class="comment">// 值域内边距，单位px，默认各方向内边距为5，</span></span><br><span class="line">                               <span class="comment">// 接受数组分别设定上右下左边距，同css</span></span><br><span class="line">    itemGap: <span class="number">10</span>,               <span class="comment">// 各个item之间的间隔，单位px，默认为10，</span></span><br><span class="line">                               <span class="comment">// 横向布局时为水平间隔，纵向布局时为纵向间隔</span></span><br><span class="line">    itemWidth: <span class="number">20</span>,             <span class="comment">// 值域图形宽度，线性渐变水平布局宽度为该值 * 10</span></span><br><span class="line">    itemHeight: <span class="number">14</span>,            <span class="comment">// 值域图形高度，线性渐变垂直布局高度为该值 * 10</span></span><br><span class="line">    splitNumber: <span class="number">5</span>,            <span class="comment">// 分割段数，默认为5，为0时为线性渐变</span></span><br><span class="line">    color:[<span class="string">'#1e90ff'</span>,<span class="string">'#f0ffff'</span>],<span class="comment">//颜色 </span></span><br><span class="line">    <span class="comment">//text:['高','低'],         // 文本，默认为数值文本</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">'#333'</span>          <span class="comment">// 值域文字颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="toolbox（工具栏）"><a href="#toolbox（工具栏）" class="headerlink" title="toolbox（工具栏）"></a>toolbox（工具栏）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">toolbox: &#123;</span><br><span class="line">    orient: <span class="string">'horizontal'</span>,      <span class="comment">// 布局方式，默认为水平布局，可选为：</span></span><br><span class="line">                               <span class="comment">// 'horizontal' ¦ 'vertical'</span></span><br><span class="line">    x: <span class="string">'right'</span>,                <span class="comment">// 水平安放位置，默认为全图右对齐，可选为：</span></span><br><span class="line">                               <span class="comment">// 'center' ¦ 'left' ¦ 'right'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（x坐标，单位px）</span></span><br><span class="line">    y: <span class="string">'top'</span>,                  <span class="comment">// 垂直安放位置，默认为全图顶端，可选为：</span></span><br><span class="line">                               <span class="comment">// 'top' ¦ 'bottom' ¦ 'center'</span></span><br><span class="line">                               <span class="comment">// ¦ &#123;number&#125;（y坐标，单位px）</span></span><br><span class="line">    color : [<span class="string">'#1e90ff'</span>,<span class="string">'#22bb22'</span>,<span class="string">'#4b0082'</span>,<span class="string">'#d2691e'</span>],</span><br><span class="line">    backgroundColor: <span class="string">'rgba(0,0,0,0)'</span>, <span class="comment">// 工具箱背景颜色</span></span><br><span class="line">    borderColor: <span class="string">'#ccc'</span>,       <span class="comment">// 工具箱边框颜色</span></span><br><span class="line">    borderWidth: <span class="number">0</span>,            <span class="comment">// 工具箱边框线宽，单位px，默认为0（无边框）</span></span><br><span class="line">    padding: <span class="number">5</span>,                <span class="comment">// 工具箱内边距，单位px，默认各方向内边距为5，</span></span><br><span class="line">                               <span class="comment">// 接受数组分别设定上右下左边距，同css</span></span><br><span class="line">    itemGap: <span class="number">10</span>,               <span class="comment">// 各个item之间的间隔，单位px，默认为10，</span></span><br><span class="line">                               <span class="comment">// 横向布局时为水平间隔，纵向布局时为纵向间隔</span></span><br><span class="line">    itemSize: <span class="number">16</span>,              <span class="comment">// 工具箱图形宽度</span></span><br><span class="line">    featureImageIcon : &#123;&#125;,     <span class="comment">// 自定义图片icon</span></span><br><span class="line">    featureTitle : &#123;</span><br><span class="line">        mark : <span class="string">'辅助线开关'</span>,</span><br><span class="line">        markUndo : <span class="string">'删除辅助线'</span>,</span><br><span class="line">        markClear : <span class="string">'清空辅助线'</span>,</span><br><span class="line">        dataZoom : <span class="string">'区域缩放'</span>,</span><br><span class="line">        dataZoomReset : <span class="string">'区域缩放后退'</span>,</span><br><span class="line">        dataView : <span class="string">'数据视图'</span>,</span><br><span class="line">        lineChart : <span class="string">'折线图切换'</span>,</span><br><span class="line">        barChart : <span class="string">'柱形图切换'</span>,</span><br><span class="line">        restore : <span class="string">'还原'</span>,</span><br><span class="line">        saveAsImage : <span class="string">'保存为图片'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tooltip（提示框）"><a href="#tooltip（提示框）" class="headerlink" title="tooltip（提示框）"></a>tooltip（提示框）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">'item'</span>,           <span class="comment">// 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'</span></span><br><span class="line">    showDelay: <span class="number">20</span>,             <span class="comment">// 显示延迟，添加显示延迟可以避免频繁切换，单位ms</span></span><br><span class="line">    hideDelay: <span class="number">100</span>,            <span class="comment">// 隐藏延迟，单位ms</span></span><br><span class="line">    transitionDuration : <span class="number">0.4</span>,  <span class="comment">// 动画变换时间，单位s</span></span><br><span class="line">    backgroundColor: <span class="string">'rgba(0,0,0,0.7)'</span>,     <span class="comment">// 提示背景颜色，默认为透明度为0.7的黑色</span></span><br><span class="line">    borderColor: <span class="string">'#333'</span>,       <span class="comment">// 提示边框颜色</span></span><br><span class="line">    borderRadius: <span class="number">4</span>,           <span class="comment">// 提示边框圆角，单位px，默认为4</span></span><br><span class="line">    borderWidth: <span class="number">0</span>,            <span class="comment">// 提示边框线宽，单位px，默认为0（无边框）</span></span><br><span class="line">    padding: <span class="number">5</span>,                <span class="comment">// 提示内边距，单位px，默认各方向内边距为5，</span></span><br><span class="line">                               <span class="comment">// 接受数组分别设定上右下左边距，同css</span></span><br><span class="line">    axisPointer : &#123;            <span class="comment">// 坐标轴指示器，坐标轴触发有效</span></span><br><span class="line">        type : <span class="string">'line'</span>,         <span class="comment">// 默认为直线，可选为：'line' | 'shadow'</span></span><br><span class="line">        lineStyle : &#123;          <span class="comment">// 直线指示器样式设置</span></span><br><span class="line">            color: <span class="string">'#48b'</span>,</span><br><span class="line">            width: <span class="number">2</span>,</span><br><span class="line">            type: <span class="string">'solid'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        shadowStyle : &#123;                       <span class="comment">// 阴影指示器样式设置</span></span><br><span class="line">            width: <span class="string">'auto'</span>,                   <span class="comment">// 阴影大小</span></span><br><span class="line">            color: <span class="string">'rgba(150,150,150,0.3)'</span>  <span class="comment">// 阴影颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">'#fff'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xAxis"><a href="#xAxis" class="headerlink" title="xAxis"></a>xAxis</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xAxis : [</span><br><span class="line">    &#123;</span><br><span class="line">        type : <span class="string">'category'</span>,</span><br><span class="line">        axisLine: &#123;</span><br><span class="line">            symbol: [<span class="string">'none'</span>, <span class="string">'arrow'</span>], <span class="comment">//设置x轴或y轴箭头</span></span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                color: <span class="string">'#B5B5B5'</span>,</span><br><span class="line">                width: <span class="number">2</span>, <span class="comment">//这里是为了突出显示加上的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//刻度是向内还是向外</span></span><br><span class="line">        axisTick:&#123;</span><br><span class="line">            inside:<span class="literal">true</span>,</span><br><span class="line">            length:<span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                type: <span class="string">'solid'</span>,</span><br><span class="line">                color:<span class="string">'#FCFCFC'</span>,<span class="comment">//网格颜色</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        axisLabel:&#123; <span class="comment">//调整x轴的lable</span></span><br><span class="line">            <span class="comment">//interval:0,  //按x轴的长度显示的刻度的个数    例如：本来显示20个刻度，因为x轴端只显示了10个，</span></span><br><span class="line">            rotate:<span class="number">0</span>,  <span class="comment">//实现x轴的刻度的标识实现旋转，</span></span><br><span class="line">            textStyle:&#123;</span><br><span class="line">                fontSize:<span class="number">10</span>,<span class="comment">// 让字体变大</span></span><br><span class="line">                color:<span class="string">"#B5B5B5"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">"(日期)"</span>,</span><br><span class="line">        nameTextStyle: &#123;</span><br><span class="line">            color: <span class="string">"#B5B5B5"</span>,</span><br><span class="line">            verticalAlign: <span class="string">"bottom"</span>,</span><br><span class="line">            fontSize:<span class="string">'10'</span>,</span><br><span class="line">            padding:[<span class="number">35</span>,<span class="number">50</span>,<span class="number">10</span>,<span class="number">-2</span>] <span class="comment">//设置x轴的标题的位置</span></span><br><span class="line">        &#125;,</span><br><span class="line">        boundaryGap : <span class="literal">false</span>,</span><br><span class="line">        data:[<span class="string">'2016-01'</span>,<span class="string">'2016-07'</span>,<span class="string">'2016-08'</span>,<span class="string">'2016-09'</span>]</span><br><span class="line">       <span class="comment">// data : ['周一','周二','周三','周四','周五','周六','周日']</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="yAxis"><a href="#yAxis" class="headerlink" title="yAxis"></a>yAxis</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yAxis : [</span><br><span class="line">    &#123;</span><br><span class="line">        type : <span class="string">'VALUE'</span>,</span><br><span class="line">        splitNumber:<span class="number">2</span>,<span class="comment">//所以将 splitNumber设成3</span></span><br><span class="line">        axisLine: &#123;</span><br><span class="line">            symbol: [<span class="string">'none'</span>, <span class="string">'arrow'</span>],</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                color: <span class="string">'#B5B5B5'</span>,</span><br><span class="line">                width: <span class="number">2</span>, <span class="comment">//这里是为了突出显示加上的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                type: <span class="string">'solid'</span>,<span class="comment">//</span></span><br><span class="line">                color:<span class="string">'#FCFCFC'</span><span class="comment">///网格颜色</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//刻度是向内还是向外</span></span><br><span class="line">        axisTick:&#123;</span><br><span class="line">            inside:<span class="literal">true</span>,</span><br><span class="line">            length:<span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        axisLabel:&#123; <span class="comment">//调整x轴的lable</span></span><br><span class="line">            textStyle:&#123;</span><br><span class="line">                fontSize:<span class="number">10</span>,<span class="comment">// 让字体变大</span></span><br><span class="line">                color:<span class="string">"#B5B5B5"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">"(人数)"</span>,</span><br><span class="line">        nameLocation:<span class="string">"end"</span>,  <span class="comment">//实现标题显示的位置</span></span><br><span class="line">        nameTextStyle:&#123;</span><br><span class="line">            color: <span class="string">"#B5B5B5"</span>,</span><br><span class="line">            fontSize:<span class="number">10</span>,</span><br><span class="line">            <span class="comment">//                   verticalAlign: 'top',</span></span><br><span class="line">            <span class="comment">//                  align:"left",</span></span><br><span class="line">            padding:[<span class="number">50</span>,<span class="number">0</span>,<span class="number">-6</span>,<span class="number">0</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//axisLine : &#123;onZero: false&#125;,</span></span><br><span class="line">      <span class="comment">/*  boundaryGap : false,</span></span><br><span class="line"><span class="comment">        axisLabel : &#123;</span></span><br><span class="line"><span class="comment">            formatter: '&#123;value&#125; '</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        data:['AA-','AA','AA+']*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>类似温湿度的两个y轴可以采用以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yAxis: [    <span class="comment">//Y轴（这里我设置了两个Y轴，左右各一个）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//第一个（左边）Y轴，yAxisIndex为0</span></span><br><span class="line">        type: <span class="string">'value'</span>,</span><br><span class="line">        name: <span class="string">'温度'</span>,</span><br><span class="line">        max: <span class="number">120</span>,</span><br><span class="line">        min: <span class="number">0</span>,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">            formatter: <span class="string">'&#123;value&#125; ℃'</span>    <span class="comment">//控制输出格式</span></span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//第二个（右边）Y轴，yAxisIndex为1</span></span><br><span class="line">        type: <span class="string">'value'</span>,</span><br><span class="line">        name: <span class="string">'湿度'</span>,</span><br><span class="line">        max: <span class="number">100</span>,</span><br><span class="line">        min: <span class="number">0</span>,</span><br><span class="line">        scale: <span class="literal">true</span>,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">            formatter: <span class="string">'&#123;value&#125; %'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在series属性中插入以下的代码<code>yAxisIndex: &#39;1&#39;</code>即可准确表示。</p>
<h3 id="timeLine（时间轴）"><a href="#timeLine（时间轴）" class="headerlink" title="timeLine（时间轴）"></a>timeLine（时间轴）</h3><p>第一种</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">timeline:&#123;</span><br><span class="line">    axisType :<span class="string">'category'</span>,</span><br><span class="line">    orient:<span class="string">'vertical'</span>,</span><br><span class="line">    autoPlay :<span class="literal">true</span>,</span><br><span class="line">    playInterval :<span class="number">15000</span>,</span><br><span class="line">    right: <span class="string">'5'</span>,</span><br><span class="line">    left:<span class="string">'320'</span>,</span><br><span class="line">    top:<span class="string">'0'</span>,</span><br><span class="line">    bottom:<span class="string">'0'</span>,</span><br><span class="line">    label:&#123;</span><br><span class="line">        interval:<span class="number">0</span>,</span><br><span class="line">         formatter: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> str = item.split(<span class="string">"-"</span>)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(str)+<span class="string">'月'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data:monthArr,</span><br><span class="line">    currentIndex : index,</span><br><span class="line">    controlStyle:&#123;</span><br><span class="line">        showPlayBtn :<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">timeline: &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    axisType: <span class="string">'category'</span>,</span><br><span class="line">    autoPlay: <span class="literal">true</span>,</span><br><span class="line">    currentIndex: <span class="number">5</span>,</span><br><span class="line">    playInterval: <span class="number">5000</span>,</span><br><span class="line">    symbolSize: <span class="number">12</span>,</span><br><span class="line">    checkpointStyle: &#123;</span><br><span class="line">        symbol: <span class="string">'circle'</span>,</span><br><span class="line">        symbolSize: <span class="number">18</span>,</span><br><span class="line">        color: <span class="string">'#00d3e7'</span>,</span><br><span class="line">        borderWidth: <span class="number">2</span>,</span><br><span class="line">        borderColor: <span class="string">"#00d3e7"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="dataZoom组件"><a href="#dataZoom组件" class="headerlink" title="dataZoom组件"></a>dataZoom组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dataZoom:[ <span class="comment">//区域缩放 </span></span><br><span class="line">&#123; </span><br><span class="line">　　id: <span class="string">'dataZoomX'</span>, </span><br><span class="line">　　show:<span class="literal">true</span>, <span class="comment">//是否显示 组件。如果设置为 false，不会显示，但是数据过滤的功能还存在。 </span></span><br><span class="line">　　backgroundColor:<span class="string">"rgba(47,69,84,0)"</span>, <span class="comment">//组件的背景颜色 </span></span><br><span class="line">　　type: <span class="string">'slider'</span>, <span class="comment">//slider表示有滑动块的，inside表示内置的 </span></span><br><span class="line">　　dataBackground:&#123; <span class="comment">//数据阴影的样式。 </span></span><br><span class="line">　　　　lineStyle:mylineStyle, <span class="comment">//阴影的线条样式 </span></span><br><span class="line">　　　　areaStyle:myareaStyle, <span class="comment">//阴影的填充样式 </span></span><br><span class="line">　　&#125;, </span><br><span class="line">　　fillerColor:<span class="string">"rgba(167,183,204,0.4)"</span>, <span class="comment">//选中范围的填充颜色。 </span></span><br><span class="line">　　borderColor:<span class="string">"#ddd"</span>, <span class="comment">//边框颜色。 </span></span><br><span class="line">　　filterMode: <span class="string">'filter'</span>, <span class="comment">//'filter'：当前数据窗口外的数据，被 过滤掉。即 会 影响其他轴的数据范围。每个数据项，只要有一个维度在数据窗口外，整个数据项就会被过滤掉。 </span></span><br><span class="line">　　　　　　　　　　<span class="comment">//'weakFilter'：当前数据窗口外的数据，被 过滤掉。即 会 影响其他轴的数据范围。每个数据项，只有当全部维度都在数据窗口同侧外部，整个数据项才会被过滤掉。 </span></span><br><span class="line">　　　　　　　　　　<span class="comment">//'empty'：当前数据窗口外的数据，被 设置为空。即 不会 影响其他轴的数据范围。 </span></span><br><span class="line">　　　　　　　　　　<span class="comment">//'none': 不过滤数据，只改变数轴范围。 </span></span><br><span class="line">　　xAxisIndex:<span class="number">0</span>, <span class="comment">//设置 dataZoom-inside 组件控制的 x轴,可以用数组表示多个轴 </span></span><br><span class="line">　　yAxisIndex:[<span class="number">0</span>,<span class="number">2</span>], <span class="comment">//设置 dataZoom-inside 组件控制的 y轴,可以用数组表示多个轴 </span></span><br><span class="line">　　radiusAxisIndex:<span class="number">3</span>, <span class="comment">//设置 dataZoom-inside 组件控制的 radius 轴,可以用数组表示多个轴 </span></span><br><span class="line">　　angleAxisIndex:[<span class="number">0</span>,<span class="number">2</span>], <span class="comment">//设置 dataZoom-inside 组件控制的 angle 轴,可以用数组表示多个轴 </span></span><br><span class="line">　　start: <span class="number">30</span>, <span class="comment">//数据窗口范围的起始百分比,表示30% </span></span><br><span class="line">　　end: <span class="number">70</span>, <span class="comment">//数据窗口范围的结束百分比,表示70% </span></span><br><span class="line">　　startValue:<span class="number">10</span>, <span class="comment">//数据窗口范围的起始数值 </span></span><br><span class="line">　　endValue:<span class="number">100</span>, <span class="comment">//数据窗口范围的结束数值。 </span></span><br><span class="line">　　orient:<span class="string">"horizontal"</span>, <span class="comment">//布局方式是横还是竖。不仅是布局方式，对于直角坐标系而言，也决定了，缺省情况控制横向数轴还是纵向数轴。'horizontal'：水平。'vertical'：竖直。 </span></span><br><span class="line">　　zoomLock:<span class="literal">false</span>, <span class="comment">//是否锁定选择区域（或叫做数据窗口）的大小。如果设置为 true </span></span><br><span class="line">　　则锁定选择区域的大小，也就是说，只能平移，不能缩放。 </span><br><span class="line">　　throttle:<span class="number">100</span>, <span class="comment">//设置触发视图刷新的频率。单位为毫秒（ms）。 </span></span><br><span class="line">　　zoomOnMouseWheel:<span class="literal">true</span>, <span class="comment">//如何触发缩放。可选值为：true：表示不按任何功能键，鼠标滚轮能触发缩放。false：表示鼠标滚轮不能触发缩放。'shift'：表示按住 shift 和鼠标滚轮能触发缩放。'ctrl'：表示按住 ctrl 和鼠标滚轮能触发缩放。'alt'：表示按住 alt 和鼠标滚轮能触发缩放。 </span></span><br><span class="line">　　moveOnMouseMove:<span class="literal">true</span>, <span class="comment">//如何触发数据窗口平移。true：表示不按任何功能键，鼠标移动能触发数据窗口平移。false：表示鼠标滚轮不能触发缩放。'shift'：表示按住 shift 和鼠标移动能触发数据窗口平移。'ctrl'：表示按住 ctrl 和鼠标移动能触发数据窗口平移。'alt'：表示按住 alt 和鼠标移动能触发数据窗口平移。 </span></span><br><span class="line">　　left:<span class="string">"center"</span>, <span class="comment">//组件离容器左侧的距离,'left', 'center', 'right','20%' </span></span><br><span class="line">　　top:<span class="string">"top"</span>, <span class="comment">//组件离容器上侧的距离,'top', 'middle', 'bottom','20%' </span></span><br><span class="line">　　right:<span class="string">"auto"</span>, <span class="comment">//组件离容器右侧的距离,'20%' </span></span><br><span class="line">　　bottom:<span class="string">"auto"</span>, <span class="comment">//组件离容器下侧的距离,'20%' </span></span><br><span class="line"></span><br><span class="line">&#125;, </span><br><span class="line">&#123; </span><br><span class="line">　　id: <span class="string">'dataZoomY'</span>, </span><br><span class="line">　　type: <span class="string">'inside'</span>, </span><br><span class="line">　　filterMode: <span class="string">'empty'</span>, </span><br><span class="line">　　disabled:<span class="literal">false</span>, <span class="comment">//是否停止组件的功能。 </span></span><br><span class="line">　　xAxisIndex:<span class="number">0</span>, <span class="comment">//设置 dataZoom-inside 组件控制的 x轴,可以用数组表示多个轴 </span></span><br><span class="line">　　yAxisIndex:[<span class="number">0</span>,<span class="number">2</span>], <span class="comment">//设置 dataZoom-inside 组件控制的 y轴,可以用数组表示多个轴 </span></span><br><span class="line">　　radiusAxisIndex:<span class="number">3</span>, <span class="comment">//设置 dataZoom-inside 组件控制的 radius 轴,可以用数组表示多个轴 </span></span><br><span class="line">　　angleAxisIndex:[<span class="number">0</span>,<span class="number">2</span>], <span class="comment">//设置 dataZoom-inside 组件控制的 angle 轴,可以用数组表示多个轴 </span></span><br><span class="line">　　start: <span class="number">30</span>, <span class="comment">//数据窗口范围的起始百分比,表示30% </span></span><br><span class="line">　　end: <span class="number">70</span>, <span class="comment">//数据窗口范围的结束百分比,表示70% </span></span><br><span class="line">　　startValue:<span class="number">10</span>, <span class="comment">//数据窗口范围的起始数值 </span></span><br><span class="line">　　endValue:<span class="number">100</span>, <span class="comment">//数据窗口范围的结束数值。 </span></span><br><span class="line">　　orient:<span class="string">"horizontal"</span>, <span class="comment">//布局方式是横还是竖。不仅是布局方式，对于直角坐标系而言，也决定了，缺省情况控制横向数轴还是纵向数轴。'horizontal'：水平。'vertical'：竖直。 </span></span><br><span class="line">　　zoomLock:<span class="literal">false</span>, <span class="comment">//是否锁定选择区域（或叫做数据窗口）的大小。如果设置为 true 则锁定选择区域的大小，也就是说，只能平移，不能缩放。 </span></span><br><span class="line">　　throttle:<span class="number">100</span>, <span class="comment">//设置触发视图刷新的频率。单位为毫秒（ms）。 </span></span><br><span class="line">　　zoomOnMouseWheel:<span class="literal">true</span>, <span class="comment">//如何触发缩放。可选值为：true：表示不按任何功能键，鼠标滚轮能触发缩放。false：表示鼠标滚轮不能触发缩放。'shift'：表示按住 shift 和鼠标滚轮能触发缩放。'ctrl'：表示按住 ctrl 和鼠标滚轮能触发缩放。'alt'：表示按住 alt 和鼠标滚轮能触发缩放。 </span></span><br><span class="line">　　moveOnMouseMove:<span class="literal">true</span>, <span class="comment">//如何触发数据窗口平移。true：表示不按任何功能键，鼠标移动能触发数据窗口平移。false：表示鼠标滚轮不能触发缩放。'shift'：表示按住 shift 和鼠标移动能触发数据窗口平移。'ctrl'：表示按住 ctrl 和鼠标移动能触发数据窗口平移。'alt'：表示按住 alt 和鼠标移动能触发数据窗口平移。 </span></span><br><span class="line">&#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">series: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'温度（℃）'</span>,</span><br><span class="line">        type: <span class="string">'line'</span>,    <span class="comment">//折线图表示（生成温度曲线）</span></span><br><span class="line">        symbol: <span class="string">'emptycircle'</span>,    <span class="comment">//设置折线图中表示每个坐标点的符号；emptycircle：空心圆；emptyrect：空心矩形；circle：实心圆；emptydiamond：菱形</span></span><br><span class="line">        stack: 总量,  <span class="comment">//写一样会有累加的效果</span></span><br><span class="line">        areaStyle: &#123;&#125;,</span><br><span class="line">        markPoint: &#123;</span><br><span class="line">           data: [</span><br><span class="line">                &#123;<span class="attr">type</span>: <span class="string">'max'</span>, <span class="attr">name</span>: <span class="string">'最大值'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">type</span>: <span class="string">'min'</span>, <span class="attr">name</span>: <span class="string">'最小值'</span>&#125;</span><br><span class="line">           ]</span><br><span class="line">        &#125;<span class="comment">//面积的阴影</span></span><br><span class="line">        data: [<span class="number">110</span>, <span class="number">20</span>, <span class="number">56</span>, <span class="number">36</span>, <span class="number">96</span>, <span class="number">58</span>, <span class="number">25</span>],     <span class="comment">//数据值通过Ajax动态获取</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'湿度（%）'</span>,</span><br><span class="line">        yAxisIndex: <span class="string">'1'</span>,    <span class="comment">//定位到第二个坐标轴</span></span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        symbol: <span class="string">'emptyrect'</span>,</span><br><span class="line">        data: [<span class="number">45</span>, <span class="number">63</span>, <span class="number">10</span>, <span class="number">62</span>, <span class="number">35</span>, <span class="number">88</span>, <span class="number">66</span>]</span><br><span class="line">    &#125;,]</span><br></pre></td></tr></table></figure>

<h2 id="Echarts-设置"><a href="#Echarts-设置" class="headerlink" title="Echarts 设置"></a>Echarts 设置</h2><h3 id="异步数据加载"><a href="#异步数据加载" class="headerlink" title="异步数据加载"></a>异步数据加载</h3><p>第一种</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"></span><br><span class="line">$.<span class="keyword">get</span>('data.json').done(function (data) &#123;</span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">            text: <span class="string">'异步数据加载示例'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">            data:[<span class="string">'销量'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">            name: <span class="string">'销量'</span>,</span><br><span class="line">            type: <span class="string">'bar'</span>,</span><br><span class="line">            data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"><span class="comment">// 显示标题，图例和空的坐标轴</span></span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'异步数据加载示例'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;&#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        data:[<span class="string">'销量'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: []</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">'销量'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        data: []</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步加载数据</span></span><br><span class="line">$.<span class="keyword">get</span>('data.json').done(function (data) &#123;</span><br><span class="line">    <span class="comment">// 填入数据</span></span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            data: data.categories</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">            <span class="comment">// 根据名字对应到相应的系列</span></span><br><span class="line">            name: <span class="string">'销量'</span>,</span><br><span class="line">            data: data.data</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="loading动画"><a href="#loading动画" class="headerlink" title="loading动画"></a>loading动画</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myChart.showLoading();</span><br><span class="line">$.<span class="keyword">get</span>('data.json').done(function (data) &#123;</span><br><span class="line">    myChart.hideLoading();</span><br><span class="line">    myChart.setOption(...);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>此文章部分搬运，部分原创，但由于多次修稿，搬运的地址遗失，如有侵权，麻烦联系我的邮箱。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Effective Coding——Alibaba java开发手册</title>
    <url>/2019/07/12/Effective-Coding%E2%80%94%E2%80%94Alibaba-java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="第一章-编程规约"><a href="#第一章-编程规约" class="headerlink" title="第一章 编程规约"></a>第一章 编程规约</h2><h4 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h4><ol>
<li>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</li>
<li>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</li>
<li>类名使用Uppercamelcase风格，但以下情形例外：Do/B0/DTo/vo/A0/PO/UID等。</li>
</ol>
<a id="more"></a>

<ol>
<li><p>方法名、参数名、成员变量、局部变量都统一使用1owerCamelCase风格，必须遵从驼峰形式。</p>
</li>
<li><p>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p>
</li>
<li><p>抽象类命名使用Abstract或Base开头；异常类命名使用Exception 结尾；测试类命名以它要测试的类的名称开始，以Test结尾。</p>
</li>
<li><p>类型与中括号紧挨相连来表示数组。</p>
</li>
<li><p>P0J0类中布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误。</p>
</li>
<li><p>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p>
</li>
<li><p>杜绝完全不规范的缩写，避免望文不知义。</p>
</li>
<li><p>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。</p>
</li>
<li><p>如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</p>
</li>
<li><p>接口类中的方法和属性不要加任何修饰符号（public也不要加），保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>
</li>
<li><p>接口和实现类的命名有两套规则：</p>
<ul>
<li>对于Service和DA0类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别。</li>
<li>如果是形容能力的接口名称，取对应的形容词为接口名（通常是-able的形式）。</li>
</ul>
</li>
<li><p>枚举类名建议带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p>
</li>
<li><p>各层命名规约：</p>
<p>A）Service/DA0层方法命名规约<br>1）获取单个对象的方法用get做前缀。<br>2）获取多个对象的方法用1ist做前缀，复数形式结尾如：listObjects。<br>3）获取统计值的方法用count做前缀。<br>4）插入的方法用save/insert做前缀。<br>5）删除的方法用remove/delete做前缀。<br>6）修改的方法用update做前缀。<br>B）领域模型命名规约<br>1）数据对象：xxxDO，xxx即为数据表名。<br>2）数据传输对象：xxXDTO，xxx为业务领域相关的名称。<br>3）展示对象：xxxVO，xxx一般为网页名称。<br>4）POJ0是DO/DTO/B0/Vo的统称，禁止命名成xxxP0J0。</p>
</li>
</ol>
<h4 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h4><ol>
<li><p>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p>
</li>
<li><p>在1ong或者Long赋值时，数值后使用大写的L，不能是小写的1，小写容易跟数字1混淆，造成误解。</p>
</li>
<li><p>不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。</p>
</li>
<li><p>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br>1）跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下。<br>2）应用内共享常量：放置在一方库中，通常是子模块中的constant目录下。</p>
<p>3）子工程内部共享常量：即在当前子工程的constant目录下。<br>4）包内共享常量：即在当前包下单独的constant目录下。<br>5）类内共享常量：直接在类内部 private static final定义。</p>
</li>
<li><p>如果变量值仅在一个固定范围内变化用enum类型来定义。</p>
</li>
</ol>
<h4 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h4><ol>
<li><code>if/for/while/switch/do</code> 等保留字与括号之间都<strong>必须加空格</strong>。</li>
<li>采用 4 个空格缩进，禁止使用 Tab 控制符。</li>
<li>注释的双斜线与注释内容之间<strong>有且仅有一个空格</strong>。e.g. <code>// 这是示例注释</code></li>
<li>单行字符数不超过 120 个，超出则需要换行，换行遵循：<ul>
<li>第二行相对第一行<strong>缩进 4 个空格</strong>，从第三行开始，不再缩进。</li>
<li>运算符与下文一起换行。</li>
<li>方法调用的点符号与下文一起换行。</li>
<li>方法调用的点符号与下文一起换行时，在逗号后进行。</li>
<li>在括号前不要换行。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正例</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...</span><br><span class="line">    .append(<span class="string">"huang"</span>)...</span><br><span class="line">    .append(<span class="string">"huang"</span>)...</span><br><span class="line">    .append(<span class="string">"huang"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(<span class="string">"ge"</span>).append(<span class="string">"cheng"</span>)...append</span><br><span class="line">    (<span class="string">"no line break here"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法参数超过 120 个字符时，不要在逗号前换行</span></span><br><span class="line">method(args1, args2, args3, ...</span><br><span class="line">    , argsX);</span><br></pre></td></tr></table></figure>

<ol>
<li>IDE 的 text file encoding 设置为 UTF-8；IDE 文件的换行符使用 UNIX 格式，不要使用 Windows 格式。</li>
<li><strong>没有必要</strong>增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</li>
</ol>
<h4 id="oop规约"><a href="#oop规约" class="headerlink" title="oop规约"></a>oop规约</h4><ol>
<li><p>慎用0bject的clone方法来拷贝对象。</p>
</li>
<li><p>类成员与方法访问控制从严：</p>
<p>1）如果不允许外部直接通过new来创建对象，那么构造方法必须是private。<br>2）工具类不允许有public或default构造方法。<br>3）类非static成员变量并且与子类共享，必须是protected。<br>4）类非static成员变量并且仅在本类使用，必须是private。<br>5）类static成员变量如果仅在本类使用，必须是private。<br>6）若是static成员变量，考虑是否为final。<br>7）类成员方法只供类内部调用，必须是private。<br>8）类成员方法只对继承类公开，那么限制为protected。</p>
</li>
</ol>
<h4 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h4><ol>
<li><strong>所有</strong>相同类型的包装类对象之间值的比较，全部使用 equals 方法。</li>
<li>构造方法里面<strong>禁止</strong>加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>
<li>慎用 Object 的 clone 方法来拷贝对象。<br><strong>说明</strong>：对象的 clone 方法<strong>默认是浅拷贝</strong>，若想实现深拷贝，需要重写 clone 方法。</li>
<li>关于 hashCode 和 equals 的处理，遵循如下规则：<ul>
<li>只要重写 equals，就必须重写 hashCode；</li>
<li>因为 Set 存储的是不重复对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。</li>
<li>如果自定义对象作为 Map 的键，那么必须重写这两个方法。</li>
<li><strong>说明</strong>：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地将 String 对象作为 key 来使用。</li>
</ul>
</li>
<li>ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 <code>ClassCastException</code> 异常。<br><strong>说明</strong>：subList 是 ArrayList 的一个视图，对于 subList 子列表的所有操作最终会反映到原列表上。</li>
<li>在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 <code>ConcurrentModificationException</code>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">    list.add(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子列表</span></span><br><span class="line">List&lt;Integer&gt; subList = list.subList(<span class="number">0</span>, list.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对原集合元素个数修改</span></span><br><span class="line">list.add(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导致子列表异常</span></span><br><span class="line"><span class="comment">// Exception in thread "main" java.util.ConcurrentModificationException</span></span><br><span class="line">System.out.println(subList);</span><br></pre></td></tr></table></figure>

<ol>
<li>在使用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，否则会抛出 <code>UnsupportedOperationException</code> 异常。<br><strong>说明</strong>：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。体现的是适配器模式，只是转换接口，后台的数据仍是数组。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] str = <span class="keyword">new</span> String[] &#123;<span class="string">"you"</span>, <span class="string">"wu"</span>&#125;;</span><br><span class="line">List list = Arrays.asList(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list.add("bingo") 运行时异常</span></span><br><span class="line"></span><br><span class="line">str[<span class="number">0</span>] = <span class="string">"bingo"</span>;</span><br><span class="line"><span class="comment">// list.get(0) 也会随着修改。</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在集合初始化时，指定集合初始值大小。若 HashMap 需要放置 1024 个元素，由于没有设置初始大小（默认 16），随着元素不断增加，容量被迫扩大 7 次，resize 需要重建 hash 表，这严重影响性能。</li>
<li>使用 entrySet 遍历 Map 类集合 K/V，而不是 keySet 方式遍历。如果时 JDK8，使用 Map.foreach() 方法。</li>
<li><strong>高度注意</strong> Map 类集合 K/V 能不能存储 null 值的情况。由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值的，而事实上，存储 null 值时会抛出 NPE 异常。</li>
</ol>
<table>
<thead>
<tr>
<th align="left">集合类</th>
<th align="left">Key</th>
<th align="left">Value</th>
<th align="left">Supper</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Hashtable</td>
<td align="left">不允许为 null</td>
<td align="left">不允许为 null</td>
<td align="left">Dictionary</td>
<td align="left">线程安全</td>
</tr>
<tr>
<td align="left">ConcurrentHashMap</td>
<td align="left"><strong>不允许</strong>为 null</td>
<td align="left"><strong>不允许</strong>为 null</td>
<td align="left">AbstractMap</td>
<td align="left">锁分段技术</td>
</tr>
<tr>
<td align="left">TreeMap</td>
<td align="left">不允许为 null</td>
<td align="left">允许为 null</td>
<td align="left">AbstractMap</td>
<td align="left">线程不安全</td>
</tr>
<tr>
<td align="left">HashMap</td>
<td align="left">允许为 null</td>
<td align="left">允许为 null</td>
<td align="left">AbstractMap</td>
<td align="left">线程不安全</td>
</tr>
</tbody></table>
<ol>
<li>利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains 方法进行遍历、对比、去重操作。</li>
</ol>
<h4 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h4><ol>
<li>在创建线程或线程池时，请指定有意义的线程名称，方便出错时回溯。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeTaskThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">"TimeTaskThread"</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。<br><strong>说明</strong>：使用线程池的好处是减少在创建和销毁线程上所消耗的时间及系统资源，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大流量同类线程而导致消耗完内存或者“过度切换”的问题。</li>
<li>在对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则<strong>可能会造成死锁</strong>。<br><strong>说明</strong>：如果线程一需要对表 A/B/C 依次加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A/B/C，否则可能出现死锁。</li>
<li>volatile 解决多线程内存不可见问题。对于一写多读，可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</li>
</ol>
<h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h4><ol>
<li>在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，<strong>都必须</strong>包含一个 default 语句并且放在最后，即使它什么代码都没有。</li>
<li>在高并发场景中，<strong>避免使用</strong>“等于”判断作为中断或退出的条件。<br><strong>说明</strong>：如果并发控制没有处理好，容易产生等值判断被击穿的情况，应使用大于或小于的区间判断条件来代替。</li>
<li>不要在条件判断中执行其它复杂的语句，可将复杂逻辑判断的结果赋值给一个<strong>有意义的布尔变量名</strong>，以提高可读性。</li>
</ol>
<h4 id="注释规约"><a href="#注释规约" class="headerlink" title="注释规约"></a>注释规约</h4><ol>
<li>特殊注释标记。TODO 实际上是一个 Javadoc 的标签，虽然目前的 Javadoc 还没有实现，但已经被广泛使用，且<strong>只能应用于类、接口和方法上</strong>。在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正。</li>
</ol>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol>
<li>注意 Math.random() 这个方法返回的是 double 类型，取值范围 x ∈ [0, 1)，如果想获得整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</li>
</ol>
<h2 id="第二章-异常日志"><a href="#第二章-异常日志" class="headerlink" title="第二章 异常日志"></a>第二章 异常日志</h2><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ol>
<li>catch 时请分清稳定代码和不稳定代码。稳定代码指的是无论如何都不会出错的代码。对于非稳定代码的 catch，尽可能在进行异常类型的区分后，再做对应的异常处理。</li>
<li>不要在 finally 块中使用 return。<br><strong>说明</strong>：当 finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</li>
<li>定义时区分 unchecked/checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如 DAOException/ServiceException 等。</li>
</ol>
<h4 id="日志规约"><a href="#日志规约" class="headerlink" title="日志规约"></a>日志规约</h4><ol>
<li>应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架 SLF4J 中的 API。使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Abc<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并及时删除这些观察日志。</li>
</ol>
<h2 id="第三章-单元测试"><a href="#第三章-单元测试" class="headerlink" title="第三章 单元测试"></a>第三章 单元测试</h2><ol>
<li>单元测试是可重复执行的，不能受到外界环境的影响。</li>
<li>和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。</li>
<li>单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</li>
</ol>
<h2 id="第四章-安全规范"><a href="#第四章-安全规范" class="headerlink" title="第四章 安全规范"></a>第四章 安全规范</h2><ol>
<li>隶属于用户个人的页面或者功能必须进行权限控制校验。</li>
<li>用户敏感数据禁止直接展示，必须对展示数据进行脱敏。</li>
<li>用户输入的sQL参数严格使用参数绑定或者METADATA字段值限定，防止5QL注入，禁止字符串拼接SQL访问数据库。</li>
<li>用户请求传入的任何参数必须做有效性验证。</li>
<li>禁止向HTML页面输出未经安全过滤或未正确转义的用户数据。</li>
<li>表单、AJAX提交必须执行CSRF安全验证。</li>
<li>在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。</li>
<li>发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</li>
</ol>
<h2 id="第五章-mysql数据库"><a href="#第五章-mysql数据库" class="headerlink" title="第五章 mysql数据库"></a>第五章 mysql数据库</h2><h4 id="建表规约"><a href="#建表规约" class="headerlink" title="建表规约"></a>建表规约</h4><ol>
<li>表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型为 <code>unsigned tinyint</code>。<br><strong>说明</strong>：任何字段如果为非负数，则必须是 unsigned。</li>
<li>字段允许适当冗余，以提高查询性能，但必须考虑数据一致。e.g. 商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</li>
<li>冗余字段遵循：<ul>
<li>不是频繁修改的字段；</li>
<li>不是 varchar 超长字段，更不能是 text 字段。</li>
</ul>
</li>
</ol>
<h4 id="索引规约"><a href="#索引规约" class="headerlink" title="索引规约"></a>索引规约</h4><ol>
<li>在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。</li>
<li>页面搜索严禁左模糊或者全模糊，如果需要请通过搜索引擎来解决。<br><strong>说明</strong>：索引文件具有 B-Tree 的<strong>最左前缀匹配特性</strong>，如果左边的值未确定，那么无法使用此索引。</li>
<li>如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。<ul>
<li><strong>正例</strong>：where a=? and b=? order by c; 索引: a_b_c。</li>
<li><strong>反例</strong>：索引中有范围查找，那么索引有序性无法利用，如 WHERE a&gt;10 ORDER BY b; 索引 a_b 无法排序。</li>
</ul>
</li>
<li>利用延迟关联或者子查询优化超多分页场景。<br><strong>说明</strong>：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 的行，返回 N 行。当 offset 特别大的时候，效率会非常的低下，要么控制返回的总页数，要么对超过阈值的页数进行 SQL 改写。</li>
<li>建组合索引的时候，区分度最高的在最左边。</li>
<li>SQL 性能优化的目标，至少要达到 range 级别，要求是 ref 级别，最好是 consts。</li>
</ol>
<h4 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><ol>
<li>不要使用 count(列名) 或 count(常量) 来替代 count(<em>)，count(</em>) 是 SQL92 定义的标准统计行数的语句，跟数据库无关，跟 NULL 和非 NULL 无关。<br><strong>说明</strong>：count(*) 会统计值为 NULL 的行，而 count(列名) 不会统计此列为 NULL 值的行。</li>
<li><code>count(distinct column)</code> 计算该列除 NULL 外的不重复行数。注意，<code>count(distinct column1,column2)</code> 如果其中一列全为 NULL，那么即使另一列用不同的值，也返回为 0。</li>
<li>当某一列的值全为 NULL 时，<code>count(column)</code> 的返回结果为 0，但 <code>sum(column)</code> 的返回结果为 NULL，因此使用 sum() 时需注意 NPE 问题。<br>可以使用如下方式来避免 sum 的 NPE 问题。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="keyword">ISNULL</span>(<span class="keyword">SUM</span>(g), <span class="number">0</span>, <span class="keyword">SUM</span>(g))) <span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>使用 <code>ISNULL()</code> 来判断是否为 NULL 值。<br><strong>说明</strong>：NULL 与任何值的直接比较都为 NULL。</li>
<li>不得使用外键与级联，一切外键概念必须在应用层解决。<br><strong>说明</strong>：以学生和成绩的关系为例，学生表的 student_id 是主键，成绩表的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为<strong>级联更新</strong>。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</li>
<li><strong>禁止使用存储过程</strong>。存储过程难以调试和扩展，更没有移植性。</li>
<li><code>in</code> 操作能避免则避免。若实在避免不了，需要仔细评估 in 后面的集合元素数量，控制在 1000 个之内。</li>
</ol>
<h4 id="ORM-映射"><a href="#ORM-映射" class="headerlink" title="ORM 映射"></a>ORM 映射</h4><ol>
<li>POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性的映射。</li>
<li><code>sql.xml</code> 配置参数使用：<code>#{}, #param#</code>，不要使用 ${}，此种方式容易出现 SQL 注入。</li>
<li><code>@Transactional</code> 事务不要滥用。事务会影响数据库的 QPS。另外，使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</li>
</ol>
<h2 id="第六章-工程结构"><a href="#第六章-工程结构" class="headerlink" title="第六章 工程结构"></a>第六章 工程结构</h2><h4 id="应用分层"><a href="#应用分层" class="headerlink" title="应用分层"></a>应用分层</h4><ol>
<li>在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，因此使用 <code>catch(Exception e)</code> 方式，并 throw new <code>DAOException(e)</code>，不需要打印日志，因为日志在 Manager/Service 层，一定需要捕获并写到日志文件中去。如果同台服务器再写日志，会浪费性能和存储。</li>
</ol>
<h4 id="二方库依赖"><a href="#二方库依赖" class="headerlink" title="二方库依赖"></a>二方库依赖</h4><ol>
<li>定义 GAV 遵从以下规则：<ul>
<li>GroupID 格式：com.{公司/BU}.业务线.[子业务线]，最多 4 级。e.g. <code>com.taobao.jstorm</code></li>
<li>ArtifactID 格式：产品线名-模块名。语义不重复不遗漏。e.g. <code>dubbo-client、fastjson-api、jstorm-tool</code></li>
<li>Version 格式：主版本号.次版本号.修订号。</li>
</ul>
</li>
<li>线上应用不要依赖 SNAPSHOT 版本。<br><strong>说明</strong>：不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</li>
</ol>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ol>
<li>高并发服务器建议调小TCP协议的time_wait超时时间。</li>
<li>调大服务器所支持的最大文件句柄数（File Descriptor，简写为fd）。</li>
<li>给JVM环境参数设置-XX：+HeapDumpOnOutofMemoryError 参数，让JVM碰到00M场景时输出dump信息。</li>
<li>在线上生产环境，JVM的Xms和Xmx设置一样大小的内存容量，避免在GC后调整堆大小带来的压力。</li>
<li>服务器内部重定向使用forward；外部重定向地址使用URL拼装工具类来生成，否则会带来URL维护不一致的问题和潜在的安全风险。</li>
</ol>
<h2 id="第七章-设计规约"><a href="#第七章-设计规约" class="headerlink" title="第七章 设计规约"></a>第七章 设计规约</h2><ol>
<li>存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。</li>
<li>在需求分析阶段，如果与系统交互的User超过一类并且相关的User Case超过5个，使用用例图来表达更加清晰的结构化需求。</li>
<li>如果某个业务对象的状态超过3个，使用状态图来表达并且明确状态变化的各个触发条件。</li>
<li>如果系统中某个功能的调用链路上的涉及对象超过3个，使用时序图来表达并且明确各调用环节的输入与输出。</li>
<li>如果系统中模型类超过5个，并且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系。</li>
<li>如果系统中超过2个对象之间存在协作关系，并且需要表示复杂的处理流程，使用活动图来表示。</li>
<li>需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界。</li>
<li>类在设计与实现时要符合单一原则。<br>说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</li>
<li>谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。</li>
<li>系统设计时，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。</li>
<li>系统设计时，注意对扩展开放，对修改闭合。</li>
<li>系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，避免出现重复代码或重复配置的情况。</li>
<li>避免如下误解：敏捷开发=讲故事+编码+发布。</li>
</ol>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h5 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h5><p>可以在idea中加入Alibaba的规范插件，从而在平常的代码检视中趁早消灭问题。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Git下载加速教程</title>
    <url>/2019/07/28/Git%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>大家普遍采取的是更改本地的host文件，然后cmd命令刷新</p>
<p>1.访问<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">这里</a>，依次获取下面三个url的ping的ip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github.com</span><br><span class="line">github.global.ssl.fastly.net</span><br><span class="line">codeload.github.com</span><br></pre></td></tr></table></figure>

<p>2.需要<code>C:\Windows\System32\drivers\etc</code>然后修改github相关的属性为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.30.253.113  github.com</span><br><span class="line">151.101.25.194  github.global.ssl.fastly.net</span><br><span class="line">192.30.253.121  codeload.github.com</span><br></pre></td></tr></table></figure>

<p>3.执行<code>ipconfig /flushdns</code>命令，刷新 DNS 缓存。</p>
<a id="more"></a>

<h3 id="方法二（推荐）"><a href="#方法二（推荐）" class="headerlink" title="方法二（推荐）"></a>方法二（推荐）</h3><p>前期的准备：首先自己将代理开启，系统代理模式改为<strong>全局模式</strong></p>
<p>1.设置Git的代理方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span> </span><br><span class="line"></span><br><span class="line">git config --global https.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>

<p>2.取消（不建议）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<p>3.通过Git命令来确认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>

<p>结果显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global --list</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">filter.lfs.required=<span class="literal">true</span></span><br><span class="line">user.name=**********             <span class="comment">#用户名</span></span><br><span class="line">user.email=*********@gmail.com   <span class="comment">#注册邮箱</span></span><br><span class="line">core.editor=<span class="string">"D:\WDGJ\Sublime Text 3\sublime_text.exe"</span> -w</span><br><span class="line">http.http://github.com.proxy=http://127.0.0.1:1080</span><br><span class="line">https.https://github.com.proxy=https://127.0.0.1:1080</span><br><span class="line">http.proxy=http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>socks5的代理可以获取<a href="https://naawy.com/" target="_blank" rel="noopener">这里</a></p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>利用gitee来进行转接下载，要求：一个github账户，一个码云gitee账户</p>
<ol>
<li>将github上面你想要搞下来的项目首先 frok 到你自己的github的账户中去。耗时:一瞬间</li>
<li>登录gitee，没有的自行注册。网页中有添加项目的按钮，一个加号。点击加号，下拉列表里面有 迁移github项目 的选项，点开后按照提示关联自己的github账号，之后选择你要迁移的项目，按提示操作。耗时:不到三分钟。</li>
<li>按照 clone github项目方法， clone 迁移到gitee账户中的项目。区别是 clone 链接换成了目标项目在gitee中的链接。通常下载速度是以MB/s为单位的。</li>
</ol>
<p>可以参考这位大佬的<a href="https://blog.csdn.net/kcx64/article/details/83866633" target="_blank" rel="noopener">文章</a></p>
]]></content>
      <categories>
        <category>Code工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git代码统计命令行</title>
    <url>/2019/07/29/Git%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="仓库提交者排名前-5"><a href="#仓库提交者排名前-5" class="headerlink" title="仓库提交者排名前 5"></a>仓库提交者排名前 5</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | sort | uniq -c | sort -k1 -n -r | head -n 5</span><br></pre></td></tr></table></figure>

<h3 id="仓库提交者（全部）"><a href="#仓库提交者（全部）" class="headerlink" title="仓库提交者（全部）"></a>仓库提交者（全部）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | sort | uniq -c | sort -k1 -n -r</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="统计个人的代码提交量"><a href="#统计个人的代码提交量" class="headerlink" title="统计个人的代码提交量"></a>统计个人的代码提交量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$(git config --get user.name)</span>"</span> --pretty=tformat: --numstat | gawk <span class="string">'&#123; add += $1 ; subs += $2 ; loc += $1 - $2 &#125; END &#123; printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc &#125;'</span> -</span><br></pre></td></tr></table></figure>

<h3 id="贡献者统计"><a href="#贡献者统计" class="headerlink" title="贡献者统计"></a>贡献者统计</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | sort -u | wc -l</span><br></pre></td></tr></table></figure>

<h3 id="提交数统计"><a href="#提交数统计" class="headerlink" title="提交数统计"></a>提交数统计</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline | wc -l</span><br></pre></td></tr></table></figure>

<h3 id="添加或修改的代码行数"><a href="#添加或修改的代码行数" class="headerlink" title="添加或修改的代码行数"></a>添加或修改的代码行数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>|perl -ne <span class="string">'END &#123; print $c &#125; $c += $1 if /(\d+) insertions/;</span></span><br></pre></td></tr></table></figure>

<h3 id="仓库提交者（邮箱）排名前-5"><a href="#仓库提交者（邮箱）排名前-5" class="headerlink" title="仓库提交者（邮箱）排名前 5"></a>仓库提交者（邮箱）排名前 5</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=format:%ae | gawk -- <span class="string">'&#123; ++c[$0]; &#125; END &#123; for(cc in c) printf "%5d %s\n",c[cc],cc; &#125;'</span> | sort -u -n -r | head -n 5</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令大全</title>
    <url>/2019/07/18/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config -global user.name &lt;name&gt; <span class="comment">#设置提交者名字</span></span><br><span class="line">$ git config -global user.email &lt;email&gt; <span class="comment">#设置提交者邮箱</span></span><br><span class="line">$ git config -global core.editor &lt;editor&gt; <span class="comment">#设置默认文本编辑器</span></span><br><span class="line">$ git config -global merge.tool &lt;tool&gt; <span class="comment">#设置解决合并冲突时差异分析工具</span></span><br><span class="line">$ git config -list <span class="comment">#检查已有的配置信息</span></span><br></pre></td></tr></table></figure>

<h2 id="创建新版本库"><a href="#创建新版本库" class="headerlink" title="创建新版本库"></a>创建新版本库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;url&gt; <span class="comment">#克隆远程版本库,尽量使用ssh        </span></span><br><span class="line">$ git init <span class="comment">#初始化本地版本库</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add . <span class="comment">#添加所有改动过的文件</span></span><br><span class="line">            <span class="comment">#如果想忽略某个文件，需要新建一个.gitignore文件,写入想忽略的文件名称</span></span><br><span class="line">$ git add &lt;file&gt; <span class="comment">#添加指定的文件</span></span><br><span class="line">$ git mv &lt;old&gt; &lt;new&gt; <span class="comment">#文件重命名</span></span><br><span class="line">$ git rm &lt;file&gt; <span class="comment">#删除文件</span></span><br><span class="line">$ git rm -cached &lt;file&gt; <span class="comment">#停止跟踪文件但不删除</span></span><br><span class="line">$ git commit -m &lt;file&gt; <span class="comment"># 提交指定文件</span></span><br><span class="line">$ git commit -m “commit message” <span class="comment">#提交所有更新过的文件</span></span><br><span class="line">$ git commit -amend <span class="comment"># 修改最后一次提交</span></span><br><span class="line">$ git commit -C HEAD -a -amend <span class="comment">#增补提交（不会产生新的提交历史纪录）</span></span><br></pre></td></tr></table></figure>

<h2 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset -hard HEAD <span class="comment">#撤消工作目录中所有未提交文件的修改内容  比如删除也可以撤销</span></span><br><span class="line">$ git checkout HEAD &lt;file1&gt; &lt;file2&gt; <span class="comment">#撤消指定的未提交文件的修改内容</span></span><br><span class="line">$ git checkout HEAD. <span class="comment">#撤消所有文件</span></span><br><span class="line">$ git revert &lt;commit&gt; <span class="comment">#撤消指定的提交</span></span><br><span class="line">// 删除恢复例： </span><br><span class="line">$ git rm eee   <span class="comment"># rm 'eee'              </span></span><br><span class="line">$ git reset --hard    <span class="comment">#也可以加上 HEAD 恢复所有删除的文件</span></span><br><span class="line">     <span class="comment"># HEAD is now at 9d1df48 aaaaaaaa</span></span><br><span class="line">$ git checkout HEAD eee  <span class="comment">#这样直接恢复单个文件，reset会将所有删除的文件都恢复</span></span><br><span class="line">$ git checkout HEAD .      <span class="comment">#这样是恢复所有文件</span></span><br><span class="line">$ git revert    <span class="comment">#回退以前的版本</span></span><br></pre></td></tr></table></figure>

<h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">#查看提交历史                            # 这里查看的是所有文件的日志</span></span><br><span class="line">$ git <span class="built_in">log</span> -p &lt;file&gt; <span class="comment">#查看指定文件的提交历史        # 如git log -e filename</span></span><br><span class="line">$ git blame &lt;file&gt; <span class="comment">#以列表方式查看指定文件的提交历史</span></span><br><span class="line">$ gitk <span class="comment">#查看当前分支历史纪录</span></span><br><span class="line">$ gitk &lt;branch&gt; <span class="comment">#查看某分支历史纪录</span></span><br><span class="line">$ gitk --all <span class="comment">#查看所有分支历史纪录</span></span><br><span class="line">$ git branch -v <span class="comment">#每个分支最后的提交</span></span><br><span class="line">$ git status <span class="comment">#查看当前状态</span></span><br><span class="line">$ git diff <span class="comment">#查看变更内容</span></span><br></pre></td></tr></table></figure>

<h2 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch <span class="comment">#显示所有本地分支</span></span><br><span class="line">$ git checkout &lt;branch/tagname&gt; <span class="comment">#切换到指定分支或标签</span></span><br><span class="line">$ git branch &lt;new-branch&gt; <span class="comment">#创建新分支</span></span><br><span class="line">$ git branch -d &lt;branch&gt; <span class="comment">#删除本地分支</span></span><br><span class="line">$ git tag <span class="comment">#列出所有本地标签</span></span><br><span class="line">$ git tag &lt;tagname&gt; <span class="comment">#基于最新提交创建标签</span></span><br><span class="line">$ git tag -d &lt;tagname&gt; <span class="comment">#删除标签</span></span><br></pre></td></tr></table></figure>

<h2 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branch&gt; <span class="comment">#合并指定分支到当前分支</span></span><br><span class="line">$ git rebase &lt;branch&gt; <span class="comment">#衍合指定分支到当前分支</span></span><br><span class="line">$ git checkout dev    <span class="comment">#切换分支</span></span><br><span class="line">$ touch 分支two测试  <span class="comment">#分支创建一个文件</span></span><br><span class="line"></span><br><span class="line">$ git checkout <span class="built_in">test</span>-branch</span><br><span class="line">$ git merge two         <span class="comment">#最后ls查看就能看到two创建的文件了</span></span><br></pre></td></tr></table></figure>

<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v <span class="comment">#查看远程版本库信息</span></span><br><span class="line">$ git remote show &lt;remote&gt; <span class="comment">#查看指定远程版本库信息</span></span><br><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt; <span class="comment">#添加远程版本库</span></span><br><span class="line">$ git fetch &lt;remote&gt; <span class="comment">#从远程库获取代码</span></span><br><span class="line">$ git pull &lt;remote&gt; &lt;branch&gt; <span class="comment">#下载代码及快速合并</span></span><br><span class="line">$ git push &lt;remote&gt; &lt;branch&gt; <span class="comment">#上传代码及快速合并</span></span><br><span class="line">$ git push &lt;remote&gt; : &lt;branch&gt;/&lt;tagname&gt; <span class="comment">#删除远程分支或标签</span></span><br><span class="line">$ git push -tags <span class="comment">#上传所有标签</span></span><br></pre></td></tr></table></figure>

<h2 id="Git命令图解"><a href="#Git命令图解" class="headerlink" title="Git命令图解"></a>Git命令图解</h2><p><a href="https://www.linuxidc.com/upload/2015_08/150803103365301.png" target="_blank" rel="noopener"><img data-src="https://www.linuxidc.com/upload/2015_08/150803103365301.png" alt="img"></a></p>
<p><strong>Xmind转载来源：Linux公社</strong></p>
]]></content>
      <categories>
        <category>Code工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap的实现原理</title>
    <url>/2019/07/20/HashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HashMap-概述"><a href="#HashMap-概述" class="headerlink" title="HashMap 概述"></a>HashMap 概述</h2><p>HashMap 是基于哈希表的 Map 接口的非同步实现。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p>
<h2 id="HashMap-的数据结构"><a href="#HashMap-的数据结构" class="headerlink" title="HashMap 的数据结构"></a>HashMap 的数据结构</h2><p>在 java 编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap 也不例外。HashMap实际上是一个“ 链表散列”。</p>
<p><a href="https://images2015.cnblogs.com/blog/1020081/201609/1020081-20160907220825629-573567526.png" target="_blank" rel="noopener"><img data-src="https://images2015.cnblogs.com/blog/1020081/201609/1020081-20160907220825629-573567526.png" alt="https://images2015.cnblogs.com/blog/1020081/201609/1020081-20160907220825629-573567526.png"></a></p>
<p>从上图中可以看出，HashMap 底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个 HashMap 的时候，就会初始化一个数组。</p>
<a id="more"></a>

<p><strong>源码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The table, resized as necessary. Length MUST Always be a power of two.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">final</span> K key;</span><br><span class="line">V value;</span><br><span class="line">Entry&lt;K,V&gt; next;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">   ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，Entry 就是数组中的元素，每个 Map.Entry 其实就是一个 key-value 对，它持有一个指向下一个元素的引用，这就构成了链表。</p>
<h2 id="HashMap-的存取实现"><a href="#HashMap-的存取实现" class="headerlink" title="HashMap 的存取实现"></a>HashMap 的存取实现</h2><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">            inflateTable(threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（1）当table为空时，就调用inflateTable方法扩大table的容量，inflateTable的源码如下，入参是要把table的扩大的容量大小，但由于table的容量只能是2的幂次方（原因稍后会解释），所以为了保证存储需求且最节省空间，需要先计算出大于等于且最接近2的幂次方，然后实例化table，数组容量为新计算出的长度capacity。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回大于等于且最接近2的幂次方的值</span></span><br><span class="line">        <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</span><br><span class="line">        threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">        initHashSeedAsNeeded(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）如下面putForNullKey()方法源码所示，当put的元素key值为null时，会把该元素存储到HashMap的数组下标为0的链表上，先遍历该链表，找到key是null的节点，用新的value替换旧的value；如果没有找到key是null的节点，就直接在数组下标为0的链表上添加该元素（键值对）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）计算key的hash，根据hash计算数组下表</p>
<p>hash(key)方法是根据key值计算并返回一个整型的数，在Java7中，如果key为String，主要以sun.misc.Hashing.stringHash32((String) k)的方式计算，否则对hashSeed和key的hashCode进行异或运算，再进行无符号右移、异或计算，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h ^= k.hashCode();</span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java8中，直接(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>计算出hash值后，需要根据hash值来计算数组的下标，如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>计算数组下标直接用hash值和数组长度-1进行与运算，因为计算出来的hash值是一个整型数据，范围在-2^31~2^31-1，大约有40多亿个数，怎么根据这40多亿中的一个数来决定数组的其中一个下标呢，为了便于理解来举个例子：</p>
<p>比如我们向HashMap中存入了两个键值对entry1(key1=”abc”,value1=”ABC”)、entry2(key2=”def”,value1=”DEF”)，假设key1对应的hash值为18，二进制为10010，假设key2对应的hash值为27，二进制为11011。</p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1113089/084pakx6og.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1113089/084pakx6og.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<p>其中会发现一个规律，如果数组长度为2的幂次方，那么数组长度-1的二进制每个位数的值都是1，与key的hash进行&amp;运算之后的结果，除了超过数组长度-1数值的高位部分，低位部分都与key的hash值一致。</p>
<p>如果数组长度不是2的幂次方，比如15，结果会是什么样呢？如下图：</p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1113089/1ig0euvkul.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1113089/1ig0euvkul.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<p>当数组长度是15的时候，其二进制末尾数值为0，计算结果的末尾肯定永远是0，所以永远不会有计算结果为00001、00011、00101、00111、01001、01011、01101、01111这几种末尾是1的情况，也就是数组下标为1、3、5、7、9、11、13、15这几个位置永远都不会存储数据，造成了严重的空间浪费，这就是HashMap中的数组长度必须是2的幂次方的原因。</p>
<p>（4）存储元素</p>
<p>找到数组下标之后，就要存储元素啦，有两种情况：1、put元素的key值已经存在；2、put元素的key值不存在。第一种情况会先遍历数组下标对应空间存储的链表，如果存在该key值的节点，就把对应新的value替换旧的value；第二种情况，需要调用addEntry(hash,key,value,数组下标)来新创建一个节点元素，创建节点元素之前，先进行扩容判断操作，如过需要扩容，就把数组空间扩大之后才创建新节点，addEntry()方法的源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">            hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">            bucketIndex = indexFor(hash, table.length);</span><br><span class="line">        &#125;</span><br><span class="line">        createEntry(hash, key, value, bucketIndex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>size就是HashMap中目前存储元素的个数，threshold的值是扩容临界值（数组长度*加载因子），当size大于等于threshold并且数组当前位置存储内容不为空时，就调用resize方法进行扩容操作（java1.6之前只要size大于等于threshold就会扩容），扩大后的容量为数组长度的2倍。扩容的核心逻辑在resize方法调用的transfer方法中，主要就是把原来table中的元素复制到扩容后的newTable中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;<span class="comment">//遍历数组</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;    <span class="comment">//遍历链表</span></span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;<span class="comment">//转移头结点之前先保存头结点的下一个结点</span></span><br><span class="line">                <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                    e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>为了比较直观地理解transfer方法这段代码，画了几张图，假如HashMap中现在有entry1、entry2、entry3、entry4四个元素，且他们在table中的存储位置如下：</p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1113089/scsgfwhwwx.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1113089/scsgfwhwwx.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<p>for循环遍历的是table数组中的每一个元素，while循环遍历的是每一条链表上的节点。当第一次执行完Entry next = e.next;后，e指向的是enty1，next指向的是entry2；当第一次执行完int i = indexFor(e.hash, newCapacity);后，i的值就是e（entry1）在新表中计算出来的下标（这里假设i=2）；当第一次执行完e.next = newTable[i];后，entry1的next就指向newTable[2]，也就是null（这一步是重点，会导致在同一条链中新节点总会插入到链表头）；当第一次执行完newTable[i] = e;后，entry1已经被转移到了新表数组下标是2的链表中，如下图：</p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1113089/sb6c3o02du.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1113089/sb6c3o02du.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<p>第二次while循环后的结果是entry2节点被转移到新表下标是7的链表中，如下图：</p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1113089/c0ornk4ywa.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1113089/c0ornk4ywa.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<p>第三次while循环时，执行完 Entry next = e.next; 后，e指向的是enty3，next指向的是null；当执行完int i = indexFor(e.hash, newCapacity);后，i的值就是e（entry3）在新表中计算出来的下标（这里假设i=2）；当执行完e.next = newTable[i];后，entry3的next就指向newTable[2]，也就是entry1（这一步是重点，会导致在同一条链中新节点总会插入到链表头）；当执行完newTable[i] = e;后，entry3已经插入到新表数组下标是2的链表头部，如下图；当执行完e = next;，e的值为null，结束本次while循环。</p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1113089/4kqtf8e1nb.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1113089/4kqtf8e1nb.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<p>下图是第二次for循环执行后的结果，entry4插入到新表下标为2的链表头部：</p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1113089/vvnq7cd24s.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1113089/vvnq7cd24s.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;　　　　　　<span class="comment">//根据key及其hash值查询node节点，如果存在，则返回该节点的value值。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;　　　　　　　　　　　　　　　　  <span class="comment">//根据key搜索节点的方法。记住判断key相等的条件：hash值相同 并且 符合equals方法。</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;　　　　　　　　　<span class="comment">//根据输入的hash值，可以直接计算出对应的下标（n - 1）&amp; hash，缩小查询范围，如果存在结果，则必定在table的这个位置上。</span></span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))　　　 <span class="comment">//判断第一个存在的节点的key是否和查询的key相等。如果相等，直接返回该节点。</span></span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;　　　　　　　　　　　　　　　　　　　　　　 <span class="comment">//遍历该链表/红黑树直到next为null。</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)　　　　　　　<span class="comment">//当这个table节点上存储的是红黑树结构时，在根节点first上调用getTreeNode方法，在内部遍历红黑树节点，查看是否有匹配的TreeNode。</span></span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;　　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//当这个table节点上存储的是链表结构时，用跟第11行同样的方式去判断key是否相同。</span></span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);　　　　　　　　　　　　　　　　　　  　 <span class="comment">//如果key不同，一直遍历下去直到链表尽头，e.next == null。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>从 HashMap 中 中 get 元素时，首先计算 key 的 hashCode ，找到数组中对过 应位置的某一元素，然后通过 key 的 的 equals 方法在对应位置的链表中找到需要的元素。</strong></p>
<p><strong>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，个 当需要存储一个 Entry 对象时，会根据 hash 算法来决定其在数组中的存储位置，在根据equals 方法决定其在该数组位置上的链表中的存储位置；当需要取出一个 Entry 时，也会根据 hash 算法找到其在数组中的存储位置，再根据 equals 方法从该位置上的链表中取出该 Entry。</strong></p>
<h2 id="HashMap-的-的-resize"><a href="#HashMap-的-的-resize" class="headerlink" title="HashMap 的 的 resize"></a>HashMap 的 的 resize</h2><p>当 当 HashMap 中的元素越来越多的时候，hash 冲突的几率也就越来越高，因为数组的对长度是固定的。所以为了提高查询的效率，就要对 HashMap 的数组进行扩容，数组扩容在 这个操作也会出现在 ArrayList 中，这是一个常用的操作，而在 HashMap 数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，是 这就是 resize 。</p>
<p>那么 HashMap 什么时候进行扩容呢？当 HashMap 中的元素个数超过数组大小loadFactor 时，就会进行数组扩容，loadFactor 的默认值为 0.75 ，这是一个折中的取值。为 也就是说，默认情况下，数组大小为 16 ，那么当 HashMap 中元素个数超过 160.75=12的时候，就把数组的大小扩展为 216=32 ，即扩大一倍，然后重新计算个元素在数组中知 的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知 HashMap 中元素的个高 数，那么预设元素的个数能够有效的提高 HashMap 的性能。</p>
<h2 id="HashMap-的性能参数"><a href="#HashMap-的性能参数" class="headerlink" title="HashMap 的性能参数"></a>HashMap 的性能参数</h2><p>HashMap 包含如下几个构造器：</p>
<ol>
<li>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。</li>
<li>HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。</li>
<li>HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</li>
<li>HashMap 的基础构造器 HashMap(int initialCapacity, float loadFactor)带有两个参数，它们是初始容量 initialCapacity 和加载因子 loadFactor。</li>
<li>initialCapacity：HashMap 的最大容量，即为底层数组的长度。</li>
<li>loadFactor：负载因子 loadFactor 定义为：散列表的实际元素数目(n)/ 散列表的容量(m)。</li>
<li>负载因子衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，查找一个元素的平均时间是 O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。</li>
</ol>
<p>HashMap 的实现中，通过 threshold 字段来判断 HashMap 的最大容量：<br><code>threshold = (int)(capacity * loadFactor);</code></p>
<p>结合负载因子的定义公式可知，threshold 就是在此 loadFactor 和 capacity 对应下允许的最大元素数目，超过这个数目就重新 resize，以降低实际的负载因子。默认的的负载因子0.75是对空间和时间效率的一个平衡选择。当容量超出此最大容量时， resize后的HashMap容量是容量的两倍：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">resize(<span class="number">2</span> * table.length);</span><br></pre></td></tr></table></figure>

<h2 id="Fail-Fast-机制"><a href="#Fail-Fast-机制" class="headerlink" title="Fail-Fast 机制"></a>Fail-Fast 机制</h2><p><strong>我们知道 java.util.HashMap 不是线程安全的，因此如果在使用迭代器的过程中有其了 他线程修改了 map ，那么将抛出 ConcurrentModificationException ，这就是所谓 fail-fast策略。</strong></p>
<p>这一策略在源码中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对HashMap 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashIterator() &#123;</span><br><span class="line">	expectedModCount = modCount;</span><br><span class="line">	<span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">	Entry[] t = table;</span><br><span class="line">	<span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">		;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在迭代过程中，判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 Map：注意到 modCount 声明为 volatile，保证线程之间修改的可见性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">		 <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">		 &#125;</span><br></pre></td></tr></table></figure>

<p><strong>在 HashMap 的 API 中指出：</strong></p>
<ol>
<li>由所有 HashMap 类的“collection 视图方法”所返回的迭代器都是快速失败的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 remove 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就会完全失败，而不冒在将来不确定的时间发生任意不确定行为的风险。</li>
<li>注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。</li>
</ol>
<p><strong>部分转载于<a href="https://cloud.tencent.com/developer/user/1113089" target="_blank" rel="noopener">DannyHoo</a></strong></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello GitHub</title>
    <url>/2019/06/01/Hello-GitHub/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="文章不能被校验,不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,这里需要密码" /><label>您好,这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="1b07bbb827c46a65d607270745b3ccc0cd9f1e3236247d2b814c069e25299740">1891c2f55963eb33cec4959065e0d19d624dfa841e2adaa6df565fe7a09fe6be5b106fde9c94e9910ed853e8cb2888049925589a46044541ede8ab1850974605ae871e22ea22fcf6c79be017c1937370c923f6e5657cd4de03c3db16db63e99208b7a3937071d072cc9ddc03d57c822bfbdd3d61dfd42db63beeedc87031482a5ad8cc99a0eea1bb8b343de1d70dc9925c6d3cfd68354d75de6286f4eb3b916cd353ce7331ba003d01a4b0550ef6cde3f5e3711dc23bfe3d34822db6610e22411d2d523eb8da740fbfbb3ffc7cb2a174e3597850b71e37016d60d066bf9862ef3053f87eed767ead75c988f1767442fa42a749b948309859569169821e730854b0ff6df78dba7a1259bb83da4273d4d20a9719cb7ff942f5c3236b018fbc459159a005d6375cfa4c43586e3a5d9d2a1158c1445ca899a261a42f7d3d310e7aaf21264d1ffd1b7e331e2f79f6e39db71c51c026c214e9655f41ea26db8da2495101f0e0bdad353dddfae2f9c1b47c3dbdc4bf82065f52f8544fc1542664585208ac4985b9a4735acb33d76573571c8b2c55a9949c11adf0fcf175449bb1b161924447c267ef66fe99d3d4aff942addc5a31f4331017b919f20694e9119c9a62d4045526b36b81344d23334a5bb260861d8c240d2a46740c5feabe4f4552a9fd0239895f689b060985456c8a7efbf5d2fc233f2a5cabcc34fa0a6a15f835e70947df20d935228ab34dbcc5f84e303c67d4623b63974ea0ee155fe3e6aba123bb2cdb9a54a0071a8da3785456db8ec7077ccaba7d503e4e8569ddeec194aa37b89ef1b137ad8e77df0d43e13da518c4f08876dbb3a8e7d9e2620e008bd54f630fa32ed26a2fbcfb166cdc8374e4f416082dcedd3a7cec696eb6171408823dc640f3b897d56ef052472b555990ba377dcf94e1ceea7a189ec349d0999c569167a6c867d9a7dab58565a73df9bd1d0a07e692811f3f0eb59ca88cc1b5144f720b266f8af88609fb7b203d46ea030ea9f513f314dbdb86fe7841b05106458539bac2de37b0f3b05fdfb09495825b1dc09deb85c3cce7e0a38e0a88b251db9f256927ce84f6e53c171368bc0dc7f630fd2ee5673255e72007eb7d2289b0e1a388417183706884a88b95d76ffbc100d965b52aaa92ba7953bd47c4964f8bf5d1442e16b4beb472e24adf9f983fd1d84a209c25dcdad3439d6da1f7fddf09a3e51f02b5459806353873c762950e30317ba9b06ff9c385b0c8c7a97c160bc877b2ce3e7cef2d502d40bb8960c08cda88695755b74e1947caec2e5ded4bf014331b2786a1bb32c9a7d1b5f62d46a059854632083cfc32c1673a43e7f0263a12ede6bac2ffa1d4339fbc05226f7fc58c0758535430113580dde569ad4e871ae0296dd2efd158b14bc15b8681d31c4df028fd2fd1df9ef2fc9341adb96eecea202f3cf60817457631883a4216a02631cdeded7f30031807053a9a4f8495317ce2f7630d0907f5416f3287027759f931e67976422b515f362de5619a9adea4128bc6cc12c90469d36d71fe3a0348d1174e2c7117dcb77baab32980f93f753d81c010580114311ebea2303297f076bb1aa897738b1036f2b5dcf8c5ff11f8b4c006395fba0d43d6b0573071f1942a23d4145bd1a85456bc765119afb0daa99967c8f1055356d8b14cebd7c09442282e370c4138833b305e2a5fe044294fcc0d6d41254dc54e22dec3f46ea422452b168ce83827981e04d463f026659de01a60fa3b6f85f4362d38c562d32ecf2112a0938453bdef5cb00b93a2ca255ea4d69f1265eeceaec4440cc97f565322a6ba66869689ea0a307912cb9054cf860bddbd242fa8e9689a1c9ad139826054fe8162d7b10509b863e4fb6bb473eeefbb25d2b1c45479892539cec3adb892b9528eb1cd7d5a490fd557c4ecf613005bb0505a0a1729d2e6cb5b36cf210af91e96347d4987806921520e1cd7b0f9ecfa3d01b29270d7d939a8f5a3a5115d411d1135f6f9a35b6ce06b0fab141014d505af01cd1798abe951c37b1e86fd953e116f731210b8bc0315893455e04c87fff96a16ae5b1405f0edeb1e0b544cc2d2ff4982b0e7e6436fadef221c3d0175e92339733c9e1115bafede874b0981af6558bf783d760529c34c5ca1bf8bebdc548cbff0d785c6f94191509fdd7dbcc750af9d9deb0b94c683f6215932b47cd636a35571fd63971a9d906bd7d26bee8c7df86925dd97d70bcccaf33ce523830eb36b1bda2e20dca895bc026d2d47217b40ecaa036b2a063b34b80c48457294165a8fbab7868ae3dc20f8a3d6f0319daa1b8640d41b451f7ba075d3bdbc8a4af1086ebb84092de557fe982932fe80dd20c0eb9201c8c408fff3b2509b61d5743d786ae8acfb9764202e7e1f0fc0a4452324d7baefed545a5c7b87718b513989c6ee162ebd60beb96dc1bf17f475b74733c302843b1e4c7d8904bcca0f09da44f8e39ad768c24780c74a99c466605ecad878ca181537242473750fa10c944f76f75842c003efa186f6de88f91fefb7e5835d8959526a3e638820f95deec1c3186d0ffd66b6c52467c10c0582ad68059bd8e8461066a2142e95337dc12774bbbb6cc74351d4914667aa6b43b403ebc36c733a113c8a7c92b5e4f1609ed9c67fcb852e8c74bcd553a09137f79d036fd8f46cfa5ca26a0240cf8d5a5cf722fc676996dc3e475bc85a858242a6728137716569748b555c9fcdce27ce1f1f8f15c861d4bba6e67bb017aa1539d19b059844b705c2bbf09718c35b4b0993c44a69091e0990f6eab06910df7213715e5f68</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>In Satoshi We Trust!</title>
    <url>/2019/08/20/In-Satoshi-We-Trust/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>文章转载来自<a href="https://github.com/Time02/SatoshiTimeLine" target="_blank" rel="noopener">SatoshiTimeLine</a>，我的态度：False</p>
</blockquote>
<a id="more"></a>

<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><code>CSW</code> 代指 <a href="https://en.wikipedia.org/wiki/Craig_Steven_Wright" target="_blank" rel="noopener">Craig Steven Wright(Craig S Wright)</a>.</p>
<p><code>DK</code> 指代 <a href="https://en.wikipedia.org/wiki/Dave_Kleiman" target="_blank" rel="noopener">Dave Kleiman</a> 计算机取证专家</p>
<p><code>DR</code> 指代 <a href="https://en.wikipedia.org/wiki/David_Rees_(mathematician)" target="_blank" rel="noopener">David Rees</a> 是埃克塞特大学的纯数学教授</p>
<p><code>HAL</code> 指代 <a href="https://en.wikipedia.org/wiki/Hal_Finney_(computer_scientist)" target="_blank" rel="noopener">Hal Finney</a> 比特币早期贡献者</p>
<p><code>Gavin Andresen</code> 比特币软件主要开发者，中本聪退隐后把开发权交给 <a href="https://en.wikipedia.org/wiki/Gavin_Andresen" target="_blank" rel="noopener">Gavin Andresen</a></p>
<p><code>Jon Matonis</code> 是比特币基金会的董事和创始人之一</p>
<p><code>Timothy C. May</code> 是Cypherpunks邮件列表的联合创始人</p>
<p><code>ATO</code> 指澳大利亚税务局</p>
<p><code>BlackNet</code> 是一个实验性的“信息市场”，它允许各种信息的完全匿名的双向信息交换</p>
<p><code>MetaNet</code> 脱胎于 BlackNet</p>
<h1 id="～2003"><a href="#～2003" class="headerlink" title="～2003"></a>～2003</h1><p><strong><code>1985-XX-XX</code></strong> CSW 1985年开始在 KMart 从事IT工作，随后加入澳大利亚证券交易所（ASX）<a href="https://www.computerworld.com.au/article/print/188871/aussie_achieves_world_first_audit_certification/" target="_blank" rel="noopener">来源一</a>，[CSW蔑视法庭案件](<a href="http://www.austlii.edu.au/cgi-bin/sinodisp/au/cases/nsw/NSWCA/2005/368.html?stem=0&amp;synonyms=0&amp;query=&quot;craig" target="_blank" rel="noopener">http://www.austlii.edu.au/cgi-bin/sinodisp/au/cases/nsw/NSWCA/2005/368.html?stem=0&amp;synonyms=0&amp;query=&quot;craig</a> wright”)</p>
<p><strong><code>1989-XX-XX</code></strong> CSW 开始昆士兰大学了 B.Eng/BSci 双学位 <a href="https://web.archive.org/web/20151208225303/http://gse-compliance.blogspot.com/2008_03_02_archive.html" target="_blank" rel="noopener">来源</a></p>
<p><strong><code>1992-XX-XX</code></strong> CSW 由于得了癌症退出了昆士兰大学。<a href="https://web.archive.org/web/20151208225303/http://gse-compliance.blogspot.com/2008_03_02_archive.html" target="_blank" rel="noopener">来源一</a> ，<a href="https://medium.com/@craig_10243/the-fury-fb603e344d20" target="_blank" rel="noopener">接受了癌症晚期治疗，失去了当时的学位</a></p>
<p><strong><code>1993-11-16</code></strong> Timothy C. May 有记录的 BlackNet 首次出现</p>
<ul>
<li><a href="https://groups.csail.mit.edu/mac/classes/6.805/articles/crypto/cypherpunks/may-virtual-comm.html" target="_blank" rel="noopener">Crypto Anarchy and Virtual Communities</a></li>
<li><a href="https://www.alamut.com/subj/ideologies/manifestos/cryptoanarchist.html" target="_blank" rel="noopener">目前最早记录</a></li>
<li><a href="https://groups.csail.mit.edu/mac/classes/6.805/articles/crypto/cypherpunks/blacknet.txt" target="_blank" rel="noopener">BlackNet 最早定义 上传时间：1995-10-13</a></li>
</ul>
<p><strong><code>1994-12-XX</code></strong> Timothy C. May 发表文章《加密无政府状态和虚拟社区》( <a href="https://groups.csail.mit.edu/mac/classes/6.805/articles/crypto/cypherpunks/may-virtual-comm.html" target="_blank" rel="noopener">Crypto Anarchy and Virtual Communities </a>)提到了 BlackNet</p>
<blockquote>
<p>BlackNet是一个实验性的“信息市场”，它允许各种信息的完全匿名的双向信息交换。据报道，美国当局已对此进行了调查，因为它存在于国防部研究实验室的网络中。</p>
</blockquote>
<p><strong><code>1996-09-17</code></strong> CSW 和阿桑奇早就政见不和 (<a href="https://groups.csail.mit.edu/mac/classes/6.805/articles/crypto/cypherpunks/may-virtual-comm.html" target="_blank" rel="noopener">链接1</a>，<a href="http://cypherpunks.venona.com/date/1996/09/msg01513.html" target="_blank" rel="noopener">链接2</a>)</p>
<blockquote>
<p>CSW 那时候和 Timothy C. May 在邮件列表有过交流，应该知道了 BlackNet</p>
</blockquote>
<p><strong><code>1997-03-04</code></strong> Timothy C. May 文章《无法追踪的数字现金，信息市场和BlackNet》(<a href="http://osaka.law.miami.edu/~froomkin/articles/tcmay.htm" target="_blank" rel="noopener">Untraceable Digital Cash, Information Markets, and BlackNet </a>)</p>
<p><strong><code>1997-03-28</code></strong> Adam Back 发明Hashcash <a href="http://www.hashcash.org/papers/" target="_blank" rel="noopener">来源</a></p>
<p><strong><code>1997-04-XX</code></strong> CSW 开始在澳洲证券交易所工作 <a href="https://archive.vn/Q66Gl#selection-1313.0-1313.17" target="_blank" rel="noopener">来源</a></p>
<p><strong><code>1997-11-XX</code></strong> CSW 创办 DeMorgan 公司担任常务董事(Managing Director)</p>
<blockquote>
<p>成为澳大利亚前150家公司的首批IT安全服务提供商之一，专注于托管安全和安全系统设计，专注于金融服务，银行和技术市场。</p>
</blockquote>
<p><strong><code>1998-05-XX</code></strong> CSW 离开 澳洲证券交易所 <a href="https://archive.vn/Q66Gl#selection-1313.0-1313.17" target="_blank" rel="noopener">来源</a></p>
<p><strong><code>1998-11-XX</code></strong> Wei Dai 发布 <a href="http://www.weidai.com/bmoney.txt" target="_blank" rel="noopener">b-money</a></p>
<p><strong><code>1998-XX-XX</code></strong> CSW 在1998-2003获得神学博士-比较宗教和古典研究 <a href="https://archive.vn/Q66Gl#selection-9947.0-9950.0" target="_blank" rel="noopener">待印证</a></p>
<p><strong><code>1999-XX-XX</code></strong> CSW 设计架构了世界上第一个在线赌场Lasseter’s Online 上线</p>
<blockquote>
<p>世界上第一个获得政府监管和许可的在线赌场.CSW 任职信息系统经理。<a href="http://edition.cnn.com/2001/WORLD/asiapcf/auspac/06/29/aust.gaming/index.html" target="_blank" rel="noopener">在2001年就拥有160,000名国际客户</a></p>
</blockquote>
<ul>
<li><a href="https://www.theaustralian.com.au/business/technology/hunted-must-become-hunter-to-combat-cyber-crime/news-story/5e4ec0b09d8121f5431cc6b0c84db5ac?nk=906956441decfcc17c48d87337856b35-1547103254" target="_blank" rel="noopener">来源一</a></li>
<li><a href="http://www.sans.org/instructors/craig-wright" target="_blank" rel="noopener">来源二</a></li>
<li><a href="https://web.archive.org/web/20040715041957/http://www.lasseters.com.au:80/" target="_blank" rel="noopener">04年官网</a></li>
</ul>
<p><strong><code>2000-XX-XX</code></strong> CSW 开始参与了许多博彩业务 <a href="https://medium.com/@craig_10243/the-fury-fb603e344d20" target="_blank" rel="noopener">需印证</a></p>
<p><strong><code>2000-XX-XX</code></strong> CSW 设计并管理了许多保护澳大利亚证券交易所的系统的实施 <a href="https://www.theaustralian.com.au/business/technology/hunted-must-become-hunter-to-combat-cyber-crime/news-story/5e4ec0b09d8121f5431cc6b0c84db5ac?nk=906956441decfcc17c48d87337856b35-1547103254" target="_blank" rel="noopener">需印证</a></p>
<h1 id="2003"><a href="#2003" class="headerlink" title="2003"></a>2003</h1><p><strong><code>2003-XX-XX</code></strong> 2003-2004 CSW 完成了网络与系统管理硕士（MNSA）- IT网络- 查尔斯特大学（CSU）</p>
<blockquote>
<p><a href="https://www.forbes.com/sites/thomasbrewster/2015/12/11/bitcoin-creator-satoshi-craig-wright-lies-hoax/#19b66a676794" target="_blank" rel="noopener">已经被查尔斯特大学向福布斯杂志印证</a></p>
</blockquote>
<p><strong><code>2003-XX-XX</code></strong> DK 和 CSW 在2003年一次在线密码论坛上相遇。两人都对网络安全，数字取证和金钱未来有着长期的兴趣</p>
<ul>
<li>来源：<a href="https://www.coindesk.com/satoshi-craig-wright-sued-10-billion" target="_blank" rel="noopener">DK 亲戚起诉 CSW 案件卷宗</a></li>
</ul>
<p><strong><code>2003-08-00</code></strong> CSW 卸任 DeMorgan 公司的<a href="https://archive.vn/Q66Gl#selection-1313.0-1313.17" target="_blank" rel="noopener">常务董事(Managing Director)</a></p>
<h1 id="2004"><a href="#2004" class="headerlink" title="2004"></a>2004</h1><p><strong><code>2004-XX-XX</code></strong> 2004-2006，CSW 获得了管理硕士（MMgt）- 管理，财务 - 查尔斯特大学，<a href="https://www.forbes.com/sites/thomasbrewster/2015/12/11/bitcoin-creator-satoshi-craig-wright-lies-hoax/#19b66a676794" target="_blank" rel="noopener">已经被查尔斯特大学向福布斯杂志印证</a></p>
<p><strong><code>2004-08-15</code></strong> HAL 发布了rpow，<a href="https://web.archive.org/web/20041202180250/http://rpow.net:80/" target="_blank" rel="noopener">可重复使用的工作证明</a></p>
<p><strong><code>2004-10-XX</code></strong> 2004-10至2009-01 在会计师事务所BDO Kendalls 任职 Associate Director (Risk Services)。<a href="https://archive.vn/Q66Gl#selection-1153.0-1156.0" target="_blank" rel="noopener">链接1</a>，<a href="https://mp.weixin.qq.com/s/BwfQhoeGqUB58dV7G4y36w" target="_blank" rel="noopener">链接2</a>，2008年出版的<a href="https://link.springer.com/chapter/10.1007/978-3-540-89862-7_21" target="_blank" rel="noopener">《Overwriting Hard Drive Data: The Great Wiping Controversy》</a> 证实了这点。</p>
<h1 id="2005"><a href="#2005" class="headerlink" title="2005"></a>2005</h1><p><strong><code>2005-XX-XX</code></strong> 2005-2008，CSW 获得了信息系统安全硕士（MInfoSysSec），IT安全 - 查尔斯特大学<a href="https://www.forbes.com/sites/thomasbrewster/2015/12/11/bitcoin-creator-satoshi-craig-wright-lies-hoax/#19b66a676794" target="_blank" rel="noopener">已经被查尔斯特大学向福布斯杂志印证</a></p>
<p><strong><code>2005-XX-XX</code></strong> CSW 获得统计硕士（MSTAT），定量统计学 - 纽卡斯尔大学 <a href="https://archive.vn/Q66Gl" target="_blank" rel="noopener">需印证</a></p>
<blockquote>
<p>但是从 CSW 之后的论文中可见其水平</p>
</blockquote>
<p><strong><code>2005-04-25</code></strong> 2005-4-25至2011-07-24 获得了 20+ 认证<a href="https://www.giac.org/certified-professional/craig-wright/107335" target="_blank" rel="noopener">官网可查</a></p>
<p>20+ 认证</p>
<p><strong><code>2005-12-25</code></strong> Ian Grigg 发布了 <a href="http://iang.org/papers/triple_entry.html" target="_blank" rel="noopener">三重记帐法</a></p>
<h1 id="2006"><a href="#2006" class="headerlink" title="2006"></a>2006</h1><p><strong><code>2006-XX-XX</code></strong> 根据澳大利亚公开记录，<a href="https://gizmodo.com/this-australian-says-he-and-his-dead-friend-invented-bi-1746958692" target="_blank" rel="noopener"> CSW 申请个人破产并被拒绝</a></p>
<p><strong><code>2006-03-22</code></strong> CSW 在加密邮件列表讨论：<a href="https://seclists.org/basics/2006/Mar/270" target="_blank" rel="noopener">加密前签名和加密后签名</a></p>
<p><strong><code>2006-05-08</code></strong> CSW 公布其ISFCE管理认证计算机考试（CCE）®认证，<a href="https://web.archive.org/web/20151208225303/http://gse-compliance.blogspot.com/2008_03_02_archive.html" target="_blank" rel="noopener">来源一</a>，<a href="https://web.archive.org/web/20060508061047/http://www.certified-computer-examiner.com:80/list.htm" target="_blank" rel="noopener">来源二</a></p>
<h1 id="2007"><a href="#2007" class="headerlink" title="2007"></a>2007</h1><p><strong><code>2007-XX-XX</code></strong> CSW 和 DK 合著《CHFI官方学习指南（考试312-49）》出版 <a href="https://www.sciencedirect.com/book/9781597491976/the-official-chfi-study-guide-exam-312-49#book-description" target="_blank" rel="noopener">来源一</a>，<a href="https://www.amazon.com/Official-Varsalone-Timothy-Syngress-Paperback/dp/B00E2RGHUE/" target="_blank" rel="noopener">来源二</a></p>
<p><strong><code>2007-XX-XX</code></strong> 中本聪：<a href="https://bitcointalk.org/index.php?topic=195.msg1617#msg1617" target="_blank" rel="noopener">自2007年开始设计比特币</a>，更多的工作是设计而不是编码。</p>
<blockquote>
<p>花了大量时间在研究设计比特币，那时候已经考虑未来探索方向：托管交易，保税合同，第三方仲裁，多方签名等。</p>
</blockquote>
<p><strong><code>2007-06-XX</code></strong> 美国联邦政府对 <a href="https://en.wikipedia.org/wiki/E-gold" target="_blank" rel="noopener">e-Gold</a> 提出指控，e-Gold是一家出售可兑换黄金的数字货币的公司。</p>
<blockquote>
<p>政府认为该项目启用了洗钱和儿童色情制品，因为用户无需提供彻底的身份证明。该公司的所有者因经营无牌转账业务而被判有罪，而首席执行官则被判处数月软禁。</p>
</blockquote>
<p><strong><code>2007-11-28</code></strong> CSW 在bolg中写到正在研究<a href="https://web.archive.org/web/20151208225056/http://gse-compliance.blogspot.com/2007_11_25_archive.html" target="_blank" rel="noopener">一种以货币自动化的方法</a>。待印证。</p>
<p><strong><code>2007-12-XX</code></strong> CSW 加入联合教会（新南威尔士州）信托协会有限公司联合金融服务受托人。(<a href="https://web.archive.org/web/20080719231045/http://www.unitingfinancial.com.au/resource/summer07-08_Lr.pdf" target="_blank" rel="noopener">a trustee of the church</a>)，<a href="https://web.archive.org/web/20151208225303/http://gse-compliance.blogspot.com/2008_03_02_archive.html" target="_blank" rel="noopener">来源二</a></p>
<blockquote>
<p>加入的具体时间应该早于07年</p>
</blockquote>
<h1 id="2008"><a href="#2008" class="headerlink" title="2008"></a>2008</h1><p><strong><code>2008-XX-XX</code></strong> CSW，DK 和 Shyaam Sundhar 合著了一篇论文 <a href="https://www.vidarholen.net/~vidar/overwriting_hard_drive_data.pdf" target="_blank" rel="noopener">《重写硬盘数据》</a> - <a href="https://link.springer.com/chapter/10.1007/978-3-540-89862-7_21" target="_blank" rel="noopener">在ICISS2008上发表并收录于计算机科学 系列讲义(LNCS，第5352卷)</a></p>
<p><strong><code>2008-XX-XX</code></strong> CSW 在 SANS NS 2008拉斯维加斯发表文章《远程确定应用程序版本的高级方法》Advanced Methods to remotely determine Application Versions</p>
<p><strong><code>2008-XX-XX</code></strong> CSW 在BDO的一次 <a href="https://medium.com/@craig_10243/the-story-of-bitcoin-continued-2f1ec78ba38b" target="_blank" rel="noopener">裁员中失去了的工作</a></p>
<blockquote>
<p>此次裁员给了 CSW 一笔补偿费，所以能在2009年继续工作</p>
</blockquote>
<p><strong><code>2008-01-20</code></strong> CSW 在Google的Google DataMiners 2008上发表了演讲 <a href="https://web.archive.org/web/20151208225206/http://gse-compliance.blogspot.com/2008_01_20_archive.html" target="_blank" rel="noopener">使用神经网络提高安全智能</a></p>
<p><strong><code>2008-01-29</code></strong> CSW 写了文章<a href="https://web.archive.org/web/20140602023941/http://gse-compliance.blogspot.com.au/2008_01_27_archive.html" target="_blank" rel="noopener">《What is an “Electronic Contract”》什么是电子合同</a></p>
<p><strong><code>2008-01-30</code></strong> CSW 写了文章<a href="https://web.archive.org/web/20151122210704/http://gse-compliance.blogspot.com/2008/01/trusting-electronically-signed.html" target="_blank" rel="noopener">《Trusting electronically signed documents》信任电子签名文件</a></p>
<p><strong><code>2008-03-05</code></strong> CSW 完成了诺桑比亚大学（英国）的LLM（国际商法) 研究生学位 <a href="https://web.archive.org/web/20151208225303/http://gse-compliance.blogspot.com/2008_03_02_archive.html" target="_blank" rel="noopener">学号：05024288</a></p>
<p><strong><code>2008-03-06</code></strong> CSW 在08年就受到别人的<a href="https://web.archive.org/web/20151123033848/http://gse-compliance.blogspot.com/2008/03/lies-damned-lies-and-statistics-of.html" target="_blank" rel="noopener">诽谤与质疑</a></p>
<p><strong><code>2008-03-12</code></strong> CSW 和 DK 的关于诽谤邮件往来 <a href="https://seclists.org/basics/2008/Mar/144" target="_blank" rel="noopener">主题：法律在互联网上诽谤的困难</a>，<a href="https://seclists.org/basics/2008/Mar/147" target="_blank" rel="noopener">DK 的回复</a></p>
<blockquote>
<p>CSW 使用的邮件：Craig.Wright @bdo.com.au</p>
</blockquote>
<p><strong><code>2008-03-12</code></strong> 15年 gizmodo 泄密事件中 CSW 给 DK 的一封邮件：<a href="https://i.kinja-img.com/gawker-media/image/upload/knlyk7dpjqucpmiojhs8.png" target="_blank" rel="noopener">需要DK帮助他关于 bitcoin 的工作</a></p>
<blockquote>
<p>网友质疑：<a href="https://www.reddit.com/r/Bitcoin/comments/80fzhw/craig_s_wrights_email_to_dave_kleiman_is_provably/" target="_blank" rel="noopener">同一天使用的邮箱：craig.wright@information-defense.com</a></p>
</blockquote>
<p><strong><code>2008-04-04</code></strong> CSW 被 SANS 技术研究所<a href="https://archive.li/h357s" target="_blank" rel="noopener">评为 Security Heroes</a></p>
<p><strong><code>2008-04-17</code></strong> CSW 发表论文：<a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2953929" target="_blank" rel="noopener">互联网中介责任的影响</a></p>
<blockquote>
<p>内容：<a href="https://medium.com/@craig_10243/the-false-lure-of-anonymity-110a35088979" target="_blank" rel="noopener">关于比特币节点合规的研究</a></p>
</blockquote>
<p><strong><code>2008-07-25</code></strong> CSW 著作出版 <a href="https://books.google.com/books?id=RizmpbOHvf4C&dq=Auditing+Unix+and+Linux+Craig+Steven+Wright&hl=zh-CN&source=gbs_navlinks_s" target="_blank" rel="noopener">《IT监管和标准合规手册》</a>，<a href="https://www.bokkilden.no/matematikk-for-oekonomer-og-forretningssystemer/the-it-regulatory-and-standards-compliance-handbook-craig-s-wright/produkt.do?produktId=3028230" target="_blank" rel="noopener">The IT Regulatory and Standards Compliance Handbook</a></p>
<p><strong><code>2008-08-18</code></strong> 中本聪注册 <a href="https://www.whois.com/whois/bitcoin.org" target="_blank" rel="noopener">bitcoin.org</a> 域名</p>
<p><strong><code>2008-08-20</code></strong> 中本聪比特币白皮书的预发布草案 <a href="https://nakamotostudies.org/literature/ecash/" target="_blank" rel="noopener">标题：没有值得信赖的第三方的电子现金</a></p>
<blockquote>
<p>中本聪与 <a href="http://www.weidai.com/" target="_blank" rel="noopener">Wei Dai</a> 的<a href="https://nakamotostudies.org/emails/satoshi-and-wei-dai-correspondence/" target="_blank" rel="noopener">三封邮件</a></p>
</blockquote>
<p><strong><code>2008-10-31</code></strong> 中本聪首次公开发布比特币白皮书 <a href="https://www.mail-archive.com/cryptography@metzdowd.com/msg09959.html" target="_blank" rel="noopener">标题：点对点电子现金系统</a></p>
<p><strong><code>2008-11-01</code></strong> CSW 一篇 <a href="https://web.archive.org/web/20140307084448/http://gse-compliance.blogspot.com.au/2008/11/entropy.html" target="_blank" rel="noopener">博客文章</a> 公布了自己的 PGP 公钥。</p>
<blockquote>
<p>公钥使用 pgpdump 之后显示出与<a href="mailto:satoshin@vistomail.com">satoshin@vistomail.com</a> 有联系，详见<a href="https://github.com/Time02/SatoshiTimeLine#" target="_blank" rel="noopener">2015-12-08</a></p>
</blockquote>
<p><strong><code>2008-11-02</code></strong> 中本聪认为只有矿工才需要运行网络节点。并预测了矿池和矿场的出现。<a href="http://www.metzdowd.com/pipermail/cryptography/2008-November/014815.html" target="_blank" rel="noopener">链接</a></p>
<blockquote>
<p>起初，大多数用户会运行网络节点，但随着网络增长超过某一点，拥有专门硬件的服务器群的专业人士(即后来出现的矿池)运行网络节点。</p>
</blockquote>
<blockquote>
<p>一个服务器农场(即后来出现的矿场)只需要在网络上有一个节点(即矿池)，而网络中的其余部分与该节点连接。</p>
</blockquote>
<p><strong><code>2008-11-09</code></strong> 比特币项目在开源项目社区资源SourceForge.net上注册。</p>
<p><strong><code>2008-11-17</code></strong> 中本聪在加密邮件列表中表示：之前的1年半一直在完善比特币代码 <a href="https://github.com/Time02/SatoshiTimeLine/blob/master" target="_blank" rel="noopener">暂缺</a></p>
<p><strong><code>2008-11-30</code></strong> CSW 完成了查尔斯斯图尔特大学的<a href="https://web.archive.org/web/20151208225230/http://gse-compliance.blogspot.com/2008_11_30_archive.html" target="_blank" rel="noopener">信息系统安全硕士课程</a></p>
<h1 id="2009"><a href="#2009" class="headerlink" title="2009"></a>2009</h1><p><strong><code>2009-XX-XX</code></strong> 2009 - 2010 CSW 获得了 <a href="https://github.com/Time02/SatoshiTimeLine/blob/master" target="_blank" rel="noopener">MSD，系统开发硕士 - 查尔斯特大学</a></p>
<p><strong><code>2009-01-08</code></strong> 中本聪发布<a href="http://www.metzdowd.com/pipermail/cryptography/2009-January/014994.html" target="_blank" rel="noopener">比特币v0.1版本</a>(原链接已经失效)</p>
<blockquote>
<p>HAL 在<a href="https://bitcointalk.org/index.php?topic=68121.0" target="_blank" rel="noopener">bitcointaik论坛</a>中公布了0.1.0版本，<a href="https://satoshi.nakamotoinstitute.org/code/" target="_blank" rel="noopener">s3上的备份</a>，<a href="https://github.com/trottier/original-bitcoin" target="_blank" rel="noopener">github 保存的版本</a></p>
</blockquote>
<blockquote>
<p>2017-09-23 CSW 最早<a href="https://web.archive.org/web/20190216023418/https://twitter.com/ProfFaustus/status/911621111531663361/" target="_blank" rel="noopener">公开表示</a>：<a href="https://github.com/trottier/original-bitcoin/blob/master/src/uibase.cpp" target="_blank" rel="noopener">比特币原始代码</a>中有扑克游戏，其中有 poker(扑克)， deal me out(出牌)， fold(弃牌)， call(跟注)， raise(加注)等术语。</p>
</blockquote>
<p><strong><code>2009-01-10</code></strong> CSW 博客宣称<a href="https://web.archive.org/web/20140602022810/http://gse-compliance.blogspot.com.au/2009_01_04_archive.html" target="_blank" rel="noopener">发布比特币beta版本</a></p>
<ul>
<li>blogspot 这个博客系统是可以修改时间的</li>
<li>存档网站记录：14年有这篇 <a href="https://web.archive.org/web/20140602022810/http://gse-compliance.blogspot.com.au/2009_01_04_archive.html" target="_blank" rel="noopener">文章</a>；15年已经被删除 <a href="https://web.archive.org/web/20151208225252/http://gse-compliance.blogspot.com/2009_01_04_archive.html" target="_blank" rel="noopener">文章</a></li>
<li>CSW 可能把网站文章修改过，<a href="https://web.archive.org/web/20140602023631/http://gse-compliance.blogspot.com.au/2006_01_08_archive.html" target="_blank" rel="noopener">2006-1-8 的这篇文章</a> 在 <a href="https://web.archive.org/web/20151208225252/http://gse-compliance.blogspot.com/2009_01_04_archive.html" target="_blank" rel="noopener">2009-1-8 出现</a></li>
<li>2014年至2015年之间的某个时间，CSW 修改了一篇的2008年<a href="https://web.archive.org/web/20140602022658/http://gse-compliance.blogspot.com.au/2008_08_24_archive.html" target="_blank" rel="noopener">博客文章</a>，添加了<a href="https://web.archive.org/web/20151003011022/http://gse-compliance.blogspot.com.au/2008_08_24_archive.html" target="_blank" rel="noopener">加密货币的词汇</a></li>
</ul>
<p><strong><code>2009-01-12</code></strong> 比特币第一笔交易，中本聪发给 HAL <a href="https://btc.com/00000000d1145790a8694403d4063f323d499e655c83426834d4ce2f8dd4a2ee" target="_blank" rel="noopener">交易TX</a></p>
<p><strong><code>2009-01-29</code></strong> CSW 成立了一家公司：<a href="https://abr.business.gov.au/AbnHistory/View?id=90135141347" target="_blank" rel="noopener">Information Defense Pty Ltd</a></p>
<ul>
<li><a href="https://connectonline.asic.gov.au/RegistrySearch/faces/landing/panelSearch.jspx?searchText=135141347&searchType=OrgAndBusNm&_adf.ctrl-state=cevve81eg_15" target="_blank" rel="noopener">注册地：新南威尔士州2446</a></li>
<li><a href="http://www.ipaustralia.com.au/applicant/information-defense-pty-ltd/trademarks/1284365/" target="_blank" rel="noopener">商标知识产权</a></li>
</ul>
<p><strong><code>2009-02-11</code></strong> 中本聪<a href="http://p2pfoundation.ning.com/profile/SatoshiNakamoto" target="_blank" rel="noopener">注册P2P基金会网站</a></p>
<p><strong><code>2009-08-30</code></strong> 中本聪把比特币代码从 sourceforge 转到 <a href="https://github.com/bitcoin/bitcoin/commit/4405b78d6059e536c36974088a8ed4d9f0f29898" target="_blank" rel="noopener">github</a>，版本为：BitCoin v0.1.5 ALPHA</p>
<p><strong><code>2009-11-19</code></strong> 中本聪注册 <a href="https://bitcointalk.org/index.php?action=profile;u=3" target="_blank" rel="noopener">bitcointalk</a> 论坛</p>
<p><strong><code>2009-11-22</code></strong> 中本聪论坛<a href="https://bitcointalk.org/index.php?topic=5.0" target="_blank" rel="noopener">第一帖</a></p>
<p><strong><code>2009-11-25</code></strong> 中本聪<a href="https://bitcointalk.org/index.php?topic=8.msg34#msg34" target="_blank" rel="noopener">建议每个比特币地址只用一次</a></p>
<p><strong><code>2009-11-26</code></strong> 感恩节 DK 告诉 Ira(DK弟弟)，他正在和一个富有的外国人一起创造“数字货币”，也就是 CSW。<a href="https://www.coindesk.com/satoshi-craig-wright-sued-10-billion" target="_blank" rel="noopener">来源：DK亲戚起诉 CSW 案件卷宗</a></p>
<h1 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h1><p><strong><code>2010-01-XX</code></strong> 2010-1至2015-6 CSW 担任查尔斯特大学讲师，开发并推广数字取证硕士学位<a href="https://www.forbes.com/sites/thomasbrewster/2015/12/11/bitcoin-creator-satoshi-craig-wright-lies-hoax/#19b66a676794" target="_blank" rel="noopener">被查尔斯特大学对福布斯的声明所证实</a>。</p>
<p><strong><code>2010-04-06</code></strong> CSW 的公司De Morgan 搁置破产 <a href="https://www.comcourts.gov.au/file/FEDERAL/P/SYG746/2010/order_list" target="_blank" rel="noopener">Craig Stephen Wright和Anor V De Morgan信息安全系统有限公司(清算中)</a></p>
<p><strong><code>2010-06-XX</code></strong> 2010年中，中本聪将比特币源代码库的控制权转交给了 Gavin Andresen</p>
<p><strong><code>2010-07-27</code></strong> <a href="https://github.com/bitcoin/bitcoin/commits/master?before=b72c787dc8f77dfeeab3774e9d84f03a066ff32e+19476" target="_blank" rel="noopener">中本聪 github 账号作为 bitcoin 项目作者出现</a> ，暂时不清楚最初头像，但在之后的某个时间<a href="https://github.com/satoshinnakamoto" target="_blank" rel="noopener">头像修改为 DK</a>。</p>
<p><strong><code>2010-08-04</code></strong> 中本聪认为<a href="https://bitcointalk.org/index.php?topic=287.msg7524#msg7524" target="_blank" rel="noopener">比特币目前不适用于非常小的微支付</a></p>
<p><strong><code>2010-08-05</code></strong> 中本聪讨论<a href="https://bitcointalk.org/index.php?topic=287.msg7687#msg7687" target="_blank" rel="noopener">了未来小额支付的好处和前景</a></p>
<blockquote>
<p>虽然我不认为比特币现在适用于小额支付，但随着存储空间和带宽成本的持续下降，它最终会成为现实。</p>
</blockquote>
<blockquote>
<p>如果比特币大规模流行起来，那么到那个时候小额支付已经普及了。</p>
</blockquote>
<blockquote>
<p>另一种使它们变得更加实用的方法是，如果我实现了只有客户端的模式，并且网络节点的数量合并成为数量较少的专业服务器群。无论你需要多大规模的小额支付，最终都是可行的。我认为在5到10年内，带宽和存储将变得微不足道。</p>
</blockquote>
<blockquote>
<p>免费交易是很好的，如果人们不滥用它，我们可以保持这种方式。</p>
</blockquote>
<p><strong><code>2010-10-XX</code></strong> CSW 的第一次婚姻于<a href="https://medium.com/@craig_10243/the-story-of-bitcoin-continued-2f1ec78ba38b" target="_blank" rel="noopener">2010年10月结束</a></p>
<p><strong><code>2010-11-30</code></strong> CSW 发表<a href="https://ro.ecu.edu.au/ism/102/" target="_blank" rel="noopener">《开发安全嵌入式软件的经济学》</a>，发表于第8届澳大利亚信息安全管理会议论文集。</p>
<p><strong><code>2010-12-11</code></strong> 维基解密支持比特币捐赠，<a href="https://bitcointalk.org/index.php?topic=2216.msg29280#msg29280" target="_blank" rel="noopener">中本聪发帖：认为不是个好时候</a></p>
<p><strong><code>2010-12-12</code></strong> 中本聪在论坛<a href="https://bitcointalk.org/index.php?topic=2228.msg29479#msg29479" target="_blank" rel="noopener">最后一帖</a></p>
<h1 id="2011"><a href="#2011" class="headerlink" title="2011"></a>2011</h1><p><strong><code>2011-XX-XX</code></strong> 世界级黑客 <a href="https://dankaminsky.com/" target="_blank" rel="noopener">Dan Kaminsky</a> 试图破解比特币代码，<a href="https://www.businessinsider.com/dan-kaminsky-highlights-flaws-bitcoin-2013-4" target="_blank" rel="noopener">但是失败了</a>。</p>
<blockquote>
<p>Kaminsky表示：“他是一位世界级的程序员，对C ++编程语言有着深刻的理解，”他说。“他了解经济学，密码学和点对点网络。有一群人为此工作，或者这个人才是天才”</p>
</blockquote>
<p><strong><code>2011-XX-XX</code></strong> 为了继续 CSW 的研究工作，DK 和 CSW 向一些国家比如哥斯达黎加出售了用于合法赌博的代码。DK 承受了最大的风险，因为赌博在澳大利亚是非法的。<a href="https://mp.weixin.qq.com/s/BwfQhoeGqUB58dV7G4y36w" target="_blank" rel="noopener">链接</a></p>
<p><strong><code>2011-02-14</code></strong> DK 在佛罗里达州成立了<a href="https://www.manta.com/c/mr5pz3q/w-k-info-defense-research-llc" target="_blank" rel="noopener">W&amp;K信息防御研究公司</a>，[注册详情](<a href="http://search.sunbiz.org/Inquiry/CorporationSearch/SearchResultDetail?inquirytype=OfficerRegisteredAgentName&amp;directionType=Initial&amp;searchNameOrder=COINEXCHPTYLTD" target="_blank" rel="noopener">http://search.sunbiz.org/Inquiry/CorporationSearch/SearchResultDetail?inquirytype=OfficerRegisteredAgentName&amp;directionType=Initial&amp;searchNameOrder=COINEXCHPTYLTD</a> L110000199042&amp;aggregateId=flal-l11000019904-dce79b55-176a-4442-93a7-3c8896316aa2&amp;searchTerm=Coin-Exch Pty Ltd&amp;listNameOrder=COINEXCHPTYLTD L110000199042)</p>
<ul>
<li>这个是CSW 和 DK 一起建立的公司，用 DK 注册的，</li>
<li>ATO 与 CSW 澳大利亚公司的代表的会议记录: CSW 与 DK 一起创办了W＆K Info Defense LLC（W＆K）。W&amp;K公司经营比特币挖矿和软件开发/研究业务。</li>
<li>CSW 在09年创办 Information Defense Pty Ltd</li>
<li>来源：<a href="https://www.coindesk.com/satoshi-craig-wright-sued-10-billion" target="_blank" rel="noopener">DK 亲戚起诉 CSW 案件卷宗</a></li>
</ul>
<p><strong><code>2011-04-11</code></strong> CSW 作为贡献者之一的著作<a href="https://www.amazon.com/Official-Guide-CISSP-ISSMP-Press/dp/1420094432" target="_blank" rel="noopener">《官方（ISC）2®ISSMP®CBK®指南》</a>出版</p>
<blockquote>
<p>亚马逊对于CSW 的介绍佐证了他在查尔斯斯图尔特大学的诸多硕士学位和进行数字取证的讲课</p>
</blockquote>
<p><strong><code>2011-04-23</code></strong> 中本聪发给 Mike Hearn 的邮件中表示：“我已经转向做其他事情。比特币就放心交给 Gavin 和大家了。” <a href="https://plan99.net/~mike/satoshi-emails/thread5.html" target="_blank" rel="noopener">链接1</a>，<a href="https://bitcointalk.org/index.php?topic=145850.msg1558053#msg1558053" target="_blank" rel="noopener">链接2</a></p>
<p><strong><code>2011-04-27</code></strong> Gavin Andresen 发帖他将在6月份在美国情报界的新兴技术会议上<a href="https://bitcointalk.org/?topic=6652.0" target="_blank" rel="noopener">向 CIA 发表关于比特币的演讲</a>。具体时间是6月14日在中央情报局总部，兰利弗吉尼亚州。<a href="https://bitcointalk.org/index.php?topic=6652.msg146198#msg146198" target="_blank" rel="noopener">它不向公众开放，会议仅针对美国情报界。</a></p>
<p><strong><code>2011-05-XX</code></strong> 2011-05 至 2014-05 CSW 是查尔斯图尔特大学的兼职学者 <a href="https://www.forbes.com/sites/thomasbrewster/2015/12/11/bitcoin-creator-satoshi-craig-wright-lies-hoax/#19b66a676794" target="_blank" rel="noopener">被查尔斯特大学对福布斯的声明所证实</a></p>
<p><strong><code>2011-06-14</code></strong> CSW 被 <a href="https://web.archive.org/web/20160326175801/http://www.gicsr.org/" target="_blank" rel="noopener">GICSR</a> 任命为亚太区总监，副总裁。<a href="https://www.itmasters.edu.au/wp-content/uploads/2013/03/hunted_must.pdf" target="_blank" rel="noopener">资料1</a>，<a href="https://www.theaustralian.com.au/business/technology/hunted-must-become-hunter-to-combat-cyber-crime/news-story/5e4ec0b09d8121f5431cc6b0c84db5ac" target="_blank" rel="noopener">资料2</a>，<a href="https://archive.vn/Q66Gl#selection-2231.0-2231.9" target="_blank" rel="noopener">资料3</a></p>
<blockquote>
<p>GICSR 是由私营部门领导的非营利性全球网络安全+研究所</p>
</blockquote>
<p><strong><code>2011-06-20</code></strong> Gavin Andresen 公布了 2011-06-14 在 CIA(美国中央情报局)发表的<a href="https://bitcointalk.org/index.php?topic=6652.msg251755#msg251755" target="_blank" rel="noopener">演讲的PDF</a>。</p>
<p><strong><code>2011-08-09</code></strong> CSW 在 <a href="https://github.com/Time02/SatoshiTimeLine/blob/master/theconversation.com" target="_blank" rel="noopener">The Conversation</a> 上发表文章：<a href="https://theconversation.com/lulzsec-anonymous-freedom-fighters-or-the-new-face-of-evil-2605#comment_6159" target="_blank" rel="noopener">LulzSec, Anonymous … freedom fighters or the new face of evil?</a>。这是 CSW 公开提到比特币最早记录。</p>
<blockquote>
<p>在此文章的评论中，CSW 列举了许多 PayPal 的替代品，提到了几次比特币：bit coins，digital coin.</p>
</blockquote>
<p><strong><code>2011-12-05</code></strong> CSW 发表于第9届澳大利亚信息安全管理会议论文集<a href="https://ro.ecu.edu.au/ism/133/" target="_blank" rel="noopener">《Using checklists to make better best》</a></p>
<h1 id="2012"><a href="#2012" class="headerlink" title="2012"></a>2012</h1><p><strong><code>2012-XX-XX</code></strong> CSW 开始为比特币节点做微服务架构。当时是叫 iDaemon，现在是 Terranode。<a href="https://www.yours.org/content/a-call-to-arms-cac97203528f" target="_blank" rel="noopener">链接1</a>，<a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3065857" target="_blank" rel="noopener">2017-11-06 的论文中使用过 iDaemon</a></p>
<p><strong><code>2012-10-11</code></strong> CSW 在英国注册一家公司：<a href="https://beta.companieshouse.gov.uk/company/08248988/filing-history" target="_blank" rel="noopener">C01N LTD</a></p>
<blockquote>
<p>2014年4月10日 任命 Uyen T Nguyen女士为董事</p>
<p>2014年4月14日 任命 David Kleiman先生为董事</p>
<p>2014年4月15日 终止任命 David Kleiman为董事</p>
<p>但是 DK 已经在13年去世！！</p>
</blockquote>
<p><strong><code>2012-11-03</code></strong> CSW <a href="https://ro.ecu.edu.au/ism/149/" target="_blank" rel="noopener">《领土行为和僵尸网络的经济学》</a>收录于第10届澳大利亚信息安全管理会议论文集</p>
<h1 id="2013"><a href="#2013" class="headerlink" title="2013"></a>2013</h1><p><strong><code>2013-04-XX</code></strong> 2013年4月初，CSW 与 DK 吵架，当时都缺钱，大量比特币并不好出售，<a href="https://medium.com/@craig_10243/the-fury-fb603e344d20" target="_blank" rel="noopener">这是 CSW 最后一次与 DK 联系</a></p>
<p><strong><code>2013-04-26</code></strong> DK 被发现去世了 <a href="https://assets.documentcloud.org/documents/2644004/INVESTIGATIVE-REPORT-13-0467.txt" target="_blank" rel="noopener">警方勘查报告</a></p>
<p><strong><code>2013-04-29</code></strong> CSW 发布了<a href="https://web.archive.org/web/20130509011754/https://www.youtube.com/watch?v=pGmZ7v3TB2Y" target="_blank" rel="noopener">缅怀 DK 视频</a>。</p>
<p><strong><code>2013-05-30</code></strong> CSW 注册了 <a href="https://domainbigdata.com/nj/gUU3kOJtEevLy9DnpdYUgw" target="_blank" rel="noopener">hotwirepe.com</a> 域名</p>
<p><strong><code>2013-06-XX</code></strong> CSW 创办了一家创业公司 Hotwire, 用于建立 “Denariuz Bank”，第一家比特币银行</p>
<ul>
<li>CSW 称 Denariuz将从其支持者那里得到超过<a href="https://www.businessinsider.com.au/aussie-technologists-are-opening-the-worlds-first-bitcoin-based-bank-this-year-2014-2" target="_blank" rel="noopener">10万比特币用于银行资金池</a></li>
<li>Hotwire的失败归因于2014年5月<a href="https://www.businessinsider.com.au/revealed-the-ato-hit-suspected-bitcoin-creator-craig-steven-wrights-company-with-a-1-7-million-penalty-2015-12" target="_blank" rel="noopener">Mt Gox比特币交易所的解体</a></li>
<li><a href="https://web.archive.org/web/20160310185210/http://www.mcgrathnicol.com/app/uploads/D14-140526-Hotwire439AReport-BFK.pdf" target="_blank" rel="noopener">2014 清算报告</a>：McGrath Nicol的管理人员写道：“ATO对索赔金额的有效性提出异议，并对Hotwire征收1,716,608.00美元的罚款</li>
</ul>
<p><strong><code>2013-08-25</code></strong> CSW 创办了<a href="https://web.archive.org/web/20150201063244/http://www.interconnectedresearch.com/" target="_blank" rel="noopener">Interconnected Research 公司</a>，<a href="http://www.abn.business.gov.au/ABN/View?abn=51165472097" target="_blank" rel="noopener">链接2</a>，<a href="https://connectonline.asic.gov.au/RegistrySearch/faces/landing/panelSearch.jspx?searchText=165472097&searchType=OrgAndBusNm&_adf.ctrl-state=1d97elualp_15" target="_blank" rel="noopener">链接3</a></p>
<blockquote>
<p>是一家专注于加密货币的研发机构。我们为加密货币相关产品提供指导，保护知识产权，为初创公司提供专利和商业化方面的帮助。 猜测：CSW 的这个想法没有实现，2017年在 nchain 重新启动</p>
</blockquote>
<p><strong><code>2013-10-04</code></strong> CSW 以 Hotwire 公司的名义注册 <a href="https://bitcointalk.org/index.php?topic=1457039.msg14746453#msg14746453" target="_blank" rel="noopener">B1TC01N.ORG 域名 </a>，后来转移到 C01N 公司名下</p>
<p><strong><code>2013-10-04</code></strong> CSW 注册 b1tc01n.co 和 bitc01n.co 域名 <a href="https://domainbigdata.com/nj/gUU3kOJtEevLy9DnpdYUgw" target="_blank" rel="noopener">链接</a></p>
<h1 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h1><p><strong><code>2014-02-12</code></strong> CSW 在悉尼参加讨论比特币了 ，<a href="https://www.youtube.com/watch?v=1PtAqNpEm7w&t=0s&index=6&list=PLT6LGqh34WMBUFn-NBpiT1UQpd-xnpDkc" target="_blank" rel="noopener">Bitcoin IS at Sydney’s Informa Conference 2014</a></p>
<p><strong><code>2014-02-12</code></strong> CSW 计划<a href="https://www.businessinsider.com.au/aussie-technologists-are-opening-the-worlds-first-bitcoin-based-bank-this-year-2014-2" target="_blank" rel="noopener">今年开设第一家基于比特币的银行</a>，但是当时澳大利亚ATO尚未澄清它将如何处理与比特币相关的商品及服务税</p>
<p><strong><code>2014-03-07</code></strong> 中本聪在 p2pfoundation 论坛回帖：<a href="http://p2pfoundation.ning.com/forum/topics/bitcoin-open-source?commentId=2003008%3AComment%3A52186" target="_blank" rel="noopener">“I am not Dorian Nakamoto.”</a></p>
<p><strong><code>2014-06-2</code></strong> CCTV NEWS <a href="https://www.youtube.com/watch?v=fAyWT3nljBI" target="_blank" rel="noopener">采访查尔斯特大学研究员 CSW 关于黑客大战</a></p>
<p><strong><code>2014-07-09</code></strong> CSW 在比特币墨尔本大会上接受采访<a href="https://www.youtube.com/watch?v=gYskRI0ynAM" target="_blank" rel="noopener">视频1</a>，<a href="https://www.youtube.com/watch?v=HwopmmsNeCs" target="_blank" rel="noopener">视频2</a>，<a href="https://www.youtube.com/watch?v=N1yNQSW8jGA" target="_blank" rel="noopener">视频3</a>，<a href="https://v.youku.com/v_show/id_XMzk1MTU0OTMwOA==.html?spm=a2hzp.8244740.0.0" target="_blank" rel="noopener">中译</a>。CSW 视频中描述的即为18年宣布的 MetaNet</p>
<p><strong><code>2014-08-20</code></strong> ATO裁定，对于资本利得税而言，<a href="https://www.abc.net.au/news/2014-08-20/bitcoin-will-not-be-taxed-as-money-ato-says/5683974" target="_blank" rel="noopener">加密货币应被视为资产而非货币</a>。所以 CSW 无法继续在澳大利亚建造比特币商业帝国。</p>
<p><strong><code>2014-08-26</code></strong> CSW 在比特币博览会的采访<a href="https://www.youtube.com/watch?v=4GuqlQvFYJo&feature=youtu.be" target="_blank" rel="noopener">视频</a>，谈了 BlackNet（也就是后来的 MetaNet）</p>
<p><strong><code>2014-09-XX</code></strong> CSW 开始任 <a href="https://archive.vn/Q66Gl" target="_blank" rel="noopener">DeMorgan 的CEO</a></p>
<ul>
<li>自该集团首家公司成立以来的六年中，我们已经完成了几个基于比特币的研究项目，这些项目已经持续，现在已经准备好开始商业化。</li>
<li>该公司运行的两个HPC系统(超级计算机)以及开展的AI和机器学习活动</li>
<li>视频：<a href="https://gizmodo.com/this-australian-says-he-and-his-dead-friend-invented-bi-1746958692" target="_blank" rel="noopener">Gizmodo记者访问DeMorgan的办公室</a></li>
<li>DeMorgan 旗下 控制 Cloudcroft</li>
<li>它控制着世界500强中的<a href="https://www.forbes.com/sites/thomasbrewster/2015/12/11/bitcoin-creator-satoshi-craig-wright-lies-hoax/#19b66a676794" target="_blank" rel="noopener">两台超级计算机</a> - 排名世界第15位的 <a href="https://web.archive.org/web/20150717182621/http://top500.org/system/178468" target="_blank" rel="noopener">CO1N</a> 和排名第327位的<a href="https://web.archive.org/web/20170704110353/https://www.top500.org/system/178514" target="_blank" rel="noopener">Sukuriputo Okane</a>。</li>
<li>CSW 的<a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3065857" target="_blank" rel="noopener">《调查使用比特币区块链作为世界互联网商务的主要基础设施的潜力》</a>论文中介绍了这台26W+核心的超算</li>
<li>这个页面中显示2台超算属于 Tulip Trading(郁金香交易)</li>
<li>这两台超算是 SGI 生产，但是<a href="https://www.zdnet.com/article/sgi-denies-links-with-alleged-bitcoin-founder-craig-wright/#ftag=RSSbaffb68" target="_blank" rel="noopener">SGI否认是Cloudcroft从SGI购买</a>，CSW <a href="https://www.economist.com/briefing/2016/05/02/craig-steven-wright-claims-to-be-satoshi-nakamoto-is-he" target="_blank" rel="noopener">解释主要原因</a>是他在 2015-05-29 将 SGI 的设备与竞争对手Supermicro的设备结合在一起。次要的是保密，因为这台机器所被用来测试他关于如何改进比特币的想法。<a href="https://github.com/Time02/SatoshiTimeLine/blob/master" target="_blank" rel="noopener">链接2暂缺</a></li>
<li>CSW 在15年使用超算 发过 ITMASTER 的免费课程 <a href="https://www.youtube.com/watch?v=cfoFFyypJxs" target="_blank" rel="noopener">Free Short Course: Programming on Supercomputers</a></li>
</ul>
<p><strong><code>2014-09-08</code></strong> 中本聪 <a href="mailto:satoshin@gmx.com">satoshin@gmx.com</a> 邮箱被自称黑客的人攻破 <a href="https://web.archive.org/web/20180623222236/https://motherboard.vice.com/en_us/article/jp5dk8/the-satoshi-nakamoto-email-hacker-says-hes-negotiating-with-the-bitcoin-founder" target="_blank" rel="noopener">链接1</a>，<a href="https://bitcointalk.org/index.php?topic=775174.0" target="_blank" rel="noopener">链接2</a>，<a href="https://web.archive.org/web/20180601113854/https://pastebin.com/7gbPi8Qr" target="_blank" rel="noopener">链接3</a>，<a href="https://mineforeman.com/2014/09/09/warning-do-not-download-bitcoin-from-sourceforge/" target="_blank" rel="noopener">链接4</a></p>
<ul>
<li>黑客在 p2pfoundation 论坛提醒中本聪<a href="https://web.archive.org/web/20180628142943/http://p2pfoundation.ning.com:80/forum/topics/bitcoin-open-source?xg_source=activity&id=2003008:Topic:9402&page=4" target="_blank" rel="noopener">信息泄漏</a>。</li>
<li>2018-06-28 之后的某个时间这条回复被删除</li>
</ul>
<p><strong><code>2014-10-17</code></strong> CSW 注册了 <a href="https://domainbigdata.com/nj/gUU3kOJtEevLy9DnpdYUgw" target="_blank" rel="noopener">tuliptrading.net</a> 域名</p>
<p><strong><code>2014-11-XX</code></strong> CSW 的公司 Hotwire 进行<a href="https://medium.com/@craig_10243/the-fury-fb603e344d20" target="_blank" rel="noopener">清算</a>。<a href="https://web.archive.org/web/20160310185210/http://www.mcgrathnicol.com/app/uploads/D14-140526-Hotwire439AReport-BFK.pdf" target="_blank" rel="noopener">2016-03-10被上传的清算报告</a></p>
<p>#2015</p>
<p><strong><code>2015-05-19</code></strong> CSW DeMorgan Ltd. 公司通过AusIndustry 成功申请了5400万澳元的<a href="https://www.businessinsider.com.au/the-australian-who-may-have-invented-bitcoin-claimed-to-have-landed-54m-in-taxpayer-funded-rebates-2015-12" target="_blank" rel="noopener">税收优惠</a>，<a href="https://www.grantcentral.com.au/big-numbers-involved-in-rd-tax-incentive/" target="_blank" rel="noopener">链接2</a></p>
<blockquote>
<p>这意味着DeMorgan能够向AusIndustry证明它在2014/2015财政年度花费了1.2亿美元用于研发活动</p>
</blockquote>
<p><strong><code>2015-05-29</code></strong> CSW 将 C01N 和 Cloudcroft 所谓的旗舰超级计算机Tulip Trading 合并为一台高性能计算机 - <a href="https://www.zdnet.com/article/sgi-denies-links-with-alleged-bitcoin-founder-craig-wright/#ftag=RSSbaffb68" target="_blank" rel="noopener">新的 C01N</a></p>
<p><strong><code>2015-06-04</code></strong> CSW 和 Jon Matonis 在澳大利亚第一次<a href="https://medium.com/@jonmatonis/how-i-met-satoshi-96e85727dc5a" target="_blank" rel="noopener">见面</a>，Jon Matonis 感觉 CSW 就是中本聪</p>
<p><strong><code>2015-07-15</code></strong> ITMastersCSU 官网的油管上传了 CSW 的超算课程：<a href="https://www.youtube.com/watch?v=cfoFFyypJxs" target="_blank" rel="noopener">免费短期课程：超级计算机编程</a>，有reddit 网友说这台超算是：C01N aka <a href="https://github.com/Time02/SatoshiTimeLine/blob/master" target="_blank" rel="noopener">缺链接</a></p>
<p><strong><code>2015-10-29</code></strong> CSW 在内华达州拉斯维加斯举行的比特币投资者大会上<a href="https://www.youtube.com/watch?v=LdvQTwjVmrE" target="_blank" rel="noopener">发表演说</a></p>
<p><strong><code>2015-12-08</code></strong> CSW 正在研究大区块的传播。<a href="https://web.archive.org/web/20151208225155if_/http://4.bp.blogspot.com/-ESwErMzB3bQ/VFKY7TeVHVI/AAAAAAAAI54/DtiR4T1H_vE/s1600/tulip1.png" target="_blank" rel="noopener">链接</a></p>
<p><strong><code>2015-12-08</code></strong> wired.com 首次报道了 <a href="https://www.wired.com/2015/12/bitcoins-creator-satoshi-nakamoto-is-probably-this-unknown-australian-genius/" target="_blank" rel="noopener">CSW 可能是中本聪</a></p>
<blockquote>
<p>第一个指向赖特的证据出现在11月中旬，当时一位与赖特关系密切的匿名消息人士开始将文件泄露给Gwern Branwen，他是一名假名的独立安全研究员和黑暗网络分析师。Branwen将这些文件提供给WIRED。</p>
</blockquote>
<p><strong><code>2015-12-08</code></strong> Gizmodo 媒体同时报道了 <a href="https://gizmodo.com/this-australian-says-he-and-his-dead-friend-invented-bi-1746958692" target="_blank" rel="noopener">CSW 可能是中本聪</a></p>
<ul>
<li>和 wired.com 是两项平行调查</li>
<li>2015-11 Gizmodo收到了一系列匿名电子邮件，这些文件都来自他的企业帐户</li>
<li>被黑的电子邮件显示 CSW 使用电子邮件地址 <a href="mailto:satoshi@vistomail.com">satoshi@vistomail.com</a>在2014年1月通过电子邮件发送给他的同事</li>
<li>CSW 试图联系澳大利亚参议员，从 <a href="mailto:satoshi@vistomail.com">satoshi@vistomail.com</a> 询问比特币监管，试图说服澳大利亚政府将他的比特币持有作为货币，而不是一项需要征收更多税收的资产<a href="https://www.documentcloud.org/documents/2644012-20140218-Transcript-Redacted.html" target="_blank" rel="noopener">链接1</a>，<a href="https://www.documentcloud.org/documents/2644013-20140226-Meeting-Minutes-Redacted.html" target="_blank" rel="noopener">链接2</a></li>
<li>视频：Gizmodo在他们位于悉尼北部的郊区的 CSW 家中到询问 CSW的妻子 CSW 在创造比特币方面的作用，他妻子起初只是笑着摇头，然后关门了。</li>
<li><a href="https://www.documentcloud.org/documents/2644014-Tulip-Trust-Redacted.html" target="_blank" rel="noopener">郁金香信托</a>曝光，其中有110w比特币。</li>
<li>内有五个PGP密钥 - 用于通过电子邮件建立加密通信线路的文件 - 用于管理信任。在公共数据库中搜索这些密钥会发现一个属于CSW，一个属于DK，两个属于Satoshi Nakamoto</li>
<li>其中还显示 DK 同意他不会透露“<a href="mailto:satoshin@gmx.com">satoshin@gmx.com</a>帐户的来源</li>
<li>CSW 的前妻告诉 Gizmodo，她回忆起很多年前 CSW 正在研究比特币。她指出，他最初称之为“数字货币”。</li>
<li>有人提出泄漏的邮件部分是<a href="https://www.reddit.com/r/Bitcoin/comments/80fzhw/craig_s_wrights_email_to_dave_kleiman_is_provably/" target="_blank" rel="noopener">伪造</a></li>
</ul>
<p><strong><code>2015-12-09</code></strong> 路透社报道<a href="https://www.reuters.com/article/us-australia-bitcoin-exclusive/australian-police-raid-sydney-home-of-reported-bitcoin-creator-idUSKBN0TS0AB20151209#AcrRFXxYvDzoDFkC.97" target="_blank" rel="noopener">澳大利亚警方突袭了CSW 的家和办公室</a>，新闻视频</p>
<ul>
<li>房子是CSW租的，自称为房子主人的男子加里·海瑞斯告诉路透社CSW有一个substantial computer system set-up，并且房子的后面安装了一个“三相”电源系统</li>
<li>澳大利亚税务局表示，由于法律保密，它无法评论“任何个人或实体的税务事务”。</li>
<li>Hotwire 2014年的纳税申报表，以及约为340万美元的GST税收抵免。Hotwire的纳税申报表还可以获得550万美元的所得税退税，但Business Insider了解到这一点尚未由ATO发布。<a href="https://www.businessinsider.com.au/revealed-the-ato-hit-suspected-bitcoin-creator-craig-steven-wrights-company-with-a-1-7-million-penalty-2015-12" target="_blank" rel="noopener">链接</a>，Hotwire清算报告</li>
</ul>
<p><strong><code>2015-12-XX</code></strong> 自从被曝光之后，CSW 收到匿名家人威胁，随即 Cloudcroft和DeMorgan 等网站，以及 CSW 的 LinkedIn 个人资料和推特账号，还有 email 等所有社交资料都被删除</p>
<p><strong><code>2015-12-11</code></strong> 福布斯网站发布文章：<a href="https://www.forbes.com/sites/thomasbrewster/2015/12/11/bitcoin-creator-satoshi-craig-wright-lies-hoax/#19b66a676794" target="_blank" rel="noopener">认为 CSW 履历有误</a></p>
<ul>
<li>怀疑1: CSW 的计算机科学博士学位和金融学博士学位</li>
<li>怀疑2: PGP 加密密钥是伪造</li>
<li>截止 2015-12-11 福布斯称收到查尔斯特大学的声明：CSW 没有获得该校的计算机科学博士学位，但是获得了网络和系统管理硕士，管理硕士（信息技术）和信息系统安全硕士</li>
</ul>
<h1 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h1><p><strong><code>2016-03-XX</code></strong> CSW 完成了比特币节点 iDaemon 项目(现在是 Terranode)，在等待 BU 的独立测试验证。<a href="https://web.archive.org/web/20190220100623/https://twitter.com/ProfFaustus/status/935493955457900546" target="_blank" rel="noopener">链接</a></p>
<p><strong><code>2016-03-XX</code></strong> Jon Matonis 说3月下旬有个私下证明会，<a href="http://themonetaryfuture.blogspot.com/2016/05/how-i-met-satoshi.html" target="_blank" rel="noopener">CSW 会私下展示签名</a></p>
<p><strong><code>2016-03-10</code></strong> CSW 公司 Hotwire 的清算报告被上传</p>
<ul>
<li>通过ATO 可以看出 CSW 的税务问题很大</li>
<li>McGrath Nicol的管理人员写道：“ATO对Hotwire征收1,716,608.00美元的罚款</li>
<li>报告显示：CSW 有一个家庭信托： Wright Family Trust</li>
<li>报告显示：CSW 当时除了郁金香信托外，应该还有巨量比特币，约19W枚</li>
</ul>
<p><strong><code>2016-05-02</code></strong> CSW 发表博客文章<a href="https://web.archive.org/web/20160502230334/http://www.drcraigwright.net/jean-paul-sartre-signing-significance/" target="_blank" rel="noopener">《保罗萨特，签名和意义》</a>承认自己是中本聪。在文章中 CSW 解释了如何验证一组加密密钥的过程。</p>
<blockquote>
<p>文章引用了保罗萨特拒绝诺贝文学奖的一句话：“If I sign myself Jean-Paul Sartre it is not the same thing as if I sign myself Jean-Paul Sartre, Nobel Prizewinner” – Jean-Paul Sartre, 1964</p>
</blockquote>
<blockquote>
<p>萨特：“我拒绝荣誉称号，因为这会使人受到约束，而我一心只想做个自由人，一个作家应该真诚地做人”</p>
</blockquote>
<blockquote>
<p>CSW：If I sign Craig Wright, it is not the same as if I sign Craig Wright, Satoshi</p>
</blockquote>
<p><strong><code>2016-05-02</code></strong> Gavin Andresen 发表文章<a href="http://gavinandresen.ninja/satoshi" target="_blank" rel="noopener">认为 CSW 就是中本聪</a>。<a href="https://www.youtube.com/watch?v=pNZyRMG2CjA" target="_blank" rel="noopener">同时视频公开承认</a>。CSW 使用<a href="https://web.archive.org/web/20160505134827/https://www.reddit.com/r/btc/comments/4hfyyo/gavin_can_you_please_detail_all_parts_of_the/d2plygg" target="_blank" rel="noopener">第1号块的私钥签名了 Gavin 给的文本</a>。</p>
<blockquote>
<p>CSW 使用第1号块的私钥签名了 Gavin Andresen 给的文本： “Gavin’s favorite number is eleven. CSW”。签名被复制到 Gavin 带到伦敦的新U盘上，然后在全新的笔记本电脑进行验证。安全起见，签名信息和电脑都未纰漏。</p>
</blockquote>
<p><strong><code>2016-05-02</code></strong> Gavin Andresen <a href="https://twitter.com/peterktodd/status/727078284345917441?ref_src=twsrc^tfw|twcamp^tweetembed|twterm^727078284345917441&ref_url=https%3A%2F%2Fmedium.com%2Fmedia%2F4b9bd278f12ff1e67beb7002e4de6d07%3FpostId%3D8fd0a1bccb92" target="_blank" rel="noopener">对 github 特币核心的访问权限被删除</a></p>
<p><strong><code>2016-05-02</code></strong> Ian Grigg 在博客发文：<a href="http://financialcryptography.com/mt/archives/001593.html" target="_blank" rel="noopener">认为 CSW 和 DK 都在中本聪团队</a></p>
<p><strong><code>2016-05-02</code></strong> Jon Matonis 发文<a href="http://themonetaryfuture.blogspot.com/2016/05/how-i-met-satoshi.html" target="_blank" rel="noopener">认为 CSW 就是中本聪</a></p>
<blockquote>
<p>Jon Matonis 得到了 CSW 关于注册 bitcoin.org 域名以及各种时间帖子到 BitcoinTalk 论坛的问题的令人满意的解释</p>
</blockquote>
<p><strong><code>2016-05-02</code></strong> CSW 接受 BBC <a href="https://www.bbc.com/news/technology-36168863" target="_blank" rel="noopener">采访</a>，<a href="https://www.youtube.com/watch?v=5DCAC1j2HTY" target="_blank" rel="noopener">视频</a></p>
<ul>
<li>CSW 称他的公司在被KPMG(KPMG：毕马威为四大国际会计师事务所之一)审计，原因是他已经告诉 ATO 一切</li>
<li>税务局对比特币了解太少，所以 CSW 的律师针对这个问题在谈判</li>
<li>CSW 表示他不会接受任何奖项，包括诺贝尔，图灵。他不需要钱，不需要名望</li>
<li>CSW 不想承认自己是中本聪，因为他的家人，朋友，员工需要隐私，需要生活</li>
<li>他表示这是最后一次登上电视媒体，关于中本聪的身份</li>
</ul>
<p><strong><code>2016-05-03</code></strong> 05-02号 CSW 博客公布的签名被质疑：CSW 使用了一个已经存在签名<a href="http://archive.is/dNCUX" target="_blank" rel="noopener">链接1</a>，<a href="https://cointelegraph.com/news/why-craig-wright-is-not-satoshi-nakamoto?ref=5019" target="_blank" rel="noopener">链接2</a>，而没有使用给 Gavin 展示的1号块的私钥。</p>
<p><strong><code>2016-05-03</code></strong> Dan Kaminsky 向 Gavin Andresen 发邮件询问，Gavin Andresen 回复说：<a href="https://dankaminsky.com/2016/05/03/the-cryptographically-provable-con-man/" target="_blank" rel="noopener">“我和其他人一样对这个”证据”感到惊讶，但我还不知道到底发生了什么”</a>。</p>
<blockquote>
<p>Gavin 认同 CSW 是中本聪的文章一直在，没被删除过。</p>
</blockquote>
<p><strong><code>2016-05-05</code></strong> CSW 的博客文章<a href="https://web.archive.org/web/20160505135432/http://www.drcraigwright.net/jean-paul-sartre-signing-significance/" target="_blank" rel="noopener">《保罗萨特，签名和意义》</a>内容更新：</p>
<blockquote>
<p>我相信我能做到。我相信我可以把隐姓埋名的日子抛在脑后。但是，随着本周事件的发展，以及我准备发表获得最早私钥的证明，我崩溃了。我没有勇气。我不能。</p>
</blockquote>
<blockquote>
<p>谣言一开始，我就受到了多方的攻击。当这些指控被证明是假的时候，新的指控已经开始了。我现在知道我不够坚强，不能承受这一切。</p>
</blockquote>
<blockquote>
<p>我知道这个弱点会对那些支持我的人造成巨大的伤害，特别是对Jon Matonis 和 Gavin Andresen。我只能希望他们的荣誉和信誉不会因我的行动而受到不可弥补的损害。 他们没有受到欺骗，但我知道，世界现在永远不会相信这一点。 我只能说对不起。</p>
</blockquote>
<blockquote>
<p>再见。</p>
</blockquote>
<p><strong><code>2016-06-30</code></strong> Andrew O’Hagan 发表：the-satoshi-affair <a href="https://www.lrb.co.uk/v38/n13/andrew-ohagan/the-satoshi-affair" target="_blank" rel="noopener">中本聪事件</a>，<a href="http://archive.is/kjuLi" target="_blank" rel="noopener">链接1</a>，<a href="https://mp.weixin.qq.com/s/82q1zACKd063UKJyOb5oLQ" target="_blank" rel="noopener">中译</a></p>
<blockquote>
<p>这篇文章信息量巨大，主观性很大，有许多事情需要其他印证。</p>
</blockquote>
<h1 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h1><p><strong><code>2017-02-08</code></strong> CSW 获得查尔斯特大学的哲学博士学位，<a href="https://researchoutput.csu.edu.au/en/publications/the-quantification-of-information-systems-risk-a-look-at-quantita-3" target="_blank" rel="noopener">博士论文《信息系统风险的量化：了解对信息安全问题的定量响应》</a></p>
<p><strong><code>2017-05-02</code></strong> Jon Matonis 被 nchain <a href="https://www.prnewswire.com/news-releases/jon-matonis-joins-blockchain-pioneer-nchain-as-vice-president-of-corporate-strategy-300449153.html" target="_blank" rel="noopener">任命为新的企业战略副总裁</a>，<a href="https://nchain.com/en/media/author/jon-matonis/" target="_blank" rel="noopener">链接1</a>。于2018-3月离开 nchain。</p>
<p><strong><code>2017-05-04</code></strong> Ian Grigg 在博客<a href="http://financialcryptography.com/mt/archives/001617.html" target="_blank" rel="noopener">发文</a></p>
<ul>
<li>中本聪私钥很早就被移到一个安全的地方（在2009年左右，我不确定，我不在那里），因为原来的处于危险之中。之后，钥匙再次被移动到另一个地方（可能是2013年）。最后，他们又被转移。</li>
<li>再次强调中本聪是一个团队：它不是一个人：它是一个团队，而且是故意的，谨慎的，精心设置的。</li>
</ul>
<p><strong><code>2017-05-04</code></strong> CSW 出现在slack 交流，<a href="https://pastebin.com/zU6YZWXK" target="_blank" rel="noopener">原文很长</a></p>
<ul>
<li>为什么比特币总量是2100w？ CSW：“参考全球M1总量 21万亿美刀，M1是狭义货币供应量”</li>
<li>比特币是否可以抵御量子攻击？CSW：“比特币使用双哈希算法，未使用的地址非常安全。所以只使用一次地址。而且使用量子计算机攻击比特币代价巨大”</li>
</ul>
<p><strong><code>2017-05-26</code></strong> CSW 被老聂拉入和平饭店QQ群(这个群当时聚齐了国内的大矿工)，尝试说服中国矿工抵制 core 的 Segwit。<a href="https://shimo.im/docs/rRhTWayFzRURhUaq/read" target="_blank" rel="noopener">2017年5月CSW的QQ聊天记录（Quas翻译)</a></p>
<blockquote>
<p>CSW 面对群里某些人的冷嘲热讽很冷静很有礼貌。遗憾的是，当时的矿工目光短浅，意识不到 Segwit 的巨大危害，这次游说以失败告终。CSW 想建立一个抵制 Segwit 的矿池的计划，也因为没有矿工的支持而失败。（当时中国矿工占据了算力的70%以上）</p>
</blockquote>
<p><strong><code>2017-06-30</code></strong> CSW 复出。在荷兰比特币未来会议上<a href="https://www.youtube.com/watch?v=CGualxBcQCY" target="_blank" rel="noopener">演讲</a>(必看)，<a href="https://v.youku.com/v_show/id_XNDEwOTQ3MTc5Mg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="noopener">中译</a>，<a href="https://zhuanlan.zhihu.com/p/27782496" target="_blank" rel="noopener">ppt翻译</a>。</p>
<blockquote>
<p>内容关于小世界网络，图灵完备，脚本系统；批判了 RBF，隔离见证，社区氛围；阐述了比特币经济模型，应该以用户为王，需要发展二层应用，改进钱包便利性而不是折腾底层协议想着加新功能。</p>
</blockquote>
<blockquote>
<p>CSW 表示自己记录了从2009年1月开始到现在的比特币全网数据</p>
</blockquote>
<blockquote>
<p>CSW 同时表示澳洲税务局和 Blockstream 走的很近，并向他们询问了 CSW 在2015年5月的各种事情。与澳洲税务局有关的人已经被拘捕。CSW 称他的税务已经没有问题。</p>
</blockquote>
<p><strong><code>2017-07-13</code></strong> CSW 在荷兰阿姆斯特丹举行的 iGaming 执行会议上演讲：<a href="https://www.youtube.com/watch?v=KKrQ0lnj-60" target="_blank" rel="noopener">Bitcoin’s Smart Future</a></p>
<blockquote>
<p>演讲内容就是当时未公布的 MetaNet。</p>
</blockquote>
<p><strong><code>2017-09-21</code></strong> CSW 在塑造未来 Blockchain 全球峰会-香港技术会议上发表<a href="https://www.youtube.com/watch?v=GUg2mocV9TI" target="_blank" rel="noopener">演讲：门限签名</a></p>
<p><strong><code>2017-09-23</code></strong> CSW 最早公开表示比特币<a href="https://github.com/trottier/original-bitcoin/blob/master/src/uibase.cpp" target="_blank" rel="noopener">原始代码</a>中有<a href="https://web.archive.org/web/20190216023418/https://twitter.com/ProfFaustus/status/911621111531663361/" target="_blank" rel="noopener">扑克游戏</a></p>
<p><strong><code>2017-10-14</code></strong> nchain 和 BU 使用 CSW 之前开发的 iDaemon 节点软件在 Gigablock Testnet上挖出了第一块 1GB 的块。<a href="https://www.trustnodes.com/2017/10/14/first-1gb-bitcoin-block-mined-testnet" target="_blank" rel="noopener">链接</a></p>
<p><strong><code>2017-10-24</code></strong> CSW 出席瑞士比特币协会举办的 meetup 活动，发表了演讲 <a href="https://www.youtube.com/watch?v=74XhvbXx_pY&feature=youtu.be" target="_blank" rel="noopener">Hording, equity, and the end of debt and credit</a>，附录：<a href="https://drive.google.com/file/d/0B1X9aq8p_7wDQkIyZmFmU0w2OTQ/view" target="_blank" rel="noopener">CSW 答网友问</a>，<a href="https://www.meetup.com/ja-JP/Bitcoin-Meetup-Switzerland/events/243862586/" target="_blank" rel="noopener">来源</a></p>
<blockquote>
<p>本次演讲有点专业，希望金融专业有看懂的补充一下</p>
</blockquote>
<p><strong><code>2017-11-06</code></strong> CSW 发表<a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3065857" target="_blank" rel="noopener">《调查使用比特币区块链作为世界互联网商务的主要基础设施的潜力》</a>论文。</p>
<blockquote>
<p>CSW 在比特币内部测试网络，100个节点上测试了1G大小的区块，共380GB。</p>
</blockquote>
<blockquote>
<p>使用的 CSW 的 iDaemon 节点软件(后来的 Terranode)。</p>
</blockquote>
<p><strong><code>2017-11-30</code></strong> CSW 以 nChain 首席科学家的身份展示了他的学术文凭和证书，装满了一辆手推车。<a href="https://www.youtube.com/watch?v=QiK34QicusI" target="_blank" rel="noopener">视频</a>。[证书PDF](<a href="https://github.com/Time02/SatoshiTimeLine/blob/master/CSW&#39;s" target="_blank" rel="noopener">https://github.com/Time02/SatoshiTimeLine/blob/master/CSW&#39;s</a> academic diplomas and certificates.pdf)</p>
<h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><p><strong><code>2018-02-26</code></strong> <a href="https://www.coindesk.com/satoshi-craig-wright-sued-10-billion" target="_blank" rel="noopener">Dvaid Kleiman 的亲戚告 CSW 案</a>，卷宗1，[卷宗2](<a href="https://www.morrisoncohen.com/siteFiles/files/2018_02_14" target="_blank" rel="noopener">https://www.morrisoncohen.com/siteFiles/files/2018_02_14</a> - Kleiman v_ Wright.pdf)</p>
<blockquote>
<p>等待结案，再分析证据。</p>
</blockquote>
<p><strong><code>2018-03-XX</code></strong> Jon Matonis 离开 nchain，因为<a href="https://web.archive.org/web/20190124065610/https://twitter.com/jonmatonis/status/994472382973792257" target="_blank" rel="noopener">不同意为比特币现金全力以赴的策略</a>。</p>
<p><strong><code>2018-03-25</code></strong> CSW 在日本东京的 Satoshi 愿景会议演讲<a href="https://www.youtube.com/watch?v=HrVtC9r0sTU" target="_blank" rel="noopener">比特币网络拓扑：小世界网络</a>，<a href="https://weibo.com/tv/v/HkS4pzBkk?fid=1034:4349741379615663" target="_blank" rel="noopener">中文字幕</a></p>
<p><strong><code>2018-05-09</code></strong> CSW 在<a href="https://youtu.be/eXmPE5hb6aA" target="_blank" rel="noopener">埃克塞特大学的演讲</a>，关于比特币、比特币交易、经济、p2p。</p>
<p><strong><code>2018-05-23</code></strong> CSW 在首届 CoinGeek 大会上演讲关于原子交换：<a href="https://www.youtube.com/watch?v=uuoVipRWd_s" target="_blank" rel="noopener">比特币的原子时代：令牌化和原子交换将如何改变数字商务</a>。</p>
<p><strong><code>2018-06-28</code></strong> 2018-06-28 之后的某个时间：14年黑客事件：论坛提醒中本聪信息泄漏的回复被删除。</p>
<blockquote>
<p>账户本人或论坛管理员才可以删除</p>
</blockquote>
<p><strong><code>2018-08-07</code></strong> CSW 谈论到我谈论比特币的历史，图灵完整性，比特币的人工智能，加密货币和闪电网络的法律含义，以及更多。<a href="https://www.youtube.com/watch?v=oA_q1OC-Aos" target="_blank" rel="noopener">视频</a></p>
<p><strong><code>2018-08-07</code></strong> CSW 关于图灵完整性，采矿激励和自私采矿的<a href="https://www.youtube.com/watch?v=whbzIGML1qY" target="_blank" rel="noopener">采访</a></p>
<p><strong><code>2018-11-29</code></strong> 中本聪在P2P基金会网站更新状态：<a href="https://web.archive.org/web/20181212002627/http://p2pfoundation.ning.com/profiles/status/show?id=2003008:Status:69295" target="_blank" rel="noopener">“nour”</a>，nour 在阿拉伯语中是光明的意思。</p>
<p><strong><code>2018-11-30</code></strong> CSW 发推阿拉伯语：<a href="https://web.archive.org/web/20181201130457/https:/twitter.com/ProfFaustus/status/1068429958714937344" target="_blank" rel="noopener">光线追逐黑暗</a></p>
<h1 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h1><p><strong><code>2019-02-08</code></strong> CSW 发博文称比特币和 MetaNet 的设计始于1998年，并说明这与 Tim May 的无政府版的不同。CSW 表示对看到比特币被无政府主义用于丝绸之路等犯罪市场表示遗憾，被在文末说我曾是中本聪。原文：<a href="https://medium.com/@craig_10243/careful-what-you-wish-for-c7c2f19e6c4f" target="_blank" rel="noopener">Careful what you wish for…</a>，译文：<a href="https://mp.weixin.qq.com/s/O0MlhUFUmJaIdywN0KaSrQ" target="_blank" rel="noopener">比特币创世录一：事与愿违</a></p>
<p><strong><code>2019-02-09</code></strong> CSW 继续发文揭开比特币世界里不为人知的黑暗一面，并称自己现在有了足够的勇气坚持到底。他最后指出比特币（BSV）发行于2009年，BTC则通过空投的方式发行于2017年。原文：<a href="https://medium.com/@craig_10243/the-story-of-bitcoin-continued-2f1ec78ba38b" target="_blank" rel="noopener">The story of Bitcoin, continued</a>，译文：<a href="https://mp.weixin.qq.com/s/BwfQhoeGqUB58dV7G4y36w" target="_blank" rel="noopener">比特币创世录二：亡羊补牢</a></p>
<p><strong><code>2019-02-15</code></strong> CFTC(美国商品期货交易委员会)<a href="https://www.cftc.gov/LawRegulation/FederalRegister/final-rules/2018-27167.html" target="_blank" rel="noopener">向公众征询虚拟货币的知识和技术的意见</a>。CSW 回复<a href="https://comments.cftc.gov/PublicComments/ViewComment.aspx?id=61969&SearchText=" target="_blank" rel="noopener">称自己曾经化名中本聪</a>。<a href="https://comments.cftc.gov/PublicComments/ViewComment.aspx?id=61969&SearchText=" target="_blank" rel="noopener">PDF文件中表示并且愿意宣誓作证</a>。<a href="https://mp.weixin.qq.com/s/kQuUt_HoaenKTmh16hE7bg" target="_blank" rel="noopener">PDF中译</a></p>
<blockquote>
<p>CSW 用中本聪的化名完成一项工程，该工程始于1997年，作为澳大利亚工业计划的一部分，相关文件已向澳政府提交并注册，该计划初始命名为 BlackNet，后改名 MetaNet。</p>
</blockquote>
<p><strong><code>2019-05-22</code></strong> 美国版权局批准了 CSW 关于白皮书和比特币0.1版本代码的版权注册。版权号为：<a href="https://cocatalog.loc.gov/cgi-bin/Pwebrecon.cgi?v1=8&ti=1,8&Search_Arg=bitcoin&Search_Code=TALL&CNT=25&PID=34qy-lok8olJDw0vTxrVk4fptQUhA&SEQ=20190521074729&SID=1" target="_blank" rel="noopener">TXu002136996</a> 和 <a href="https://cocatalog.loc.gov/cgi-bin/Pwebrecon.cgi?Search_Arg=TX0008708058&Search_Code=REGS&PID=4iZGzn-zLAex8Iv0CeW0HvQpgXb&SEQ=20190527105901&CNT=25&HIST=1" target="_blank" rel="noopener">TX0008708058</a></p>
<blockquote>
<p>如果你不相信，请到法院起诉。</p>
</blockquote>
]]></content>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发人员必知必会的20种常用类库和API</title>
    <url>/2019/10/09/Java%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%9A%8420%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E5%92%8CAPI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一个有经验的Java开发人员特征之一就是善于使用已有的轮子来造车。《Effective Java》的作者Joshua Bloch曾经说过：“建议使用现有的API来开发，而不是重复造轮子”。在本文中,我将分享一些Java开发人员应该熟悉的最有用的和必要的库和API。顺便说一句，这里不包括框架，如Spring和Hibernate因为他们非常有名,都有特定的功能。</p>
<p>本文总结了日志、JSON解析、单测、XML解析、字节码处理、数据库连接池、集合类、邮件、加密、嵌入式SQL数据库、JDBC故障诊断以及序列化等20个方面的常用类库。都是你日常开发经常可能要用到的，现在不用不要紧，但是你要知道有这么一篇文章可以供你参考。</p>
<a id="more"></a>

<p>不知道不可怕，可怕的是你不知道你不知道。</p>
<h3 id="一、日志相关类库"><a href="#一、日志相关类库" class="headerlink" title="一、日志相关类库"></a>一、日志相关类库</h3><p>日志库是很常见的，因为你在每一个项目中都需要他们。打印日志是服务器端应用中最重要的事情，因为日志是你了解你的程序发生了什么的唯一途径。尽管JDK附带自己的日志库，但是还是有很多更好的选择可用，例如 Log4j 、 SLF4j 和 LogBack。</p>
<p><a href="https://img1.tuicool.com/Z77vyaJ.jpg!web" target="_blank" rel="noopener"><img data-src="https://img1.tuicool.com/Z77vyaJ.jpg!web" alt="img"></a></p>
<p>Java开发人员应该熟悉日志记录的利弊， <em>并且了解为什么SLF4J要比Log4J要好。</em></p>
<h3 id="二、JSON解析库"><a href="#二、JSON解析库" class="headerlink" title="二、JSON解析库"></a>二、JSON解析库</h3><p>在当今世界的web服务和物联网中(IoT)，JSON已经取代了XML，成为从客户端到服务器传送信息的首选协议。有一个好消息和一个坏消息。坏消息 是JDK没有提供JSON库。好消息是有许多优秀的第三方库可以用来解析和创建JSON消息，如 Jackson 和 Gson</p>
<p><a href="https://img0.tuicool.com/3qyAraJ.jpg!web" target="_blank" rel="noopener"><img data-src="https://img0.tuicool.com/3qyAraJ.jpg!web" alt="img"></a></p>
<p>一个Java web开发人员应该熟悉Jackson 和 Gson这两种中的至少一种库。</p>
<h3 id="三、单元测试库"><a href="#三、单元测试库" class="headerlink" title="三、单元测试库"></a>三、单元测试库</h3><p>单元测试技术的使用，是区分一个一般的开发者和好的开发者的重要指标。程序员经常有各种借口不写单元测试，但最常见的借口就是缺乏经验和知识。常见的单测框架有 JUnit , Mockito 和PowerMock 。</p>
<p><a href="https://img2.tuicool.com/yAj2iin.jpg!web" target="_blank" rel="noopener"><img data-src="https://img2.tuicool.com/yAj2iin.jpg!web" alt="img"></a></p>
<h3 id="四、通用类库"><a href="#四、通用类库" class="headerlink" title="四、通用类库"></a>四、通用类库</h3><p>有几个很好的第三方通用库可供Java开发人员使用，例如 Apache Commons 和 Google Guava 。我会经常在我的代码中使用这些通用类库，因为这些类库都是经过无数开发者实践过的，无论是实用性还是在性能等方面都是最佳的。</p>
<p><a href="https://img1.tuicool.com/FZJrQfR.jpg!web" target="_blank" rel="noopener"><img data-src="https://img1.tuicool.com/FZJrQfR.jpg!web" alt="img"></a></p>
<h3 id="五、Http-库"><a href="#五、Http-库" class="headerlink" title="五、Http 库"></a>五、Http 库</h3><p>我不是很喜欢JDK的一个重要原因就包括他们缺乏对HTTP的支持。虽然可以使用java.net包类，但是这和直接使用像 Apache HttpClient 和 HttpCore 等开源类库比起来麻烦太多了。</p>
<p><a href="https://img2.tuicool.com/zeeQ7bN.jpg!web" target="_blank" rel="noopener"><img data-src="https://img2.tuicool.com/zeeQ7bN.jpg!web" alt="img"></a></p>
<p>尽管JDK 9将开始HTTP 2.0，也对HTTP的支持做了优化，但是我还是强烈建议所有的Java开发人员熟悉流行的HTTP处理类库，例如HttpClient和HttpCore HTTP等库。</p>
<h3 id="六、XML解析库"><a href="#六、XML解析库" class="headerlink" title="六、XML解析库"></a>六、XML解析库</h3><p>市面上有很多XML解析的类库，如 Xerces , JAXB , JAXP , Dom4j , Xstream 等。 Xerces2是下一代高性能，完全兼容的XML解析工具。Xerces2定义了 Xerces Native Interface (XNI)规范，并提供了一个完整、兼容标准的 XNI 规范实现。该解析器是完全重新设计和实现的，更简单以及模块化。</p>
<p><a href="https://img2.tuicool.com/jQNremi.jpg!web" target="_blank" rel="noopener"><img data-src="https://img2.tuicool.com/jQNremi.jpg!web" alt="img"></a></p>
<h3 id="七、Excel读写库"><a href="#七、Excel读写库" class="headerlink" title="七、Excel读写库"></a>七、Excel读写库</h3><p>许多应用程序需要提供把数据导出到Excel的功能，如果你要做相同的Java应用程序,那么你需要 Apache POI API 。</p>
<p><a href="https://img0.tuicool.com/AFBZFbE.jpg!web" target="_blank" rel="noopener"><img data-src="https://img0.tuicool.com/AFBZFbE.jpg!web" alt="img"></a></p>
<p>这是一个非常丰富的类库，你可以从Java程序读写XLS文件。</p>
<h3 id="八、字节码库"><a href="#八、字节码库" class="headerlink" title="八、字节码库"></a>八、字节码库</h3><p>如果你正在编写一个框架或者类库。有一些受欢迎的字节码库如 javassist 和 Cglib Nodep 可以供你选择，他们可以让你阅读和修改应用程序生成的字节码。</p>
<p><a href="https://img0.tuicool.com/3iUn2yV.jpg!web" target="_blank" rel="noopener"><img data-src="https://img0.tuicool.com/3iUn2yV.jpg!web" alt="img"></a></p>
<p>Javassist使得JAVA字节码操作非常简单。它是一个为编辑Java字节码而生的类库。 ASM 是另一个有用的字节码编辑库。</p>
<h3 id="九、数据库连接池库"><a href="#九、数据库连接池库" class="headerlink" title="九、数据库连接池库"></a>九、数据库连接池库</h3><p>如果你的Java应用程序与数据库交互不是使用数据库连接池库的话，那么你就大错特错了。因为在运行时创建数据库连接非常耗时并且会拖慢你的程序。所以墙裂建议使用，有些好用的连接池可供选择，如 Commons Pool 和 DBCP 。</p>
<p><a href="https://img0.tuicool.com/7ZVvA3y.jpg!web" target="_blank" rel="noopener"><img data-src="https://img0.tuicool.com/7ZVvA3y.jpg!web" alt="img"></a></p>
<p>在web应用程序中，web服务器通常提供了这些功能。但是在java项目中需要把数据库连接池的类库导入到应用中。</p>
<h3 id="十、消息传递库"><a href="#十、消息传递库" class="headerlink" title="十、消息传递库"></a>十、消息传递库</h3><p>像日志和数据库连接池一样，消息传递也是很多实际的Java项目中必备的。Java提供了JMS Java消息服务，但这不是JDK的一部分,你需要单独的引入jms.jar。类似地，如果您准备使用第三方消息传递协议， Tibco RV 是个不错的选择。</p>
<p><a href="https://img0.tuicool.com/yMzuAf3.jpg!web" target="_blank" rel="noopener"><img data-src="https://img0.tuicool.com/yMzuAf3.jpg!web" alt="img"></a></p>
<h3 id="十一、PDF处理库"><a href="#十一、PDF处理库" class="headerlink" title="十一、PDF处理库"></a>十一、PDF处理库</h3><p>除了Excel和Word，PDF也是一种常用的文件格式。如果你的应用程序要支持PDF格式的文件处理，你可以使用 iText 和 Apache FOP 类库。两者都提供了非常有用的PDF处理功能。</p>
<p><a href="https://img2.tuicool.com/M7Ff6zZ.png!web" target="_blank" rel="noopener"><img data-src="https://img2.tuicool.com/M7Ff6zZ.png!web" alt="img"></a></p>
<h3 id="十二、日期和时间库"><a href="#十二、日期和时间库" class="headerlink" title="十二、日期和时间库"></a>十二、日期和时间库</h3><p>在Java之前，JDK的日期和时间库一直被人们所诟病，比如其非线程安全的、不可变的、容易出错等。很多开发人员会选择更好用的 JodaTime 类库。</p>
<p><a href="https://img0.tuicool.com/22QZZbI.jpg!web" target="_blank" rel="noopener"><img data-src="https://img0.tuicool.com/22QZZbI.jpg!web" alt="img"></a></p>
<p>但是在Java8推出之后，我们就可以彻底放弃JodaTime了，因为Java 8提供了其所有功能。但是，如果你的代码运行在一个低版本的JDK中，那么JodaTime还是值得使用的。</p>
<h3 id="十三、集合类库"><a href="#十三、集合类库" class="headerlink" title="十三、集合类库"></a>十三、集合类库</h3><p>虽然JDK有丰富的集合类，但还是有很多第三方类库可以提供更多更好的功能。如 Apache Commons Collections 、 Goldman Sachs collections 、 Google Collections 和 Trove 。Trove尤其有用，因为它提供所有标准Collections 类的更快的版本以及能够直接在原语（primitive）（例如包含int 键或值的Map 等）上操作的Collections 类的功能。</p>
<p><a href="https://img1.tuicool.com/baYRfiz.jpg!web" target="_blank" rel="noopener"><img data-src="https://img1.tuicool.com/baYRfiz.jpg!web" alt="img"></a></p>
<p>FastUtil是另一个类似的API，它继承了Java Collection Framework，提供了数种特定类型的容器，包括映射map、集合set、列表list、优先级队列（prority queue），实现了java.util包的标准接口（还提供了标准类所没有的双向迭代器），还提供了很大的（64位）的array、set、list，以及快速、实用的二进制或文本文件的I/O操作类。</p>
<h3 id="十四、邮件API"><a href="#十四、邮件API" class="headerlink" title="十四、邮件API"></a>十四、邮件API</h3><p>javax.mail 和 Apache Commons Email 提供了发送邮件的api。它们建立在JavaMail API的基础上，提供简化的用法。</p>
<p><a href="https://img1.tuicool.com/nm6VJ3m.png!web" target="_blank" rel="noopener"><img data-src="https://img1.tuicool.com/nm6VJ3m.png!web" alt="img"></a></p>
<h3 id="十五、HTML解析库"><a href="#十五、HTML解析库" class="headerlink" title="十五、HTML解析库"></a>十五、HTML解析库</h3><p>和XML与JSON类似，HTML是另外一种我们可能要打交道的传输格式。值得庆幸的是，我们有jsoup可以大大简化Java应用程序使用HTML。你不仅可以使用 JSoup 解析HTML还可以创建HTML文档。</p>
<p><a href="https://img2.tuicool.com/eMBfUb3.png!web" target="_blank" rel="noopener"><img data-src="https://img2.tuicool.com/eMBfUb3.png!web" alt="img"></a></p>
<h3 id="十六、加密库"><a href="#十六、加密库" class="headerlink" title="十六、加密库"></a>十六、加密库</h3><p>Apache Commons家族中的 Commons Codec 就提供了一些公共的编解码实现，比如Base64, Hex, MD5,Phonetic and URLs等等。</p>
<p><a href="https://img1.tuicool.com/Zfmeua7.jpg!web" target="_blank" rel="noopener"><img data-src="https://img1.tuicool.com/Zfmeua7.jpg!web" alt="img"></a></p>
<h3 id="十七、嵌入式SQL数据库库"><a href="#十七、嵌入式SQL数据库库" class="headerlink" title="十七、嵌入式SQL数据库库"></a>十七、嵌入式SQL数据库库</h3><p>我真的是非常喜欢像 H2 这种内存数据库，他可以嵌入到你的Java应用中。在你跑单测的时候如果你需要一个数据库，用来验证你的SQL的话，他是个很好的选择。顺便说一句,H2不是唯一嵌入式DB，你还有 Apache Derby 和 HSQL 可供选择。</p>
<p><a href="https://img1.tuicool.com/bmqUviA.jpg!web" target="_blank" rel="noopener"><img data-src="https://img1.tuicool.com/bmqUviA.jpg!web" alt="img"></a></p>
<h3 id="十八、JDBC故障诊断库"><a href="#十八、JDBC故障诊断库" class="headerlink" title="十八、JDBC故障诊断库"></a>十八、JDBC故障诊断库</h3><p>有不错的JDBC扩展库的存在使得调试变得很容易，例如P6spy，这是一个针对数据库访问操作的动态监测框架，它使得数据库数据可无缝截取和操纵，而不必对现有应用程序的代码作任何修改。 P6Spy 分发包包括P6Log，它是一个可记录任何 Java 应用程序的所有JDBC事务的应用程序。其配置完成使用时，可以进行数据访问性能的监测。</p>
<p><a href="https://img0.tuicool.com/Jf6ZRn6.jpg!web" target="_blank" rel="noopener"><img data-src="https://img0.tuicool.com/Jf6ZRn6.jpg!web" alt="img"></a></p>
<h3 id="十九、序列化库"><a href="#十九、序列化库" class="headerlink" title="十九、序列化库"></a>十九、序列化库</h3><p>Google Protocol Buffer是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API。</p>
<p><a href="https://img2.tuicool.com/EFz2Uvj.jpg!web" target="_blank" rel="noopener"><img data-src="https://img2.tuicool.com/EFz2Uvj.jpg!web" alt="img"></a></p>
<h3 id="二十、网络库"><a href="#二十、网络库" class="headerlink" title="二十、网络库"></a>二十、网络库</h3><p>一些有用的网络库主要有 Netty 的和 Apache MINA 。如果您正在编写一个应用程序，你需要做的底层网络任务，可以考虑使用这些库。</p>
<p><a href="https://img2.tuicool.com/iaU3I3e.jpg!web" target="_blank" rel="noopener"><img data-src="https://img2.tuicool.com/iaU3I3e.jpg!web" alt="img"></a></p>
<p>这都是每位Java开发人员应该熟悉的，并且十分有用的库。Java生态系统非常庞大的，你会发现有很多不同的类库可以做不同的事情。每个你想到的东西，都可能有一个库可以做到。</p>
<h5 id="要相信，你遇到的问题，肯定不止你一个遇到过。"><a href="#要相信，你遇到的问题，肯定不止你一个遇到过。" class="headerlink" title="要相信，你遇到的问题，肯定不止你一个遇到过。"></a>要相信，你遇到的问题，肯定不止你一个遇到过。</h5><h5 id="要相信，也许有很多人比你更勤奋。"><a href="#要相信，也许有很多人比你更勤奋。" class="headerlink" title="要相信，也许有很多人比你更勤奋。"></a>要相信，也许有很多人比你更勤奋。</h5><h5 id="要相信，你用或不用，轮子就在那里。"><a href="#要相信，你用或不用，轮子就在那里。" class="headerlink" title="要相信，你用或不用，轮子就在那里。"></a>要相信，你用或不用，轮子就在那里。</h5><h5 id="要相信，使用这些类库，你和你的代码都会变得更好。"><a href="#要相信，使用这些类库，你和你的代码都会变得更好。" class="headerlink" title="要相信，使用这些类库，你和你的代码都会变得更好。"></a>要相信，使用这些类库，你和你的代码都会变得更好。</h5>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Linux最常用150个命令</title>
    <url>/2019/08/03/Linux%E6%9C%80%E5%B8%B8%E7%94%A8150%E4%B8%AA%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Linux 命令是对 Linux 系统进行管理的命令。对于 Linux 系统来说，无论是中央处理器、内存、磁盘驱动器、键盘、鼠标，还是用户等都是文件， Linux 系统管理的命令是它正常运行的核心，与之前的 DOS 命令类似。linux 命令在系统中有两种类型：内置 Shell 命令和 Linux 命令。</p>
<a id="more"></a>

<h2 id="线上查询及帮助命令-2-个"><a href="#线上查询及帮助命令-2-个" class="headerlink" title="线上查询及帮助命令 (2 个)"></a>线上查询及帮助命令 (2 个)</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">man</td>
<td align="left">查看命令帮助，命令的词典，更复杂的还有 info，但不常用。</td>
</tr>
<tr>
<td align="left">help</td>
<td align="left">查看 Linux 内置命令的帮助，比如 cd 命令。</td>
</tr>
</tbody></table>
<h2 id="文件和目录操作命令-18-个"><a href="#文件和目录操作命令-18-个" class="headerlink" title="文件和目录操作命令 (18 个)"></a>文件和目录操作命令 (18 个)</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ls</td>
<td align="left">全拼 list，功能是列出目录的内容及其内容属性信息。</td>
</tr>
<tr>
<td align="left">cd</td>
<td align="left">全拼 change directory，功能是从当前工作目录切换到指定的工作目录。</td>
</tr>
<tr>
<td align="left">cp</td>
<td align="left">全拼 copy，其功能为复制文件或目录。</td>
</tr>
<tr>
<td align="left">find</td>
<td align="left">查找的意思，用于查找目录及目录下的文件。</td>
</tr>
<tr>
<td align="left">mkdir</td>
<td align="left">全拼 make directories，其功能是创建目录。</td>
</tr>
<tr>
<td align="left">mv</td>
<td align="left">全拼 move，其功能是移动或重命名文件。</td>
</tr>
<tr>
<td align="left">pwd</td>
<td align="left">全拼 print working directory，其功能是显示当前工作目录的绝对路径。</td>
</tr>
<tr>
<td align="left">rename</td>
<td align="left">用于重命名文件。</td>
</tr>
<tr>
<td align="left">rm</td>
<td align="left">全拼 remove，其功能是删除一个或多个文件或目录。</td>
</tr>
<tr>
<td align="left">rmdir</td>
<td align="left">全拼 remove empty directories，功能是删除空目录。</td>
</tr>
<tr>
<td align="left">touch</td>
<td align="left">创建新的空文件，改变已有文件的时间戳属性。</td>
</tr>
<tr>
<td align="left">tree</td>
<td align="left">功能是以树形结构显示目录下的内容。</td>
</tr>
<tr>
<td align="left">basename</td>
<td align="left">显示文件名或目录名。</td>
</tr>
<tr>
<td align="left">dirname</td>
<td align="left">显示文件或目录路径。</td>
</tr>
<tr>
<td align="left">chattr</td>
<td align="left">改变文件的扩展属性。</td>
</tr>
<tr>
<td align="left">lsattr</td>
<td align="left">查看文件扩展属性。</td>
</tr>
<tr>
<td align="left">file</td>
<td align="left">显示文件的类型。</td>
</tr>
<tr>
<td align="left">md5sum</td>
<td align="left">计算和校验文件的 MD5 值。</td>
</tr>
</tbody></table>
<h2 id="查看文件及内容处理命令（21-个）"><a href="#查看文件及内容处理命令（21-个）" class="headerlink" title="查看文件及内容处理命令（21 个）"></a>查看文件及内容处理命令（21 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cat</td>
<td align="left">全拼 concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。</td>
</tr>
<tr>
<td align="left">tac</td>
<td align="left">tac 是 cat 的反向拼写，因此命令的功能为反向显示文件内容。</td>
</tr>
<tr>
<td align="left">more</td>
<td align="left">分页显示文件内容。</td>
</tr>
<tr>
<td align="left">less</td>
<td align="left">分页显示文件内容，more 命令的相反用法。</td>
</tr>
<tr>
<td align="left">head</td>
<td align="left">显示文件内容的头部。</td>
</tr>
<tr>
<td align="left">tail</td>
<td align="left">显示文件内容的尾部。</td>
</tr>
<tr>
<td align="left">cut</td>
<td align="left">将文件的每一行按指定分隔符分割并输出。</td>
</tr>
<tr>
<td align="left">split</td>
<td align="left">分割文件为不同的小片段。</td>
</tr>
<tr>
<td align="left">paste</td>
<td align="left">按行合并文件内容。</td>
</tr>
<tr>
<td align="left">sort</td>
<td align="left">对文件的文本内容排序。</td>
</tr>
<tr>
<td align="left">uniq</td>
<td align="left">去除重复行。oldboy</td>
</tr>
<tr>
<td align="left">wc</td>
<td align="left">统计文件的行数、单词数或字节数。</td>
</tr>
<tr>
<td align="left">iconv</td>
<td align="left">转换文件的编码格式。</td>
</tr>
<tr>
<td align="left">dos2unix</td>
<td align="left">将 DOS 格式文件转换成 UNIX 格式。</td>
</tr>
<tr>
<td align="left">diff</td>
<td align="left">全拼 difference，比较文件的差异，常用于文本文件。</td>
</tr>
<tr>
<td align="left">vimdiff</td>
<td align="left">命令行可视化文件比较工具，常用于文本文件。</td>
</tr>
<tr>
<td align="left">rev</td>
<td align="left">反向输出文件内容。</td>
</tr>
<tr>
<td align="left">grep/egrep</td>
<td align="left">过滤字符串，三剑客老三。</td>
</tr>
<tr>
<td align="left">join</td>
<td align="left">按两个文件的相同字段合并。</td>
</tr>
<tr>
<td align="left">tr</td>
<td align="left">替换或删除字符。</td>
</tr>
<tr>
<td align="left">vi/vim</td>
<td align="left">命令行文本编辑器。</td>
</tr>
</tbody></table>
<h2 id="文件压缩及解压缩命令（4-个）"><a href="#文件压缩及解压缩命令（4-个）" class="headerlink" title="文件压缩及解压缩命令（4 个）"></a>文件压缩及解压缩命令（4 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tar</td>
<td align="left">打包压缩。oldboy</td>
</tr>
<tr>
<td align="left">unzip</td>
<td align="left">解压文件。</td>
</tr>
<tr>
<td align="left">gzip</td>
<td align="left">gzip 压缩工具。</td>
</tr>
<tr>
<td align="left">zip</td>
<td align="left">压缩工具。</td>
</tr>
</tbody></table>
<h2 id="信息显示命令（11-个）"><a href="#信息显示命令（11-个）" class="headerlink" title="信息显示命令（11 个）"></a>信息显示命令（11 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">uname</td>
<td align="left">显示操作系统相关信息的命令。</td>
</tr>
<tr>
<td align="left">hostname</td>
<td align="left">显示或者设置当前系统的主机名。</td>
</tr>
<tr>
<td align="left">dmesg</td>
<td align="left">显示开机信息，用于诊断系统故障。</td>
</tr>
<tr>
<td align="left">uptime</td>
<td align="left">显示系统运行时间及负载。</td>
</tr>
<tr>
<td align="left">stat</td>
<td align="left">显示文件或文件系统的状态。</td>
</tr>
<tr>
<td align="left">du</td>
<td align="left">计算磁盘空间使用情况。</td>
</tr>
<tr>
<td align="left">df</td>
<td align="left">报告文件系统磁盘空间的使用情况。</td>
</tr>
<tr>
<td align="left">top</td>
<td align="left">实时显示系统资源使用情况。</td>
</tr>
<tr>
<td align="left">free</td>
<td align="left">查看系统内存。</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">显示与设置系统时间。</td>
</tr>
<tr>
<td align="left">cal</td>
<td align="left">查看日历等时间信息。</td>
</tr>
</tbody></table>
<h2 id="搜索文件命令（4-个）"><a href="#搜索文件命令（4-个）" class="headerlink" title="搜索文件命令（4 个）"></a>搜索文件命令（4 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">which</td>
<td align="left">查找二进制命令，按环境变量 PATH 路径查找。</td>
</tr>
<tr>
<td align="left">find</td>
<td align="left">从磁盘遍历查找文件或目录。</td>
</tr>
<tr>
<td align="left">whereis</td>
<td align="left">查找二进制命令，按环境变量 PATH 路径查找。</td>
</tr>
<tr>
<td align="left">locate</td>
<td align="left">从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用 updatedb 更新库。</td>
</tr>
</tbody></table>
<h2 id="用户管理命令（10-个）"><a href="#用户管理命令（10-个）" class="headerlink" title="用户管理命令（10 个）"></a>用户管理命令（10 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">useradd</td>
<td align="left">添加用户。</td>
</tr>
<tr>
<td align="left">usermod</td>
<td align="left">修改系统已经存在的用户属性。</td>
</tr>
<tr>
<td align="left">userdel</td>
<td align="left">删除用户。</td>
</tr>
<tr>
<td align="left">groupadd</td>
<td align="left">添加用户组。</td>
</tr>
<tr>
<td align="left">passwd</td>
<td align="left">修改用户密码。</td>
</tr>
<tr>
<td align="left">chage</td>
<td align="left">修改用户密码有效期限。</td>
</tr>
<tr>
<td align="left">id</td>
<td align="left">查看用户的 uid,gid 及归属的用户组。</td>
</tr>
<tr>
<td align="left">su</td>
<td align="left">切换用户身份。</td>
</tr>
<tr>
<td align="left">visudo</td>
<td align="left">编辑 / etc/sudoers 文件的专属命令。</td>
</tr>
<tr>
<td align="left">sudo</td>
<td align="left">以另外一个用户身份（默认 root 用户）执行事先在 sudoers 文件允许的命令。</td>
</tr>
</tbody></table>
<h2 id="基础网络操作命令（11-个）"><a href="#基础网络操作命令（11-个）" class="headerlink" title="基础网络操作命令（11 个）"></a>基础网络操作命令（11 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">telnet</td>
<td align="left">使用 TELNET 协议远程登录。</td>
</tr>
<tr>
<td align="left">ssh</td>
<td align="left">使用 SSH 加密协议远程登录。</td>
</tr>
<tr>
<td align="left">scp</td>
<td align="left">全拼 secure copy，用于不同主机之间复制文件。</td>
</tr>
<tr>
<td align="left">wget</td>
<td align="left">命令行下载文件。</td>
</tr>
<tr>
<td align="left">ping</td>
<td align="left">测试主机之间网络的连通性。</td>
</tr>
<tr>
<td align="left">route</td>
<td align="left">显示和设置 linux 系统的路由表。</td>
</tr>
<tr>
<td align="left">ifconfig</td>
<td align="left">查看、配置、启用或禁用网络接口的命令。</td>
</tr>
<tr>
<td align="left">ifup</td>
<td align="left">启动网卡。</td>
</tr>
<tr>
<td align="left">ifdown</td>
<td align="left">关闭网卡。</td>
</tr>
<tr>
<td align="left">netstat</td>
<td align="left">查看网络状态。</td>
</tr>
<tr>
<td align="left">ss</td>
<td align="left">查看网络状态。</td>
</tr>
</tbody></table>
<h2 id="深入网络操作命令（9-个）"><a href="#深入网络操作命令（9-个）" class="headerlink" title="深入网络操作命令（9 个）"></a>深入网络操作命令（9 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nmap</td>
<td align="left">网络扫描命令。</td>
</tr>
<tr>
<td align="left">lsof</td>
<td align="left">全名 list open files，也就是列举系统中已经被打开的文件。</td>
</tr>
<tr>
<td align="left">mail</td>
<td align="left">发送和接收邮件。</td>
</tr>
<tr>
<td align="left">mutt</td>
<td align="left">邮件管理命令。</td>
</tr>
<tr>
<td align="left">nslookup</td>
<td align="left">交互式查询互联网 DNS 服务器的命令。</td>
</tr>
<tr>
<td align="left">dig</td>
<td align="left">查找 DNS 解析过程。</td>
</tr>
<tr>
<td align="left">host</td>
<td align="left">查询 DNS 的命令。</td>
</tr>
<tr>
<td align="left">traceroute</td>
<td align="left">追踪数据传输路由状况。</td>
</tr>
<tr>
<td align="left">tcpdump</td>
<td align="left">命令行的抓包工具。</td>
</tr>
</tbody></table>
<h2 id="有关磁盘与文件系统的命令（16-个）"><a href="#有关磁盘与文件系统的命令（16-个）" class="headerlink" title="有关磁盘与文件系统的命令（16 个）"></a>有关磁盘与文件系统的命令（16 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mount</td>
<td align="left">挂载文件系统。</td>
</tr>
<tr>
<td align="left">umount</td>
<td align="left">卸载文件系统。</td>
</tr>
<tr>
<td align="left">fsck</td>
<td align="left">检查并修复 Linux 文件系统。</td>
</tr>
<tr>
<td align="left">dd</td>
<td align="left">转换或复制文件。</td>
</tr>
<tr>
<td align="left">dumpe2fs</td>
<td align="left">导出 ext2/ext3/ext4 文件系统信息。</td>
</tr>
<tr>
<td align="left">dump</td>
<td align="left">ext2/3/4 文件系统备份工具。</td>
</tr>
<tr>
<td align="left">fdisk</td>
<td align="left">磁盘分区命令，适用于 2TB 以下磁盘分区。</td>
</tr>
<tr>
<td align="left">parted</td>
<td align="left">磁盘分区命令，没有磁盘大小限制，常用于 2TB 以下磁盘分区。</td>
</tr>
<tr>
<td align="left">mkfs</td>
<td align="left">格式化创建 Linux 文件系统。</td>
</tr>
<tr>
<td align="left">partprobe</td>
<td align="left">更新内核的硬盘分区表信息。</td>
</tr>
<tr>
<td align="left">e2fsck</td>
<td align="left">检查 ext2/ext3/ext4 类型文件系统。</td>
</tr>
<tr>
<td align="left">mkswap</td>
<td align="left">创建 Linux 交换分区。</td>
</tr>
<tr>
<td align="left">swapon</td>
<td align="left">启用交换分区。</td>
</tr>
<tr>
<td align="left">swapoff</td>
<td align="left">关闭交换分区。</td>
</tr>
<tr>
<td align="left">sync</td>
<td align="left">将内存缓冲区内的数据写入磁盘。</td>
</tr>
<tr>
<td align="left">resize2fs</td>
<td align="left">调整 ext2/ext3/ext4 文件系统大小。</td>
</tr>
</tbody></table>
<h2 id="系统权限及用户授权相关命令（4-个）"><a href="#系统权限及用户授权相关命令（4-个）" class="headerlink" title="系统权限及用户授权相关命令（4 个）"></a>系统权限及用户授权相关命令（4 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">chmod</td>
<td align="left">改变文件或目录权限。</td>
</tr>
<tr>
<td align="left">chown</td>
<td align="left">改变文件或目录的属主和属组。</td>
</tr>
<tr>
<td align="left">chgrp</td>
<td align="left">更改文件用户组。</td>
</tr>
<tr>
<td align="left">umask</td>
<td align="left">显示或设置权限掩码。</td>
</tr>
</tbody></table>
<h2 id="查看系统用户登陆信息的命令（7-个）"><a href="#查看系统用户登陆信息的命令（7-个）" class="headerlink" title="查看系统用户登陆信息的命令（7 个）"></a>查看系统用户登陆信息的命令（7 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">whoami</td>
<td align="left">显示当前有效的用户名称，相当于执行 id -un 命令。</td>
</tr>
<tr>
<td align="left">who</td>
<td align="left">显示目前登录系统的用户信息。</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">显示已经登陆系统的用户列表，并显示用户正在执行的指令。</td>
</tr>
<tr>
<td align="left">last</td>
<td align="left">显示登入系统的用户。</td>
</tr>
<tr>
<td align="left">lastlog</td>
<td align="left">显示系统中所有用户最近一次登录信息。</td>
</tr>
<tr>
<td align="left">users</td>
<td align="left">显示当前登录系统的所有用户的用户列表。</td>
</tr>
<tr>
<td align="left">finger</td>
<td align="left">查找并显示用户信息。</td>
</tr>
</tbody></table>
<h2 id="内置命令及其它（19-个）"><a href="#内置命令及其它（19-个）" class="headerlink" title="内置命令及其它（19 个）"></a>内置命令及其它（19 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">echo</td>
<td align="left">打印变量，或直接输出指定的字符串</td>
</tr>
<tr>
<td align="left">printf</td>
<td align="left">将结果格式化输出到标准输出。</td>
</tr>
<tr>
<td align="left">rpm</td>
<td align="left">管理 rpm 包的命令。</td>
</tr>
<tr>
<td align="left">yum</td>
<td align="left">自动化简单化地管理 rpm 包的命令。</td>
</tr>
<tr>
<td align="left">watch</td>
<td align="left">周期性的执行给定的命令，并将命令的输出以全屏方式显示。</td>
</tr>
<tr>
<td align="left">alias</td>
<td align="left">设置系统别名。</td>
</tr>
<tr>
<td align="left">unalias</td>
<td align="left">取消系统别名。</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">查看或设置系统时间。</td>
</tr>
<tr>
<td align="left">clear</td>
<td align="left">清除屏幕，简称清屏。</td>
</tr>
<tr>
<td align="left">history</td>
<td align="left">查看命令执行的历史纪录。</td>
</tr>
<tr>
<td align="left">eject</td>
<td align="left">弹出光驱。</td>
</tr>
<tr>
<td align="left">time</td>
<td align="left">计算命令执行时间。</td>
</tr>
<tr>
<td align="left">nc</td>
<td align="left">功能强大的网络工具。</td>
</tr>
<tr>
<td align="left">xargs</td>
<td align="left">将标准输入转换成命令行参数。</td>
</tr>
<tr>
<td align="left">exec</td>
<td align="left">调用并执行指令的命令。</td>
</tr>
<tr>
<td align="left">export</td>
<td align="left">设置或者显示环境变量。</td>
</tr>
<tr>
<td align="left">unset</td>
<td align="left">删除变量或函数。</td>
</tr>
<tr>
<td align="left">type</td>
<td align="left">用于判断另外一个命令是否是内置命令。</td>
</tr>
<tr>
<td align="left">bc</td>
<td align="left">命令行科学计算器</td>
</tr>
</tbody></table>
<h2 id="系统管理与性能监视命令-9-个"><a href="#系统管理与性能监视命令-9-个" class="headerlink" title="系统管理与性能监视命令 (9 个)"></a>系统管理与性能监视命令 (9 个)</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">chkconfig</td>
<td align="left">管理 Linux 系统开机启动项。</td>
</tr>
<tr>
<td align="left">vmstat</td>
<td align="left">虚拟内存统计。</td>
</tr>
<tr>
<td align="left">mpstat</td>
<td align="left">显示各个可用 CPU 的状态统计。</td>
</tr>
<tr>
<td align="left">iostat</td>
<td align="left">统计系统 IO。</td>
</tr>
<tr>
<td align="left">sar</td>
<td align="left">全面地获取系统的 CPU、运行队列、磁盘 I/O、分页（交换区）、内存、 CPU 中断和网络等性能数据。</td>
</tr>
<tr>
<td align="left">ipcs</td>
<td align="left">用于报告 Linux 中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。</td>
</tr>
<tr>
<td align="left">ipcrm</td>
<td align="left">用来删除一个或更多的消息队列、信号量集或者共享内存标识。</td>
</tr>
<tr>
<td align="left">strace</td>
<td align="left">用于诊断、调试 Linux 用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</td>
</tr>
<tr>
<td align="left">ltrace</td>
<td align="left">命令会跟踪进程的库函数调用, 它会显现出哪个库函数被调用。</td>
</tr>
</tbody></table>
<h2 id="关机-重启-注销和查看系统信息的命令（6-个）"><a href="#关机-重启-注销和查看系统信息的命令（6-个）" class="headerlink" title="关机 / 重启 / 注销和查看系统信息的命令（6 个）"></a>关机 / 重启 / 注销和查看系统信息的命令（6 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">shutdown</td>
<td align="left">关机。</td>
</tr>
<tr>
<td align="left">halt</td>
<td align="left">关机。</td>
</tr>
<tr>
<td align="left">poweroff</td>
<td align="left">关闭电源。</td>
</tr>
<tr>
<td align="left">logout</td>
<td align="left">退出当前登录的 Shell。</td>
</tr>
<tr>
<td align="left">exit</td>
<td align="left">退出当前登录的 Shell。</td>
</tr>
<tr>
<td align="left">Ctrl+d</td>
<td align="left">退出当前登录的 Shell 的快捷键。</td>
</tr>
</tbody></table>
<h2 id="进程管理相关命令（15-个）"><a href="#进程管理相关命令（15-个）" class="headerlink" title="进程管理相关命令（15 个）"></a>进程管理相关命令（15 个）</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bg</td>
<td align="left">将一个在后台暂停的命令，变成继续执行 （在后台执行）。</td>
</tr>
<tr>
<td align="left">fg</td>
<td align="left">将后台中的命令调至前台继续运行。</td>
</tr>
<tr>
<td align="left">jobs</td>
<td align="left">查看当前有多少在后台运行的命令。</td>
</tr>
<tr>
<td align="left">kill</td>
<td align="left">终止进程。</td>
</tr>
<tr>
<td align="left">killall</td>
<td align="left">通过进程名终止进程。</td>
</tr>
<tr>
<td align="left">pkill</td>
<td align="left">通过进程名终止进程。</td>
</tr>
<tr>
<td align="left">crontab</td>
<td align="left">定时任务命令。</td>
</tr>
<tr>
<td align="left">ps</td>
<td align="left">显示进程的快照。</td>
</tr>
<tr>
<td align="left">pstree</td>
<td align="left">树形显示进程。</td>
</tr>
<tr>
<td align="left">nice/renice</td>
<td align="left">调整程序运行的优先级。</td>
</tr>
<tr>
<td align="left">nohup</td>
<td align="left">忽略挂起信号运行指定的命令。</td>
</tr>
<tr>
<td align="left">pgrep</td>
<td align="left">查找匹配条件的进程。</td>
</tr>
<tr>
<td align="left">runlevel</td>
<td align="left">查看系统当前运行级别。</td>
</tr>
<tr>
<td align="left">init</td>
<td align="left">切换运行级别。</td>
</tr>
<tr>
<td align="left">service</td>
<td align="left">启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</td>
</tr>
</tbody></table>
<p>转载来自<a href="https://www.cnblogs.com/lxbmaomao/p/10679411.html" target="_blank" rel="noopener">博客园</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>List集合的遍历方法</title>
    <url>/2019/08/13/List%E9%9B%86%E5%90%88%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>List遍历的方法分为三种类型</p>
<p>1.for循环遍历 2.迭代器遍历 3.foreach循环遍历</p>
</blockquote>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"布朗克斯"</span>);</span><br><span class="line">        list.add(<span class="string">"布鲁克林"</span>);</span><br><span class="line">        list.add(<span class="string">"曼哈顿"</span>);</span><br><span class="line">        list.add(<span class="string">"皇后区"</span>);</span><br><span class="line">        list.add(<span class="string">"斯塔滕岛"</span>);</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"======================================"</span>);</span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String data = iterator.next().toString();</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"======================================"</span>);</span><br><span class="line">        <span class="comment">//方法三</span></span><br><span class="line">        <span class="keyword">for</span> (String data:list) &#123;</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>MYSQL常用基本SQL语句总结</title>
    <url>/2019/07/25/MYSQL%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%ACSQL%E8%AF%AD%E5%8F%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="mysql服务的启动和停止"><a href="#mysql服务的启动和停止" class="headerlink" title="mysql服务的启动和停止"></a>mysql服务的启动和停止</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop mysql 　　 --启动 </span><br><span class="line">net start mysql    --停止</span><br></pre></td></tr></table></figure>

<h3 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -P 3306 -p</span><br><span class="line">mysql -h localhost -u root -p 123456</span><br></pre></td></tr></table></figure>

<h3 id="退出mysql"><a href="#退出mysql" class="headerlink" title="退出mysql"></a>退出mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<h3 id="创建和删除数据库"><a href="#创建和删除数据库" class="headerlink" title="创建和删除数据库"></a>创建和删除数据库</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;CREATE &#123; DATABASE | SCHEMA &#125; [ IF NOT EXISTS ] db_name [DEFAULT] CHARACTER SET [ = ] charset_name; --创建</span><br><span class="line">mysql&gt;DROP DATABASE db_name;　　--删除</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库存储引擎、使用数据库、查看当前使用的数据库"><a href="#查看数据库存储引擎、使用数据库、查看当前使用的数据库" class="headerlink" title="查看数据库存储引擎、使用数据库、查看当前使用的数据库"></a>查看数据库存储引擎、使用数据库、查看当前使用的数据库</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;SHOW ENGINES;  --查看存储引擎</span><br><span class="line">mysql&gt;USE db_name;     --使用数据库</span><br><span class="line">mysql&gt;SELECT DATABASE(); --查看当前使用的数据库</span><br></pre></td></tr></table></figure>

<h3 id="显示库中的数据表"><a href="#显示库中的数据表" class="headerlink" title="显示库中的数据表"></a>显示库中的数据表</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;USE db_name; 　　--使用数据库</span><br><span class="line">mysql&gt;SHOW TABLES;　　 --显示数据表</span><br></pre></td></tr></table></figure>

<h3 id="创建和删除数据表"><a href="#创建和删除数据表" class="headerlink" title="创建和删除数据表"></a>创建和删除数据表</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;CREATE  TABLE [IF NOT EXISTS] table_name(column_name column_type...) --创建</span><br><span class="line">mysql&gt;DROP TABLE table_name;    --删除</span><br></pre></td></tr></table></figure>

<h3 id="查看数据表的结构"><a href="#查看数据表的结构" class="headerlink" title="查看数据表的结构"></a>查看数据表的结构</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;DESC table_name;</span><br><span class="line">mysql&gt;DESCRIBE table_name;</span><br><span class="line">mysql&gt;EXPLAIN  table_name;</span><br><span class="line">mysql&gt;SHOW COLUMNS FROM  table_name;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>sql语句</tag>
      </tags>
  </entry>
  <entry>
    <title>Map集合的遍历方法</title>
    <url>/2019/08/13/Map%E9%9B%86%E5%90%88%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>Map遍历的方法总结下来，大概分为四种，以下是具体的展示。</p>
</blockquote>
<h2 id="1-通过Map-KeySet遍历key和value"><a href="#1-通过Map-KeySet遍历key和value" class="headerlink" title="1.通过Map.KeySet遍历key和value"></a>1.通过Map.KeySet遍历key和value</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"甘肃"</span>, <span class="string">"兰州"</span>);</span><br><span class="line">map.put(<span class="string">"陕西"</span>, <span class="string">"西安"</span>);</span><br><span class="line">map.put(<span class="string">"新疆"</span>, <span class="string">"乌鲁木齐"</span>);</span><br><span class="line">map.put(<span class="string">"青海"</span>, <span class="string">"西宁"</span>);</span><br><span class="line">map.put(<span class="string">"宁夏"</span>, <span class="string">"银川"</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"key= "</span> + key + <span class="string">" and value= "</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-通过Map-entrySet遍历key和value"><a href="#2-通过Map-entrySet遍历key和value" class="headerlink" title="2.通过Map.entrySet遍历key和value"></a>2.通过Map.entrySet遍历key和value</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"甘肃"</span>, <span class="string">"兰州"</span>);</span><br><span class="line">map.put(<span class="string">"陕西"</span>, <span class="string">"西安"</span>);</span><br><span class="line">map.put(<span class="string">"新疆"</span>, <span class="string">"乌鲁木齐"</span>);</span><br><span class="line">map.put(<span class="string">"青海"</span>, <span class="string">"西宁"</span>);</span><br><span class="line">map.put(<span class="string">"宁夏"</span>, <span class="string">"银川"</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    String key = entry.getKey();</span><br><span class="line">    String value = entry.getValue();</span><br><span class="line">    System.out.println(<span class="string">"key= "</span> + key + <span class="string">" and value= "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-通过Map-entrySet使用iterator遍历key和value"><a href="#3-通过Map-entrySet使用iterator遍历key和value" class="headerlink" title="3.通过Map.entrySet使用iterator遍历key和value"></a>3.通过Map.entrySet使用iterator遍历key和value</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"甘肃"</span>, <span class="string">"兰州"</span>);</span><br><span class="line">map.put(<span class="string">"陕西"</span>, <span class="string">"西安"</span>);</span><br><span class="line">map.put(<span class="string">"新疆"</span>, <span class="string">"乌鲁木齐"</span>);</span><br><span class="line">map.put(<span class="string">"青海"</span>, <span class="string">"西宁"</span>);</span><br><span class="line">map.put(<span class="string">"宁夏"</span>, <span class="string">"银川"</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">    String key = entry.getKey();</span><br><span class="line">    String value = entry.getValue();</span><br><span class="line">    System.out.println(<span class="string">"key= "</span> + key + <span class="string">" and value= "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-通过Map-values-遍历value-无法遍历key"><a href="#4-通过Map-values-遍历value-无法遍历key" class="headerlink" title="4.通过Map.values()遍历value,无法遍历key"></a>4.通过Map.values()遍历value,无法遍历key</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"甘肃"</span>, <span class="string">"兰州"</span>);</span><br><span class="line">map.put(<span class="string">"陕西"</span>, <span class="string">"西安"</span>);</span><br><span class="line">map.put(<span class="string">"新疆"</span>, <span class="string">"乌鲁木齐"</span>);</span><br><span class="line">map.put(<span class="string">"青海"</span>, <span class="string">"西宁"</span>);</span><br><span class="line">map.put(<span class="string">"宁夏"</span>, <span class="string">"银川"</span>);</span><br><span class="line"><span class="keyword">for</span> (String value : map.values()) &#123;</span><br><span class="line">    System.out.print(<span class="string">"value= "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Node连接Mysql进行增删改查</title>
    <url>/2020/07/01/Node%E8%BF%9E%E6%8E%A5Mysql%E8%BF%9B%E8%A1%8C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="安装Mysql模块"><a href="#安装Mysql模块" class="headerlink" title="安装Mysql模块"></a>安装Mysql模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure>

<p><strong>注：由于不是全局安装，建议下面的文件也放在模块的同级目录中去</strong></p>
<a id="more"></a>

<h2 id="连接Mysql数据库"><a href="#连接Mysql数据库" class="headerlink" title="连接Mysql数据库"></a>连接Mysql数据库</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(</span><br><span class="line">    &#123;</span><br><span class="line">        host : <span class="string">'localhost'</span>,</span><br><span class="line">        user : <span class="string">'root'</span>,</span><br><span class="line">        password :<span class="string">'123456'</span>,</span><br><span class="line">        port: <span class="string">'3306'</span>,</span><br><span class="line">        database : <span class="string">'test'</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">connection.connect(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"连接失败"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"连接成功"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>

<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">et sql = <span class="string">'select * from users_copy1'</span>;</span><br><span class="line">connection.query(sql,(err,result)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'[SELECT 失败] - '</span>, err.message);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'--------------查询-------------'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询成功:'</span>,result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'--------------------------\n\n'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.end();</span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Sql = <span class="string">'INSERT INTO users_copy1(id,name,age,pwd,user_sex,info) VALUES(0,?,?,?,?,?)'</span>;</span><br><span class="line"><span class="keyword">let</span> SqlParams = [<span class="string">'东契奇'</span>, <span class="string">'21'</span>, <span class="string">'77'</span>,<span class="string">'Man'</span>,<span class="string">'player'</span>];</span><br><span class="line"></span><br><span class="line">connection.query(Sql, SqlParams, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[增加失败] - '</span>, err.message);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'---------------插入-------------'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'增加成功 ID:'</span>,result.insertId);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'增加成功:'</span>, result);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--------------------------------\n\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>

<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> upSql = <span class="string">'UPDATE users_copy1 SET name = ? WHERE id = ?'</span>;</span><br><span class="line"><span class="keyword">let</span> upSqlParams = [<span class="string">'卢卡'</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">connection.query(upSql, upSqlParams,  (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[更新失败] - '</span>, err.message);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'------------更新---------------'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'更新成功'</span>, result.affectedRows);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-------------------------------\n\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> delSql = <span class="string">'DELETE FROM users_copy1 where id=0'</span>;</span><br><span class="line"></span><br><span class="line">connection.query(delSql, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[删除失败] - '</span>, err.message);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'---------删除------------'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>, result.affectedRows);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'------------------------\n\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：五部分代码放在一个js文件即可使用，至于数据库sql可以参照插入的自己编一个</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>PD之殇</title>
    <url>/2020/04/23/PD%E4%B9%8B%E6%AE%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>很久没有更新过了，但是昨天下午5点听到一则消息——pandownload作者被抓了，心里还是十分难过，和PC端的作者在qq上短暂的聊过几句，那时候他正在打算做个WEB端的页面，问我前端做的怎么样，当时觉得自己的能力可能有限，婉言拒绝了，现在想想挺后悔。</p>
</blockquote>
<a id="more"></a>

<h2 id="想说的话"><a href="#想说的话" class="headerlink" title="想说的话"></a>想说的话</h2><p>这个软件首先肯定是损害了百度的利益，但是这不并妨碍我能找到一万个理由来支持PD。百度的限速是个很恐怖的事情，不仅普通用户以及普通会员限速，SVIP照样在官方客户端也会凉凉，这个问题烦恼了我很久，毕竟我有很多的资源在百度网盘上，后来接触了PD，那是2017年了，觉得很有用，但也仅仅是个日常玩家而已，后面百度搞了新一轮的封锁，然后我去逛TG的时候，在TG的PD官方群里面得知，有内测版本似乎可以破解加速，然后进群了，进群之后，我有一种qq起死回生的感觉，感觉群里面大佬很多，哈哈，可能吹牛皮的也很多，但是总是很欢乐，似乎这个软件以及QQ群的衰败要比其他相似的产品来的更慢一些，与此同时，度盘下载器的作者也来到了PD，负责开发安卓版（这个我不确定SL是不是以前度盘下载器的开发者，但是脑子中有这个印象）。同时，市面上出现了很多类似的工具，比如说速盘等，发展的思路都是从52pojie开始崛起，但是最终都是奔着收费去的，但是PD守住了初心（那网上所谓的30万，一部分来源于内测的加速服务器费用，一部分完全是个人捐助），核心客户的群体在2万左右，普通用户估计50万起步了（仅仅是猜测哦），后面的又出了搜索，也是纯免费的。随着爱搜等搜索引擎网站的转型以及PD搜索的健壮，PD已经成为了我日常必开的软件，直到现在，它逐渐死去。把这当作我长大日子中的些许回忆吧，PD一路好走。</p>
<h2 id="网友的评论"><a href="#网友的评论" class="headerlink" title="网友的评论"></a>网友的评论</h2><blockquote>
<ul>
<li>以前的百度能解答所有的疑问，</li>
<li>现在的百度只会告诉你快来评论区和小编一起分享自己的想法。</li>
<li>从前各家的搜索引擎指向各个论坛博客的搜索结果不复存在，</li>
<li>取而代之的是竞价排名的广告，和为了版权打的你死我活的各种社交媒体。</li>
<li>我们常常会说一个行业有着巨大的潜力，伴随着行业的成熟，它会发挥更有意义的作用。</li>
<li>然而就像人变成熟一样，年少时眼里的光芒逐渐消失，取而代之的是向生活低头。</li>
<li>也许这样做能让互联网产业有更长远的发展，</li>
<li>但互联网创建的初心似乎已经被人忘记。</li>
<li>技术不应该是这样用的，生活也不该是这样的</li>
<li>pandownload真的好用，感谢！</li>
</ul>
<p>——《知乎》扑棱蛾子</p>
</blockquote>
<blockquote>
<ul>
<li>我求求你们别再追查Pandownload了，行吗？263块的超级会员svip，我充了三年，房子充没了。现在好不容易有了速度快的，你们非说它是假的。那软件假不假我们能不知道吗?那软件本来就不用花钱，你说制作者能赚钱吗？谁家能不下载呢，你就能保证你这一辈子不下载吗？你把他抓走了，我们都得2kb/s。我不想慢，我想快点。</li>
</ul>
<p>——《我不是盘神》知乎</p>
</blockquote>
<blockquote>
<ul>
<li>一些食客因家中炊具简陋不堪，恰巧村中富豪放出话来，为大家免费蒸饭。众人大喜，纷纷将米饭委托给大富豪。</li>
<li>富豪蒸熟了，却告诉食客，想吃他的米饭要用他专用的饭碗。但是这饭碗很小，小到每个碗只能装一两粒米，想用大碗要掏钱。众食客无奈掏了钱，发现所谓的大碗也只是略大了一点而已。众人大怒，怒骂其无良，存心戏弄我等。厨师轻蔑一笑说“你们可以不来我这吃啊，贱！”。众食客忿忿不平，却无话可说。</li>
<li>这时一人悄声出现，为众人发放自制饭碗，这饭碗上印着富豪家饭碗的印记，比众人的普通饭碗大了不少，却分文不取。众食客大喜，纷纷向其表示感谢。</li>
<li>如此日子过了许久，富豪也听说了这个人做的事情，顿时恼羞成怒，大骂那人无耻之尤，转头急奔官府，涕流满面哭诉自己被窃米万斤许，言那人居心不良，为探听食客隐秘之事，私贩假碗，获赃款达三十万两。罪罪桩桩，罄竹难书。</li>
<li>官府闻言，怒发冲冠，令官差将那人逮捕入狱等待发落。</li>
<li>富豪成了事，春风得意回到家里，砸了所有的假碗，笑之曰：“我能给你们这碗已经良心之极，你们居然还行此苟且之事！以后想吃饭要再加一个条件，每吃一碗就拿家里一件隐秘之事作为交换，我们会为你量身定制饭碗，还不说声谢谢富豪大爷？”。</li>
<li>众人怒目而视。有人心有戚戚，有人忿忿不平，有人暗道可惜，有人掩面而泣，却无一人应之。</li>
<li>一人看了看手中被砸的稀烂的碗，又看了看为自己量身定做的“好碗”，蓦然起身高呼：“那厮不是东西，偷窃大老爷的米饭，活该之极！大老爷给的碗合适的紧，感谢大老爷！”</li>
<li>一人呼，其旁者大呼，周遭众人亦大呼，俄而百千人大呼。</li>
<li>不平者无可闻也。</li>
</ul>
<p>——《知乎》骂该骂的人</p>
</blockquote>
<h2 id="最后一张图"><a href="#最后一张图" class="headerlink" title="最后一张图"></a>最后一张图</h2><p>[<img data-src="http://ww1.sinaimg.cn/large/0070yj5Oly1gdvzfrfmitj30m80gmtar.jpg" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>Vue简单知识点</title>
    <url>/2019/10/13/Vue%E7%AE%80%E5%8D%95%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="vue生命周期的理解"><a href="#vue生命周期的理解" class="headerlink" title="vue生命周期的理解"></a>vue生命周期的理解</h2><h3 id="什么是vue生命周期？"><a href="#什么是vue生命周期？" class="headerlink" title="什么是vue生命周期？"></a>什么是vue生命周期？</h3><p>Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</p>
<a id="more"></a>

<h3 id="vue生命周期总共有几个阶段？"><a href="#vue生命周期总共有几个阶段？" class="headerlink" title="vue生命周期总共有几个阶段？"></a>vue生命周期总共有几个阶段？</h3><p>总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后</p>
<ol>
<li><strong>beforeCreate（创建前）</strong> ： Vue 实例的挂载元素 $el 和 数据对象data都为undefined，还未初始化。</li>
<li><strong>created（创建后）</strong> ：完成数据观测，属性和方法的运算，初始化事件， $el 还没有。</li>
<li><strong>beforeMount（载入前）</strong> ：Vue 实例的 $el 和 data 都初始化了，但还是挂载之前为虚拟的 dom节点，<br>data.message 还未替换。</li>
<li><strong>mounted（载入后）</strong> : Vue 实例挂载完成，data.message 成功渲染。</li>
<li><strong>beforeUpdate（更新前）</strong> ：当 data 发生变化时， 在DOM重新渲染之前调用。</li>
<li><strong>updated（更新后）</strong> ：在 DOM 重新渲染之后调用。</li>
<li><strong>beforeDestroy（销毁前）</strong> ：在 Vue 实例销毁之前调用。实例仍然完全可用。</li>
<li><strong>destroyed（销毁后）</strong> ：在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被<br>销毁。</li>
</ol>
<h3 id="vue生命周期的作用是什么？"><a href="#vue生命周期的作用是什么？" class="headerlink" title="vue生命周期的作用是什么？"></a>vue生命周期的作用是什么？</h3><p>这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。多个事件钩子，可以让我们在控制整个Vue实例的过程时更容易形成好的逻辑。</p>
<h3 id="DOM-渲染在哪个周期中就已经完成？"><a href="#DOM-渲染在哪个周期中就已经完成？" class="headerlink" title="DOM 渲染在哪个周期中就已经完成？"></a>DOM 渲染在哪个周期中就已经完成？</h3><p><strong>mounted 周期</strong>中就已经完成。</p>
<h3 id="描述每个周期具体适合哪些场景？"><a href="#描述每个周期具体适合哪些场景？" class="headerlink" title="描述每个周期具体适合哪些场景？"></a>描述每个周期具体适合哪些场景？</h3><ol>
<li><code>beforecreate</code> : 可以在这加个loading事件，在加载实例时触发</li>
<li><code>created</code> : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用</li>
<li><code>mounted</code> : 挂载元素，获取到DOM节点</li>
<li><code>updated</code> : 如果对数据统一处理，在这里写上相应函数</li>
<li><code>beforeDestroy</code> : 可以做一个确认停止事件的确认框</li>
<li><code>nextTick</code> : 更新数据后立即操作<code>dom</code></li>
</ol>
<h3 id="第一次页面加载会触发哪几个钩子？"><a href="#第一次页面加载会触发哪几个钩子？" class="headerlink" title="第一次页面加载会触发哪几个钩子？"></a>第一次页面加载会触发哪几个钩子？</h3><p><code>beforeCreate</code>, <code>created</code>, <code>beforeMount</code>, <code>mounted</code>这几个钩子会被触发。</p>
<h2 id="说一下你对于MVVM-的理解"><a href="#说一下你对于MVVM-的理解" class="headerlink" title="说一下你对于MVVM 的理解"></a>说一下你对于MVVM 的理解</h2><p><code>MVVM</code>是<code>Model-View-ViewModel</code>的简写。它本质上就是<code>MVC</code> 的改进版。</p>
<p>有三部分组成：</p>
<ol>
<li><code>Model</code> 代表数据模型，也可以在 <code>Model</code> 中定义数据修改和操作的业务逻辑。</li>
<li><code>View</code> 代表 <code>UI</code> 组件，它负责将数据模型转化成 <code>UI</code> 展现出来。</li>
<li><code>ViewModel</code> 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步<code>View</code> 和 <code>Model</code> 的<br>对象，连接 <code>Model</code> 和 <code>View</code>。</li>
</ol>
<blockquote>
<ul>
<li>在 <code>MVVM</code> 架构下， <code>View</code> 和 <code>Model</code> 之间并没有直接的联系，而是通过 <code>ViewModel</code> 进行交互， <code>Model</code> 和<code>ViewModel</code> 之间的交互是双向的， 因此 View 数据的变化会同步到<code>Model</code>中，而<code>Model</code> 数据的变化也会立即反应到 <code>View</code> 上。</li>
<li><code>ViewModel</code> 通过双向数据绑定把 <code>View</code> 层和 <code>Model</code> 层连接了起来，而 <code>View</code> 和 <code>Model</code> 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作<code>DOM</code>，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 <code>MVVM</code> 来统一管理。</li>
</ul>
</blockquote>
<h2 id="简述一下Sass、Less，且说明区别？"><a href="#简述一下Sass、Less，且说明区别？" class="headerlink" title="简述一下Sass、Less，且说明区别？"></a>简述一下Sass、Less，且说明区别？</h2><p>他们是动态的样式语言，是<code>CSS</code>预处理器,<code>CSS</code>上的一种抽象层。所谓<code>CSS</code>预处理器，就是用一种专门的编程语言，进行 <code>Web</code> 页面样式设计，再通过编译器转化为正常的 <code>CSS</code> 文件，以供项目使用。</p>
<ul>
<li>变量符不一样，<code>less</code>是@，而<code>Sass</code>是$。</li>
<li><code>Sass</code>支持条件语句，可以使用<code>if{}else{},for{}</code>循环等等。而<code>Less</code>不支持。</li>
<li><code>Sass</code>是基于<code>Ruby</code>的，是在服务端处理的，而<code>Less</code>是需要引入<code>less.js</code>来处理<code>Less</code>代码输出<code>Css</code>到浏览器。</li>
</ul>
<h2 id="如何让CSS只在当前组件中起作用"><a href="#如何让CSS只在当前组件中起作用" class="headerlink" title="如何让CSS只在当前组件中起作用?"></a>如何让CSS只在当前组件中起作用?</h2><p>将当前组件的 <code>修改为</code></p>
<h2 id="Vue中使用插件的步骤"><a href="#Vue中使用插件的步骤" class="headerlink" title="Vue中使用插件的步骤"></a>Vue中使用插件的步骤</h2><ol>
<li>在项目文件夹下,使用命令 <code>npm install 插件名称 --save-dev</code> 引入插件。</li>
<li>采用 <code>ES6</code> 的 <code>import ... from ...</code> 语法或 <code>CommonJS</code> 的 <code>require()</code> 方法引入插件。</li>
<li>使用全局方法 <code>Vue.use( plugin )</code> 使用插件,可以传入一个选项对象 <code>Vue.use(MyPlugin, { someOption: true })</code>。</li>
</ol>
<h2 id="单向数据流和双向数据绑定"><a href="#单向数据流和双向数据绑定" class="headerlink" title="单向数据流和双向数据绑定"></a>单向数据流和双向数据绑定</h2><ul>
<li><strong>单向数据流：</strong>顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使 <code>UI</code> 发生变更就必须创建各种 <code>action</code>来维护对应的 <code>state</code>。</li>
<li><strong>双向数据绑定：</strong>数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 <code>debug</code> 的难度。</li>
</ul>
<h2 id="Vue实现数据双向绑定的原理"><a href="#Vue实现数据双向绑定的原理" class="headerlink" title="Vue实现数据双向绑定的原理"></a>Vue实现数据双向绑定的原理</h2><ul>
<li><code>vue</code> 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 <code>Object.defineProperty()</code>来劫持各个属性的 <code>setter</code> ， <code>getter</code> ，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通<code>Javascript</code> 对象传给 <code>Vue</code> 实例来作为它的 <code>data</code> 选项时，<code>Vue</code> 将遍历它的属性，用 <code>Object.defineProperty()</code> 将它们转为 <code>getter/setter</code> 。用户看不到 <code>getter/setter</code> ，但是在内部它们让 <code>Vue</code> 追踪依赖，在属性被访问和修改时通知变化。</li>
<li><code>vue</code>的数据双向绑定将 <code>MVVM</code> 作为数据绑定的入口，整合 <code>Observer</code> ， <code>Compile</code> 和 <code>Watcher</code> 三者，通过<code>Observer</code> 来监听自己的 <code>model</code> 的数据变化，通过 <code>Compile</code> 来解析编译模板指令，最终利用 <code>watcher</code> 搭起 <code>observer</code> 和 <code>Compile</code> 之间的通信桥梁，达到数据变化 —视图更新；视图交互变化<code>input</code>数据 <code>model</code> 变更双向绑定效果。</li>
</ul>
<p><strong>注：</strong>具体的过程可参考<a href="https://juejin.im/entry/5923973da22b9d005893805a" target="_blank" rel="noopener">这篇文章</a></p>
<h2 id="v-if-和-v-show-区别"><a href="#v-if-和-v-show-区别" class="headerlink" title="v-if 和 v-show 区别"></a>v-if 和 v-show 区别</h2><p><strong>相同点</strong></p>
<p>两者都是在判断DOM节点是否要显示。<br><strong>不同点</strong><br>1、实现方式</p>
<p>v-if是根据后面数据的真假值判断直接从Dom树上删除或重建元素节点</p>
<p>v-show只是在修改元素的css样式，也就是display的属性值，元素始终在Dom树上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-if是根据后面数据的真假值判断直接从Dom树上删除或重建元素节点</span><br><span class="line"></span><br><span class="line">v-show只是在修改元素的css样式，也就是display的属性值，元素始终在Dom树上。</span><br></pre></td></tr></table></figure>

<p>2、编译过程</p>
<p>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；</p>
<p>v-show只是简单的基于css切换；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-if切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件； </span><br><span class="line"></span><br><span class="line">v-show只是简单的基于css切换；</span><br></pre></td></tr></table></figure>

<p>3、编译条件</p>
<p>v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译；</p>
<p>v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素始终被保留；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译；</span><br><span class="line"></span><br><span class="line">v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素始终被保留；</span><br></pre></td></tr></table></figure>

<p>4、性能消耗</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-if有更高的切换消耗，不适合做频繁的切换；</span><br><span class="line"></span><br><span class="line">v-show有更高的初始渲染消耗，适合做频繁的额切换；</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>转载于<a href="https://blog.csdn.net/wxl1555" target="_blank" rel="noopener">LeonWuV</a></p>
<h2 id="v-for-与-v-if"><a href="#v-for-与-v-if" class="headerlink" title="v-for 与 v-if"></a>v-for 与 v-if</h2><p>官网上的解释<a href="https://cn.vuejs.org/v2/guide/list.html#v-for-与-v-if-一同使用" target="_blank" rel="noopener">这里</a>，不推荐在同一元素上使用 <code>v-if</code> 和 <code>v-for</code>。当它们处于同一节点，<code>v-for</code> 的优先级比 <code>v-if</code> 更高，这意味着 <code>v-if</code> 将分别重复运行于每个 <code>v-for</code> 循环中。</p>
<h2 id="计算属性-computed-和-methods-有什么区别"><a href="#计算属性-computed-和-methods-有什么区别" class="headerlink" title="计算属性 computed 和 methods 有什么区别"></a>计算属性 computed 和 methods 有什么区别</h2><ul>
<li>computed：计算属性是基于它们的依赖属性进行缓存的，只有在它的相关依赖发生改变时才会重新求值。</li>
<li>method：只要被触发重新渲染， method 调用总会执行该函数。</li>
</ul>
<p><strong>注：</strong> <strong>页面中最好不要直接使用函数，尽量使用computed</strong></p>
<h2 id="vue组件化的理解与使用"><a href="#vue组件化的理解与使用" class="headerlink" title="vue组件化的理解与使用"></a>vue组件化的理解与使用</h2><p>组件是可复用的 Vue 实例, 如果网页中的某一个部分需要在多个场景中使用，那么我们可以将其抽出为一个组件进<br>行复用。组件大大提高了代码的复用率。</p>
<p><strong>使用步骤：</strong></p>
<p><strong>1.先使用import导入你要在该组件中使用的子组件</strong></p>
<p><strong>2.然后,在components中写入子组件</strong></p>
<p><strong>3.在template中就可以直接使用了</strong></p>
<h2 id="Vue-组件-data-为什么必须是函数"><a href="#Vue-组件-data-为什么必须是函数" class="headerlink" title="Vue 组件 data 为什么必须是函数"></a>Vue 组件 data 为什么必须是函数</h2><p>其实在vue的基础中就有明确的规定，看<a href="https://cn.vuejs.org/v2/guide/components.html#data-必须是一个函数" target="_blank" rel="noopener">这里</a></p>
<ul>
<li>在 new Vue() 中， data 是可以作为一个对象进行操作的，然而在 component 中， data 只能以函数的形式<br>存在，不能直接将对象赋值给它。</li>
<li>当data选项是一个函数的时候，每个实例可以维护一份被返回对象的独立的拷贝，这样各个实例中的data不<br>会相互影响，是独立的</li>
</ul>
<h2 id="Vue组件间的参数传递"><a href="#Vue组件间的参数传递" class="headerlink" title="Vue组件间的参数传递"></a>Vue组件间的参数传递</h2><h3 id="父组件与子组件传递数据"><a href="#父组件与子组件传递数据" class="headerlink" title="父组件与子组件传递数据"></a>父组件与子组件传递数据</h3><ul>
<li>父组件传给子组件：子组件通过 props 方法接受父组件传递的数据</li>
<li>子组件传给父组件： $emit 方法传递参数</li>
</ul>
<h3 id="非父子组件间的数据传递，兄弟组件传值"><a href="#非父子组件间的数据传递，兄弟组件传值" class="headerlink" title="非父子组件间的数据传递，兄弟组件传值"></a>非父子组件间的数据传递，兄弟组件传值</h3><ul>
<li>可通过 PubSubJS 库来实现非父子组件之间的通信 ，使用 PubSubJS 的消息发布与订阅模式，来进行数据的传递。</li>
</ul>
<p>参考这篇<a href="https://blog.csdn.net/a15088712506/article/details/78967937" target="_blank" rel="noopener">文章</a></p>
<h2 id="路由之间跳转"><a href="#路由之间跳转" class="headerlink" title="路由之间跳转"></a>路由之间跳转</h2><p>可分为两大类，三小类</p>
<p><strong>（声明式）路由标签跳转</strong>：``</p>
<p><strong>（编程式）params方式传参</strong>：<code>router.push(&#39;/index/query/name/id&#39;)</code></p>
<p><strong>（编程式）query方式传参</strong>：<code>router.push(&#39;/index/query?name=name&amp;id=id&#39;)</code></p>
<p><strong>注：</strong>query方法的参数会以字符串拼接的形式（key=value）展示在地址栏。params方式可能由于路由配置的问题取不到参数。</p>
<h2 id="Vue-路由的实现"><a href="#Vue-路由的实现" class="headerlink" title="Vue 路由的实现"></a>Vue 路由的实现</h2><h3 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h3><p>在浏览器中符号 <code>#</code> ，<code>#</code> 以及#后面的字符称之为 <code>hash</code> ，用 <code>window.location.hash</code> 读取。</p>
<p><strong>特点：</strong> <code>hash</code> 虽然在 <code>URL</code>中，但不被包括在 <code>HTTP</code> 请求中；用来指导浏览器动作，对服务端安全无用， <code>hash</code> 不会重加载页面。</p>
<h3 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h3><p><code>history</code> 采用 <code>HTML5</code> 的新特性；且提供了两个新方法： <code>pushState()</code> ， <code>replaceState()</code> 可以对浏览器历史记录栈进行修改，以及 <code>popState</code> 事件的监听到状态变更.</p>
<p>参考<a href="https://www.cnblogs.com/tiedaweishao/" target="_blank" rel="noopener">monkeyWang</a>的这篇<a href="https://www.cnblogs.com/tiedaweishao/p/9144531.html" target="_blank" rel="noopener">文章</a></p>
<h2 id="route和-router的区别"><a href="#route和-router的区别" class="headerlink" title="$route和$router的区别"></a>$route和$router的区别</h2><ul>
<li>$route 是“路由信息对象”，包括 path ， params ， hash ， query ， fullPath ， matched ， name 等路由信息<br>参数。</li>
<li>而 $router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。</li>
</ul>
<h2 id="vuex-是什么？"><a href="#vuex-是什么？" class="headerlink" title="vuex 是什么？"></a>vuex 是什么？</h2><p>官方话：<code>Vuex</code> 是一个专为 ``Vue.js<code>应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</code>Vuex<code>也集成到</code>Vue<code>的官方调试工具</code>devtools extension<code>，提供了诸如零配置的</code>time-travel` 调试、状态快照导入导出等高级调试功能。</p>
<p>简单的说：<code>Vuex</code>是<code>vue</code>框架中状态管理。</p>
<p><strong>什么是“状态管理模式”？</strong></p>
<p>把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！这就是“状态管理模式”。</p>
<p>来源于这片<a href="http://www.imooc.com/article/284778" target="_blank" rel="noopener">文章</a></p>
<h2 id="Vuex有哪几种属性？"><a href="#Vuex有哪几种属性？" class="headerlink" title="Vuex有哪几种属性？"></a>Vuex有哪几种属性？</h2><p>有五种，分别是 <code>State</code>、 <code>Getter</code>、<code>Mutation</code> 、<code>Action</code>、 <code>Module</code></p>
<h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><p>1、利用<code>npm</code>包管理工具，进行安装 <code>vuex</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure>

<p>2、新建一个store的文件夹，在文件夹中新建<code>store.js</code>文件，文件中引入<code>vue</code>和<code>vuex</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import Vuex from &#39;vuex&#39;;</span><br></pre></td></tr></table></figure>

<p>3、使用我们vuex，引入之后用Vue.use进行引用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.use(Vuex);</span><br></pre></td></tr></table></figure>

<p>4、main.js文件中引入新建的store.js文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import storeConfig from &#39;.&#x2F;src&#x2F;srore&#39;</span><br></pre></td></tr></table></figure>

<p>5、实例化vue对象的时候加入其中（app.vue中）</p>
<p><strong>注</strong>：这篇<a href="https://blog.csdn.net/x550392236/article/details/80668263" target="_blank" rel="noopener">文章</a>不错以及<a href="https://blog.csdn.net/x550392236/article/details/80668263" target="_blank" rel="noopener">这篇</a></p>
<h2 id="哪种功能场景使用它？"><a href="#哪种功能场景使用它？" class="headerlink" title="哪种功能场景使用它？"></a>哪种功能场景使用它？</h2><p>场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车。</p>
<ul>
<li><code>state</code> ： <code>Vuex</code> 使用单一状态树,即每个应用将仅仅包含一个<code>store</code> 实例，但单一状态树和模块化并不冲突。存<br>放的数据状态，不可以直接修改里面的数据。</li>
<li><code>mutations</code> ： <code>mutations</code> 定义的方法动态修改 <code>Vuex</code> 的 <code>store</code> 中的状态或数据</li>
<li><code>getters</code> ：类似 <code>vue</code> 的计算属性，主要用来过滤一些数据。</li>
<li><code>action</code> ： <code>actions</code> 可以理解为通过将 <code>mutations</code> 里面处里数据的方法变成可异步的处理数据的方法，简单的说<br>就是异步操作数据。 <code>view</code> 层通过 <code>store.dispath</code> 来分发 <code>action</code></li>
<li><code>modules</code> ：项目特别复杂的时候，可以让每一个模块拥有自己的 <code>state</code> 、 <code>mutation</code> 、 <code>action</code> 、 <code>getters</code>，使得结构非常清晰，方便管理。</li>
</ul>
<h2 id="的作用是什么"><a href="#的作用是什么" class="headerlink" title="``的作用是什么?"></a>``的作用是什么?</h2><p>`` 包裹动态组件时，会缓存不活动的组件实例,主要用于保留组件状态或避免重新渲染。</p>
<p><strong>大白话:</strong> 比如有一个列表和一个详情，那么用户就会经常执行打开详情=&gt;返回列表=&gt;打开详情…这样的话列表和详情都是一个频率很高的页面，那么就可以对列表组件使用``进行缓存，这样用户每次返回列表的时候，都能从缓存中快速渲染，而不是重新渲染。</p>
<h2 id="NextTick"><a href="#NextTick" class="headerlink" title="NextTick"></a>NextTick</h2><p>官方文档解释如下：在下次 <code>DOM</code> 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 <code>DOM</code>。</p>
<p>所以就衍生出了这个获取更新后的<code>DOM</code>的<code>Vue</code>方法。所以放在<code>Vue.nextTick()</code>回调函数中的执行的应该是会对<code>DOM</code>进行操作的 <code>js</code>代码。</p>
<p><strong>理解：</strong>nextTick()，是将回调函数延迟在下一次dom更新数据后调用。</p>
<p><strong>简单的理解是：</strong>当数据更新了，在dom中渲染后，自动执行该函数。</p>
<h2 id="Vue-等单页面应用的优缺点"><a href="#Vue-等单页面应用的优缺点" class="headerlink" title="Vue 等单页面应用的优缺点"></a>Vue 等单页面应用的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>良好的交互体验</li>
<li>良好的前后端工作分离模式</li>
<li>减轻服务器压力</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>SEO 难度较高</li>
<li>初次加载耗时多</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/30/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<p>search</p>

    <div id="aplayer-PMRhufWv" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="英文" data-server="netease" data-type="search" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>


    <div id="aplayer-DpCqcOvA" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="3986040" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>


    <div id="aplayer-NXGVsYsZ" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="60198" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"
    ></div>


    <div id="aplayer-uNnKeXuW" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="989500891" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"
    ></div>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo博客搭建和优化</title>
    <url>/2019/08/01/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">(中文官方网站)</a>是一款基于Node.js的静态博客框架。以快速、简洁、高效著称，可以上百个页面在几秒内瞬间完成渲染. <code>Hexo</code>支持<code>Github Flavored Markdown</code>的所有功能，甚至可以整合<code>Octopress</code>的大多数插件. 并自己也拥有强大的插件系统。可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>在官方文档中有很多，其中Next 主题因其强大的扩张性而最受欢迎。</p>
<a id="more"></a>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><blockquote>
<ul>
<li>注册Github账号，熟悉Git的相关操作</li>
<li>安装了node.js、Git、npm，并了解相关基础知识</li>
</ul>
</blockquote>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是nchu，那么你就新建<code>nchu.github.io</code>的仓库（必须是你的用户名），将来你的网站访问地址就是 <a href="http://nchu.github.io/" target="_blank" rel="noopener">http://nchu.github.io</a></p>
<p><strong>注意：</strong>每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>默认的 <code>xxx.github.io</code> 来访问是可以的，我的就是这样，所以暂不介绍。</p>
<h3 id="本地安装hexo"><a href="#本地安装hexo" class="headerlink" title="本地安装hexo"></a>本地安装hexo</h3><ol>
<li>调用本地cmd命令运行<code>$ npm install -g hexo</code></li>
<li>新建一个本地文件夹，比如说Blog，进入该文件夹</li>
<li>右键运行Git Bash，输入<code>hexo init</code>回车，继续输入 <code>hexo g</code>和<code>hexo s</code>进行代码的生成和本地启动。</li>
<li>打开浏览器访问 <a href="http://localhost:4000，便可以看到新搭建的博客。/">http://localhost:4000，便可以看到新搭建的博客。</a></li>
<li>安装一个deploy的插件，运行<code>npm install hexo-deployer-git</code></li>
<li>配置<code>_config.yml</code>中有关deploy的部分：（图中是我的，大家可以自行切换）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:MUXIAONING/MUXIAONING.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><code>_config.yml</code>全局命令，冒号后面必须有一个空格，否则可能会出问题。</p>
<h3 id="使用nexT主题"><a href="#使用nexT主题" class="headerlink" title="使用nexT主题"></a>使用nexT主题</h3><ol>
<li>Git Bash终端执行以下命令<code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code>。</li>
<li>解压所下载的压缩包至站点的 themes 目录下， 并将解压后的文件夹名称更改为 next 。</li>
<li>打开站点__config.yml文件，将themes修改为next。</li>
<li>hexo-next主题下的一些个性化配置，参考：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题配置</a></li>
</ol>
<p>执行下面的三个命令，打开你的浏览器，地址栏输入<code>你的用户名.github.io</code>进行访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean 删除本地静态文件（Public目录），可不执行。</span><br><span class="line">hexo g 生成本地静态文件（Public目录）</span><br><span class="line">hexo deploy 将本地静态文件推送至github（hexo d）</span><br></pre></td></tr></table></figure>

<h2 id="常见的命令"><a href="#常见的命令" class="headerlink" title="常见的命令"></a>常见的命令</h2><p>常见命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章   hexo n == hexo new</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录   hexo g == hexo generate</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）  hexo s == hexo server</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub   hexo d == hexo deploy</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<p>组合命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>博客的发布与预览可以使用bat命令，新建一个<code>发布.bat</code>文件和<code>预览.bat</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">D:</span><br><span class="line"><span class="built_in">cd</span> D:\WORK\blog</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</span><br><span class="line">======================================</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">D:</span><br><span class="line"><span class="built_in">cd</span> D:\WORK\blog</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo s</span><br></pre></td></tr></table></figure>

<h2 id="博客编辑"><a href="#博客编辑" class="headerlink" title="博客编辑"></a>博客编辑</h2><h3 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h3><p>1.在<code>blog\scaffolds</code>目录，修改post.md文件为以下的格式（我自己用的）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">加密</span></span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">password:</span> </span><br><span class="line"><span class="attr">photo:</span></span><br></pre></td></tr></table></figure>

<p>2.在当前的Blog目录下执行<code>hexo new “Hello Github”</code>,会在<code>source\_posts</code>目录下生成.md文档，建议用<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>打开进行编辑，语法为markdown语法。</p>
<p>3.编辑完后，运行对应的脚本，进行发布或者预览。</p>
<h3 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h3><p><strong>进入theme目录</strong>，编辑_config_yml文件，找到menu:字段，在该字段下添加一个字段。<br>NexT主题菜单设置，用于设置博客上方导航栏，在主题配置文件中修改。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span>                       <span class="comment">#主页</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span>	      <span class="comment">#分类页（需手动创建）</span></span><br><span class="line">  <span class="comment">#about: /about 			        	#关于页面（需手动创建）</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span>		       	<span class="comment">#归档页</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span>				           	<span class="comment">#标签页（需手动创建）</span></span><br><span class="line">  <span class="comment">#commonweal: /404.html        #公益 404 （需手动创建）</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>可以先取消自己即将新建的页面的注释，比如关于我、分类、标签等。</p>
<h3 id="标签设置"><a href="#标签设置" class="headerlink" title="标签设置"></a>标签设置</h3><ol>
<li>运行<code>hexo new page &quot;tags&quot;</code>命令，同时，在/source目录下会生成一个tags文件夹，里面包含一个index.md文件。</li>
<li>修改/source/tags目录下的index.md文件。</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-29</span> <span class="number">14</span><span class="string">:37:02</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="分类设置"><a href="#分类设置" class="headerlink" title="分类设置"></a>分类设置</h3><ol>
<li>运行<code>hexo new page &quot;categories&quot;</code>，同时，在/source目录下会生成一个categories文件夹，里面包含一个index.md文件。</li>
<li>修改/source/categories目录下的index.md文件。</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-29</span> <span class="number">14</span><span class="string">:47:21</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p><strong>其他的类似页面，我就不一一赘述了。</strong></p>
<h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><h3 id="修改-site-相关信息"><a href="#修改-site-相关信息" class="headerlink" title="修改 site 相关信息"></a>修改 site 相关信息</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">xx</span></span><br><span class="line"><span class="attr">subtitle:</span>     </span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xx</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure>

<h3 id="修改主题风格"><a href="#修改主题风格" class="headerlink" title="修改主题风格"></a>修改主题风格</h3><p>next 主题对应的有四个风格，Muse、Mist、Pisces、Gemini，默认为 Muse。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>编辑站点配置文件，增加avatar字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.png</span></span><br></pre></td></tr></table></figure>

<h3 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h3><p>1.打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在meta标签后面插入这样一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(&#123;&#123; page.password &#125;&#125;)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(请输入文章密码) !== &#123;&#123; page.password &#125;&#125;)&#123;</span><br><span class="line">                alert(密码错误！);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.然后在我给的样本代码（<code>blog\scaffolds</code>目录下）中，输入密码，输入描述。</p>
<h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>这一块的代码，包含两部分，其一是链接，其二是链接图标。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/MUXIAONING</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="string">微博:</span> <span class="string">https://weibo.com/6421106372</span>  <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:muxiaoningdewei@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="string">网易云:</span> <span class="string">https://music.163.com/#/user/home?id=446917614</span>  <span class="string">||</span> <span class="string">music</span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">网易云:</span> <span class="string">headphones-alt</span></span><br><span class="line">  <span class="string">微博:</span> <span class="string">weibo</span></span><br></pre></td></tr></table></figure>

<h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><p>1.运行<code>npm install --save hexo-generator-feed</code>命令。</p>
<p>2.修改<strong>站点配置文件</strong>，在最后添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span> <span class="comment"># RSS订阅插件</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure>

<h3 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h3><p>NexT支持的第三方的评论系统有很多，我选的是Disqus评论，但是发现貌似被墙了，推荐选择Valine评论。</p>
<ol>
<li>在<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a>的官网上注册账号。</li>
<li>在<a href="https://livere.com/insight/myCode" target="_blank" rel="noopener">此处</a>获取data-uid。</li>
<li>打开NexT主题的配置文件<code>—config</code>中，搜索livere_uid，将livere_uid前面的#号去掉，将id填写到livere_uid：后面。</li>
</ol>
<h3 id="隐藏网页底部powered-By-Hexo-强力驱动"><a href="#隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部powered By Hexo / 强力驱动"></a>隐藏网页底部powered By Hexo / 强力驱动</h3><p>打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"powered-by"</span>&gt;</span><br><span class="line">  &#123;&#123; __(footer.powered, &lt;a class="theme-link" rel="external nofollow" href="https://hexo.io"&gt;Hexo&lt;/a&gt;) &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"theme-info"</span>&gt;</span><br><span class="line">  &#123;&#123; __(footer.theme) &#125;&#125;-</span><br><span class="line">  &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"theme-link"</span> rel=<span class="string">"external nofollow"</span> href=<span class="string">"https://github.com/iissnan/hexo-theme-next"</span>&gt;</span><br><span class="line">    NexT.&#123;&#123; theme.scheme &#125;&#125;  &lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="添加搜索"><a href="#添加搜索" class="headerlink" title="添加搜索"></a>添加搜索</h3><p>运行<code>npm install hexo-generator-searchdb --save</code>安装 hexo-generator-searchdb。</p>
<p>编辑主题配置文件，启用本地搜索功能 ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="添加网站访问量统计"><a href="#添加网站访问量统计" class="headerlink" title="添加网站访问量统计"></a>添加网站访问量统计</h3><p><strong>1.配置是否开启不蒜子访问量统计功能</strong></p>
<p> 在<code>themes/yilia/_config.yml</code>添加属性</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否开启访问量统计功能(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>2.引入不蒜子并添加站点访问量</strong></p>
<p> 在<code>themes/yilia/layout/_partial/footer.ejs</code>末尾添加如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class="line">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class="line">        &lt;span id=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span><br><span class="line">                本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt;次</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span class=<span class="string">"post-meta-divider"</span>&gt;|&lt;/span&gt;</span><br><span class="line">        &lt;span id=<span class="string">"busuanzi_container_site_uv"</span> style=<span class="string">'display:none'</span>&gt;</span><br><span class="line">                本站访客数&lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt;人</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;script async src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3.添加文章访问量</strong></p>
<p> 在<code>themes/yilia/layout/_partial/post/date.ejs</code>开头添加如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable &amp;&amp; !index)&#123; %&gt;</span><br><span class="line">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class="line">        &lt;span id=<span class="string">"busuanzi_container_page_pv"</span> style=<span class="string">'display:none'</span> class=<span class="string">"&lt;%= class_name %&gt;"</span>&gt;</span><br><span class="line">              &lt;i class=<span class="string">"icon-smile icon"</span>&gt;&lt;/i&gt; 阅读数：&lt;span id=<span class="string">"busuanzi_value_page_pv"</span>&gt;&lt;/span&gt;次</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>最后，运行上面所述的bat命令即可。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>idea快捷键</title>
    <url>/2019/07/24/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h2><a id="more"></a>

<table>
<thead>
<tr>
<th align="left">编辑快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Tab</td>
<td align="left">缩进 / 配合代码提示实现自动完成</td>
</tr>
<tr>
<td align="left">Shift + Tab</td>
<td align="left">取消缩进</td>
</tr>
<tr>
<td align="left">Ctrl + Z</td>
<td align="left">撤销</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Z</td>
<td align="left">取消撤销</td>
</tr>
<tr>
<td align="left">Ctrl + Y</td>
<td align="left">删除光标所在行 或 删除选中的行</td>
</tr>
<tr>
<td align="left">Ctrl + X</td>
<td align="left">剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td align="left">Ctrl + C</td>
<td align="left">复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td align="left">Ctrl + V</td>
<td align="left">在光标所在处粘贴已复制内容</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + V</td>
<td align="left">弹出历史复制内容</td>
</tr>
<tr>
<td align="left">Ctrl + D</td>
<td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td>
</tr>
<tr>
<td align="left">Ctrl + W</td>
<td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + W</td>
<td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td>
</tr>
<tr>
<td align="left">Ctrl + /</td>
<td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + /</td>
<td align="left">代码块注释</td>
</tr>
<tr>
<td align="left">Ctrl + +</td>
<td align="left">展开代码</td>
</tr>
<tr>
<td align="left">Ctrl + -</td>
<td align="left">折叠代码</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + +</td>
<td align="left">展开所有代码</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + -</td>
<td align="left">折叠所有代码</td>
</tr>
<tr>
<td align="left">Alt +</td>
<td align="left">鼠标左键上下拖动 多行编辑</td>
</tr>
<tr>
<td align="left">Alt + Shift +</td>
<td align="left">鼠标左键多行选择 自定义多行编辑</td>
</tr>
<tr>
<td align="left">Ctrl + Shift +</td>
<td align="left">前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序。光标放在普通代码行上，将改行上移</td>
</tr>
<tr>
<td align="left">Ctrl + Shift +</td>
<td align="left">后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法排序。光标放在普通代码行上，将改行下移</td>
</tr>
</tbody></table>
<h2 id="查找替换快捷键"><a href="#查找替换快捷键" class="headerlink" title="查找替换快捷键"></a>查找替换快捷键</h2><table>
<thead>
<tr>
<th align="left">查找替换快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + F</td>
<td align="left">在当前文件中进行文本查找</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F</td>
<td align="left">在整个项目或者指定目录内的文件中进行文本查找</td>
</tr>
<tr>
<td align="left">Ctrl + N</td>
<td align="left">根据输入的 类名 查找类文件</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + N</td>
<td align="left">通过文件名定位，打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + N</td>
<td align="left">查找 变量 / 方法</td>
</tr>
<tr>
<td align="left">双击Shift</td>
<td align="left">弹出 Search Everywhere 弹出层</td>
</tr>
<tr>
<td align="left">Alt + F3</td>
<td align="left">高亮显示所有该选中文本，按 Enter 选中下一个，按 Esc 高亮消失，推荐使用Ctrl+F</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F7</td>
<td align="left">高亮显示所有该选中文本，按 Esc 高亮消失，推荐使用Ctrl+F 或 Alt + F3</td>
</tr>
<tr>
<td align="left">Ctrl + E</td>
<td align="left">显示最近打开的文件记录列表</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + E</td>
<td align="left">显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + F12</td>
<td align="left">弹出当前文件结构层（如查看当前类的所有方法），可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td align="left">Ctrl + H</td>
<td align="left">显示当前类的继承层次结构（包含其父类和子类）</td>
</tr>
<tr>
<td align="left">Ctrl + R</td>
<td align="left">在当前文件进行文本替换</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + R</td>
<td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">光标定位快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Home</td>
<td align="left">跳到文件头</td>
</tr>
<tr>
<td align="left">Ctrl + End</td>
<td align="left">跳到文件尾</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Backspace</td>
<td align="left">退回到上次修改的地方</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 左方向键</td>
<td align="left">退回到上一个操作的地方</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 右方向键</td>
<td align="left">前进到上一个操作的地方</td>
</tr>
<tr>
<td align="left">Alt + 前方向键</td>
<td align="left">当前光标跳转到当前文件的前一个方法名位置</td>
</tr>
<tr>
<td align="left">Alt + 后方向键</td>
<td align="left">当前光标跳转到当前文件的后一个方法名位置</td>
</tr>
</tbody></table>
<h2 id="窗口导航快捷键"><a href="#窗口导航快捷键" class="headerlink" title="窗口导航快捷键"></a>窗口导航快捷键</h2><table>
<thead>
<tr>
<th align="left">窗口导航快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Tab</td>
<td align="left">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td align="left">Alt + 1,2,3…9</td>
<td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td>
</tr>
<tr>
<td align="left">ESC</td>
<td align="left">从工具窗口进入代码文件窗口，或退出打开的窗口</td>
</tr>
</tbody></table>
<h2 id="代码自动档快捷键"><a href="#代码自动档快捷键" class="headerlink" title="代码自动档快捷键"></a>代码自动档快捷键</h2><table>
<thead>
<tr>
<th align="left">代码自动档快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Space</td>
<td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Space</td>
<td align="left">智能代码提示</td>
</tr>
<tr>
<td align="left">Ctrl + J</td>
<td align="left">显示与之匹配的实时代码模板</td>
</tr>
<tr>
<td align="left">Shift + Enter</td>
<td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Enter</td>
<td align="left">自动结束代码，行末自动添加 分号/括号/引号 等，if/for等会自动添加所需结构</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Enter</td>
<td align="left">光标所在行上空出一行，光标定位到新行</td>
</tr>
<tr>
<td align="left">Ctrl + Enter</td>
<td align="left">智能分隔行</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + J</td>
<td align="left">自动将下一行合并到当前行末尾</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + U</td>
<td align="left">对选中的代码进行大 / 小写轮流转换</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + L</td>
<td align="left">格式化代码，可以对当前文件和整个包目录使用</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + O</td>
<td align="left">优化导入的类，可以对当前文件和整个包目录使用</td>
</tr>
<tr>
<td align="left">Alt + Insert</td>
<td align="left">在类中使用可以自动生成代码（如 getter/setter，构造函数，toString()</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + T</td>
<td align="left">对选中的代码弹出环绕选项弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + T</td>
<td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td align="left">Ctrl + O</td>
<td align="left">选择可重写的方法</td>
</tr>
<tr>
<td align="left">Ctrl + I</td>
<td align="left">选择可继承的方法</td>
</tr>
</tbody></table>
<h2 id="代码重构快捷键"><a href="#代码重构快捷键" class="headerlink" title="代码重构快捷键"></a>代码重构快捷键</h2><table>
<thead>
<tr>
<th align="left">代码重构快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Shift + F6</td>
<td align="left">对 文件夹 / 文件 / 类 / 方法 / 变量 (重构)重命名</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + T</td>
<td align="left">重构功能大汇总，叫做 Refactor This</td>
</tr>
</tbody></table>
<h2 id="代码追踪快捷键"><a href="#代码追踪快捷键" class="headerlink" title="代码追踪快捷键"></a>代码追踪快捷键</h2><table>
<thead>
<tr>
<th align="left">代码追踪快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + B</td>
<td align="left">进入光标所在的方法/变量的接口或定义处，等效于 Ctrl + 左键单击</td>
</tr>
<tr>
<td align="left">Ctrl + Alt+ B</td>
<td align="left">进入所选择的方法的具体实现类</td>
</tr>
<tr>
<td align="left">CTRL+SHIFT+B</td>
<td align="left">找变量的类</td>
</tr>
<tr>
<td align="left">Ctrl + H</td>
<td align="left">显示类结构图</td>
</tr>
<tr>
<td align="left">Ctrl + Q</td>
<td align="left">显示注释文档</td>
</tr>
<tr>
<td align="left">Alt + F7</td>
<td align="left">查找光标所在的 方法 / 变量 / 类 被使用的地方</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + F7</td>
<td align="left">查找光标所在的 方法 / 变量 / 类 被使用的地方，用弹出框的方式找出来</td>
</tr>
</tbody></table>
<h2 id="编译调试运行快捷键"><a href="#编译调试运行快捷键" class="headerlink" title="编译调试运行快捷键"></a>编译调试运行快捷键</h2><table>
<thead>
<tr>
<th align="left">编译运行快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + F9</td>
<td align="left">执行 Make Project 操作，编译所有</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F9</td>
<td align="left">编译选中的 文件 / 包 / Module</td>
</tr>
<tr>
<td align="left">Shift + F10</td>
<td align="left">等效于点击工具栏的 Run 按钮</td>
</tr>
<tr>
<td align="left">Alt + Shift + F10</td>
<td align="left">弹出 Run 的可选择菜单</td>
</tr>
<tr>
<td align="left">F2</td>
<td align="left">跳转到下一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td align="left">Shift + F2</td>
<td align="left">跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td align="left">Alt + Enter</td>
<td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">Debug快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Shift + F9</td>
<td align="left">等效于点击工具栏的 Debug 按钮</td>
</tr>
<tr>
<td align="left">Alt + Shift + F9</td>
<td align="left">弹出 Debug 的可选择菜单</td>
</tr>
<tr>
<td align="left">F7</td>
<td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中 <code>*</code></td>
</tr>
<tr>
<td align="left">F8</td>
<td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内 <code>*</code></td>
</tr>
<tr>
<td align="left">F9</td>
<td align="left">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上 <code>*</code></td>
</tr>
<tr>
<td align="left">Alt + F8</td>
<td align="left">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果 <code>*</code></td>
</tr>
<tr>
<td align="left">Ctrl + F8</td>
<td align="left">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td align="left">Shift + F7</td>
<td align="left">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td align="left">Shift + F8</td>
<td align="left">在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F8</td>
<td align="left">在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td align="left">Alt + Shift + F7</td>
<td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
</tbody></table>
<h2 id="版本控制-本地历史"><a href="#版本控制-本地历史" class="headerlink" title="版本控制/本地历史"></a>版本控制/本地历史</h2><table>
<thead>
<tr>
<th align="left"><strong>快捷键</strong></th>
<th align="left"><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl+K</td>
<td align="left">提交改动到 VCS</td>
</tr>
<tr>
<td align="left">Ctrl+T</td>
<td align="left">从 VCS 上更新</td>
</tr>
<tr>
<td align="left">Alt+Shift+C</td>
<td align="left">查看最近的改动记录</td>
</tr>
<tr>
<td align="left">Alt+BackQuote(`)</td>
<td align="left">显示 VCS 操作列表</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table>
<thead>
<tr>
<th align="left">其他快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Alt + S</td>
<td align="left">打开 IntelliJ IDEA 系统设置</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + S</td>
<td align="left">打开当前项目设置</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Y</td>
<td align="left">同步、刷新</td>
</tr>
<tr>
<td align="left">Shift + 滚轮前后滚动</td>
<td align="left">当前文件的横向滚动轴滚动</td>
</tr>
<tr>
<td align="left">Ctrl + 左键单击</td>
<td align="left">在打开的文件标题上，弹出该文件路径</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Code工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>java打印数组内容的方法</title>
    <url>/2019/08/10/java%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="循环打印"><a href="#循环打印" class="headerlink" title="循环打印"></a>循环打印</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strTo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] s = <span class="keyword">new</span> String[]&#123;<span class="string">"乌鲁木齐"</span>, <span class="string">"兰州"</span>, <span class="string">"西安"</span>, <span class="string">"成都"</span>, <span class="string">"重庆"</span>&#125;;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringBuilder.append(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stringBuilder.append(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(stringBuilder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Arrays-toString-打印"><a href="#Arrays-toString-打印" class="headerlink" title="Arrays.toString() 打印"></a>Arrays.toString() 打印</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ArrsysTo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] s = <span class="keyword">new</span> String[]&#123;<span class="string">"乌鲁木齐"</span>, <span class="string">"兰州"</span>, <span class="string">"西安"</span>, <span class="string">"成都"</span>, <span class="string">"重庆"</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.toString(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDK8-的-java-util-Arrays-stream-打印"><a href="#JDK8-的-java-util-Arrays-stream-打印" class="headerlink" title="JDK8 的 java.util.Arrays.stream() 打印"></a>JDK8 的 java.util.Arrays.stream() 打印</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arraysStreamTo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String[] s = <span class="keyword">new</span> String[]&#123;<span class="string">"乌鲁木齐"</span>, <span class="string">"兰州"</span>, <span class="string">"西安"</span>, <span class="string">"成都"</span>, <span class="string">"重庆"</span>&#125;;</span><br><span class="line">    Arrays.stream(s).forEach(System.out::print);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Arrays-deepToString-方法打印"><a href="#Arrays-deepToString-方法打印" class="headerlink" title="Arrays.deepToString() 方法打印"></a>Arrays.deepToString() 方法打印</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arraysDeepTo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String[] s = <span class="keyword">new</span> String[]&#123;<span class="string">"乌鲁木齐"</span>, <span class="string">"兰州"</span>, <span class="string">"西安"</span>, <span class="string">"成都"</span>, <span class="string">"重庆"</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.deepToString(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用list转化打印"><a href="#用list转化打印" class="headerlink" title="用list转化打印"></a>用list转化打印</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listTo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String[] s = <span class="keyword">new</span> String[]&#123;<span class="string">"乌鲁木齐"</span>, <span class="string">"兰州"</span>, <span class="string">"西安"</span>, <span class="string">"成都"</span>, <span class="string">"重庆"</span>&#125;;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,s);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java进阶</title>
    <url>/2019/07/13/java%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><h3 id="Spring-Cloud-微服务架构"><a href="#Spring-Cloud-微服务架构" class="headerlink" title="Spring Cloud 微服务架构"></a>Spring Cloud 微服务架构</h3><h4 id="什么是微服务？微服务之间是如何独立通讯的？"><a href="#什么是微服务？微服务之间是如何独立通讯的？" class="headerlink" title="什么是微服务？微服务之间是如何独立通讯的？"></a>什么是微服务？微服务之间是如何独立通讯的？</h4><ol>
<li>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。</li>
<li>异步：消息队列。要考虑消息可靠传输、高性能，以及编程模型的变化。（考虑到中间件的选型）<br>同步：RPC，REST等</li>
</ol>
<a id="more"></a>

<h4 id="Spring-Cloud-和-Dubbo-有哪些区别？"><a href="#Spring-Cloud-和-Dubbo-有哪些区别？" class="headerlink" title="Spring Cloud 和 Dubbo 有哪些区别？"></a>Spring Cloud 和 Dubbo 有哪些区别？</h4><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Dubbo</th>
<th align="left">SpringCloud</th>
</tr>
</thead>
<tbody><tr>
<td align="left">服务注册中心</td>
<td align="left">Zookeeper</td>
<td align="left">Spring Cloud Netfix Eureka</td>
</tr>
<tr>
<td align="left">服务调用方式</td>
<td align="left">RPC</td>
<td align="left">REST API</td>
</tr>
<tr>
<td align="left">服务监控</td>
<td align="left">Dubbo-monitor</td>
<td align="left">Spring Boot Admin</td>
</tr>
<tr>
<td align="left">熔断器</td>
<td align="left">不完善</td>
<td align="left">Spring Cloud Netflix Hystrix</td>
</tr>
<tr>
<td align="left">服务网关</td>
<td align="left">无</td>
<td align="left">Spring Cloud Netflix Zuul</td>
</tr>
<tr>
<td align="left">分布式配置</td>
<td align="left">无</td>
<td align="left">Spring Cloud Config</td>
</tr>
<tr>
<td align="left">服务跟踪</td>
<td align="left">无</td>
<td align="left">Spring Cloud Sleuth</td>
</tr>
<tr>
<td align="left">数据流</td>
<td align="left">无</td>
<td align="left">Spring Cloud Stream</td>
</tr>
<tr>
<td align="left">批量任务</td>
<td align="left">无</td>
<td align="left">Spring Cloud Task</td>
</tr>
<tr>
<td align="left">信息总线</td>
<td align="left">无</td>
<td align="left">Spring Cloud Bus</td>
</tr>
</tbody></table>
<p>最大的区别：Dubbo底层是使用Netty这样的NIO框架，是基于TCP协议传输的，配合以Hession序列化完成RPC通信。而SpringCloud是基于Http协议+rest接口调用远程过程的通信，相对来说，Http请求会有更大的报文，占的带宽也会更多。但是REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更为合适，至于注重通信速度还是方便灵活性，具体情况具体考虑。</p>
<h4 id="Spring-Boot-和-Spring-Cloud，谈谈你对它们的理解？"><a href="#Spring-Boot-和-Spring-Cloud，谈谈你对它们的理解？" class="headerlink" title="Spring Boot 和 Spring Cloud，谈谈你对它们的理解？"></a>Spring Boot 和 Spring Cloud，谈谈你对它们的理解？</h4><ol>
<li>spring-colud是一种云端分布式架构解决方案，是Spring为微服务架构思想做的一个一站式实现，是基于SpringBoot的一套实现微服务的框架。它为开发者提供了很多工具，用于快速构建分布式系统的一些通用模式，例如：配置管理、注册中心、服务发现、限流、网关、链路追踪等。</li>
<li>Spring boot 是 Spring 的一套快速配置脚手架，可以基于spring boot 快速开发单个微服务；Spring Cloud是一个基于Spring Boot实现的云应用开发工具；Spring boot专注于快速、方便集成的单个个体，Spring Cloud是关注全局的服务治理框架；spring boot使用了默认大于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置，Spring Cloud很大的一部分是基于Spring boot来实现；Spring boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring boot，属于依赖的关系。</li>
</ol>
<h4 id="什么是服务熔断？什么是服务降级？"><a href="#什么是服务熔断？什么是服务降级？" class="headerlink" title="什么是服务熔断？什么是服务降级？"></a>什么是服务熔断？什么是服务降级？</h4><p>服务熔断是指如果某个目标服务调用慢或者有大量超时，此时，熔断该服务的调用，对于后续调用请求，不在继续调用目标服务，直接返回，快速释放资源。如果目标服务情况好转则恢复调用。</p>
<p>三个模块： 熔断请求判断算法、熔断恢复机制、熔断报警</p>
<ul>
<li>（1）熔断请求判断机制算法：使用无锁循环队列计数，每个熔断器默认维护10个bucket，每1秒一个bucket，每个blucket记录请求的成功、失败、超时、拒绝的状态，默认错误超过50%且10秒内超过20个请求进行中断拦截。</li>
<li>（2）熔断恢复：对于被熔断的请求，每隔5s允许部分请求通过，若请求都是健康的（RT&lt;250ms）则对请求健康恢复。</li>
<li>（3）熔断报警：对于熔断的请求打日志，异常请求超过某些设定则报警</li>
</ul>
<p>服务降级是指当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。</p>
<ol>
<li>服务接口拒绝服务：页面能访问，但是添加删除提示服务器繁忙。页面内容也可在 Varnish 或 CDN 内获取。</li>
<li>页面拒绝服务：页面提示由于服务繁忙此服务暂停。跳转到 varnish 或 nginx 的一个静态页面。</li>
<li>延迟持久化：页面访问照常，但是涉及记录变更，会提示稍晚能看到结果，将数据记录到 异步队列 或 log ，服务恢复后执行。</li>
<li>随机拒绝服务：服务 接口随机 拒绝服务，让用户重试，目前较少有人采用。因为用户体验不佳。</li>
</ol>
<h4 id="微服务的优缺点分别是什么？说一下你在项目开发中碰到的坑？"><a href="#微服务的优缺点分别是什么？说一下你在项目开发中碰到的坑？" class="headerlink" title="微服务的优缺点分别是什么？说一下你在项目开发中碰到的坑？"></a>微服务的优缺点分别是什么？说一下你在项目开发中碰到的坑？</h4><h5 id="微服务优点"><a href="#微服务优点" class="headerlink" title="微服务优点"></a>微服务优点</h5><ol>
<li>通过分解巨大单体式应用为多个服务方法解决了复杂性问题，每个微服务相对较小</li>
<li>每个单体应用不局限于固定的技术栈，开发者可以自由选择开发技术，提供API服务。</li>
<li>每个微服务独立的开发，部署</li>
<li>单一职责功能，每个服务都很简单，只关注于一个业务功能</li>
<li>易于规模化开发，多个开发团队可以并行开发，每个团队负责一项服务</li>
<li>改善故障隔离。一个服务宕机不会影响其他的服务</li>
</ol>
<h5 id="微服务缺点"><a href="#微服务缺点" class="headerlink" title="微服务缺点"></a>微服务缺点</h5><ol>
<li>开发者需要应对创建分布式系统所产生的额外的复杂因素</li>
<li>服务地址目录，服务健康度，部署困难，服务依赖问题，数据库分区问题。</li>
<li>部署复杂，微服务应用是分布式系统，由此会带来固有的复杂性。</li>
<li>.内存占用量更高</li>
</ol>
<h4 id="你所知道的微服务技术栈都有哪些？"><a href="#你所知道的微服务技术栈都有哪些？" class="headerlink" title="你所知道的微服务技术栈都有哪些？"></a>你所知道的微服务技术栈都有哪些？</h4><table>
<thead>
<tr>
<th align="left">微服务条目</th>
<th align="left">对应技术</th>
</tr>
</thead>
<tbody><tr>
<td align="left">服务开发</td>
<td align="left">SpringBoot、Spring、SpringMVC</td>
</tr>
<tr>
<td align="left">服务配置管理</td>
<td align="left">Netfil公司的Archaius、阿里的Diamond等</td>
</tr>
<tr>
<td align="left">服务注册于发现</td>
<td align="left">Eureka、Consul、Zookeeper</td>
</tr>
<tr>
<td align="left">服务熔断器</td>
<td align="left">Hystrix、Envoy</td>
</tr>
<tr>
<td align="left">服务负载均衡</td>
<td align="left">Nginx、Ribbon</td>
</tr>
<tr>
<td align="left">服务接口调用（客户端调用服务的简化工具）</td>
<td align="left">Feign</td>
</tr>
<tr>
<td align="left">消息队列</td>
<td align="left">Kafka、RabbitMQ、ActiveMQ</td>
</tr>
<tr>
<td align="left">消息配置中心管理</td>
<td align="left">SpringCloudConfig、Chef等</td>
</tr>
<tr>
<td align="left">服务路由（API网关）</td>
<td align="left">Zuul等</td>
</tr>
<tr>
<td align="left">服务监控</td>
<td align="left">Zabbix、Naggios、Metrics、Spectator等</td>
</tr>
<tr>
<td align="left">全链路追踪</td>
<td align="left">Zipkin、Brave、Dapper等</td>
</tr>
<tr>
<td align="left">服务部署</td>
<td align="left">Docker、OpenStack、Kubernetes等</td>
</tr>
<tr>
<td align="left">数据流操作开发包</td>
<td align="left">SpringCloud Stream</td>
</tr>
<tr>
<td align="left">事件消息总线</td>
<td align="left">Spring Cloud Bus</td>
</tr>
<tr>
<td align="left">服务日志处理</td>
<td align="left">kibana、Logstash、Elasticsearch</td>
</tr>
</tbody></table>
<h4 id="Eureka-和-Zookeeper-都可以提供服务注册与发现的功能，它们有什么区别？"><a href="#Eureka-和-Zookeeper-都可以提供服务注册与发现的功能，它们有什么区别？" class="headerlink" title="Eureka 和 Zookeeper 都可以提供服务注册与发现的功能，它们有什么区别？"></a>Eureka 和 Zookeeper 都可以提供服务注册与发现的功能，它们有什么区别？</h4><p>最大的区别就是，Zookeeper它是有主分支的，并且主分支意外中断之后，是需要去其他的分支中选取主分支的，而这个过程中，服务是处于瘫痪的状态的，这在生产中是不能够容忍的，而Eureka的分支的等级都是相同的，可以做到随切随换。</p>
<h2 id="高并发架构"><a href="#高并发架构" class="headerlink" title="高并发架构"></a>高并发架构</h2><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="为什么使用消息队列？"><a href="#为什么使用消息队列？" class="headerlink" title="为什么使用消息队列？"></a>为什么使用消息队列？</h4><p>比较核心的有 3 个：<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p>
<h4 id="消息队列有什么优点和缺点？"><a href="#消息队列有什么优点和缺点？" class="headerlink" title="消息队列有什么优点和缺点？"></a>消息队列有什么优点和缺点？</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>就是在特殊场景下有其对应的好处，<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>系统复杂度提高：消息有没有丢失，有没有重复消费，顺序是否变化。</li>
<li>一致性问题：各个微服务中，有部分写库失败，该怎么解决。</li>
<li>系统可用性降低：系统引入的外部依赖越多，越容易挂掉。（如何保证消息队列的高可用）</li>
</ul>
<h4 id="Kafka、ActiveMQ、RabbitMQ、RocketMQ都有什么优点和缺点？"><a href="#Kafka、ActiveMQ、RabbitMQ、RocketMQ都有什么优点和缺点？" class="headerlink" title="Kafka、ActiveMQ、RabbitMQ、RocketMQ都有什么优点和缺点？"></a>Kafka、ActiveMQ、RabbitMQ、RocketMQ都有什么优点和缺点？</h4><table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">ActiveMQ</th>
<th align="left">RabbitMQ</th>
<th align="left">RocketMQ</th>
<th align="left">Kafka</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单机吞吐量</td>
<td align="left">万级，比 RocketMQ、Kafka 低一个数量级</td>
<td align="left">同 ActiveMQ</td>
<td align="left">10 万级，支撑高吞吐</td>
<td align="left">10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>
</tr>
<tr>
<td align="left">topic 数量对吞吐量的影响</td>
<td align="left"></td>
<td align="left"></td>
<td align="left">topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td>
<td align="left">topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td>
</tr>
<tr>
<td align="left">时效性</td>
<td align="left">ms 级</td>
<td align="left">微秒级，这是 RabbitMQ 的一大特点，延迟最低</td>
<td align="left">ms 级</td>
<td align="left">延迟在 ms 级以内</td>
</tr>
<tr>
<td align="left">可用性</td>
<td align="left">高，基于主从架构实现高可用</td>
<td align="left">同 ActiveMQ</td>
<td align="left">非常高，分布式架构</td>
<td align="left">非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>
</tr>
<tr>
<td align="left">消息可靠性</td>
<td align="left">有较低的概率丢失数据</td>
<td align="left">基本不丢</td>
<td align="left">经过参数优化配置，可以做到 0 丢失</td>
<td align="left">同 RocketMQ</td>
</tr>
<tr>
<td align="left">功能支持</td>
<td align="left">MQ 领域的功能极其完备</td>
<td align="left">基于 erlang 开发，并发能力很强，性能极好，延时很低</td>
<td align="left">MQ 功能较为完善，还是分布式的，扩展性好</td>
<td align="left">功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td>
</tr>
</tbody></table>
<h4 id="如何保证消息队列的高可用？"><a href="#如何保证消息队列的高可用？" class="headerlink" title="如何保证消息队列的高可用？"></a>如何保证消息队列的高可用？</h4><h5 id="RabbitMQ-的高可用性"><a href="#RabbitMQ-的高可用性" class="headerlink" title="RabbitMQ 的高可用性"></a>RabbitMQ 的高可用性</h5><ul>
<li>采用<strong>镜像集群模式（高可用性</strong>），这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</li>
<li><strong>如何开启这个镜像集群模式</strong>呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是<strong>镜像集群模式的策略</strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</li>
<li>缺点：1.性能开销大2.没有扩展性</li>
<li>实际上 RabbmitMQ 之类的，并不是分布式消息队列，它就是传统的消息队列，只不过提供了一些集群、HA(High Availability, 高可用性) 的机制而已，因为无论怎么玩儿，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个 queue 的完整数据。</li>
</ul>
<h5 id="Kafka-的高可用性"><a href="#Kafka-的高可用性" class="headerlink" title="Kafka 的高可用性"></a>Kafka 的高可用性</h5><ul>
<li>Kafka 一个最基本的架构认识：由多个 broker 组成，每个 broker 是一个节点；你创建一个 topic，这个 topic 可以划分为多个 partition，每个 partition 可以存在于不同的 broker 上，每个 partition 就放一部分数据。这就是<strong>天然的分布式消息队列</strong>，就是说一个 topic 的数据，是<strong>分散放在多个机器上的，每个机器就放一部分数据</strong>。</li>
<li>Kafka 0.8 以后，提供了 <strong>HA 机制</strong>，就是 replica（复制品） 副本机制。通过选取leader，进行副本的传递，从而来保证起高可用性。</li>
</ul>
<h4 id="如何保证消息不被重复消费？（如何保证消息消费的幂等性）"><a href="#如何保证消息不被重复消费？（如何保证消息消费的幂等性）" class="headerlink" title="如何保证消息不被重复消费？（如何保证消息消费的幂等性）"></a>如何保证消息不被重复消费？（如何保证消息消费的幂等性）</h4><h4 id="如何保证消息的可靠性传输？（如何处理消息丢失的问题）"><a href="#如何保证消息的可靠性传输？（如何处理消息丢失的问题）" class="headerlink" title="如何保证消息的可靠性传输？（如何处理消息丢失的问题）"></a>如何保证消息的可靠性传输？（如何处理消息丢失的问题）</h4><p>以RabbitMQ为例进行分析（不同的角色弄丢数据）</p>
<h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><ol>
<li>用 RabbitMQ 提供的事务功能，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ 事务<code>channel.txSelect</code>，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务<code>channel.txRollback</code>，然后重试发送消息；如果收到了消息，那么可以提交事务<code>channel.txCommit</code>。缺点：基本上<strong>吞吐量会下来，因为太耗性能</strong>。</li>
<li>开启 <code>confirm</code> 模式，在生产者那里设置开启 <code>confirm</code> 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</li>
</ol>
<p>区别：<strong>事务机制是同步的</strong>，会有阻塞发生影响性能。<code>confirm</code> 机制是<strong>异步</strong>的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p>
<h5 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h5><p>必须<strong>开启 RabbitMQ 的持久化</strong>，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，<strong>恢复之后会自动读取之前存储的数据</strong>，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，<strong>可能导致少量数据丢失</strong>，但是这个概率较小。<br>设置持久化有<strong>两个步骤</strong>：</p>
<ul>
<li>创建 queue 的时候将其设置为持久化<br>这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li>
<li>第二个是发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2<br>就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li>
</ul>
<p><strong>注意</strong>：持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 <code>ack</code>，你也是可以自己重发的。</p>
<h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><p>用 RabbitMQ 提供的 <code>ack</code> 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 <code>ack</code>，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 <code>ack</code> 一把。这样的话，如果你还没处理完，不就没有 <code>ack</code>了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p>
<h4 id="如何保证消息的顺序性？"><a href="#如何保证消息的顺序性？" class="headerlink" title="如何保证消息的顺序性？"></a>如何保证消息的顺序性？</h4><h4 id="如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？"><a href="#如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？" class="headerlink" title="如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？"></a>如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？</h4><p>分数据丢失和数据堆积来看</p>
<ul>
<li>数据堆积的话可以调动其他的服务器紧急扩容，恢复其速度，并且队列的信息数量和部署的 consumer要对应。</li>
<li>数据丢失的话，建议批量重导，或者夜间修复。</li>
</ul>
<h4 id="如果让你写一个消息队列，该如何进行架构设计啊？说一下你的思路。"><a href="#如果让你写一个消息队列，该如何进行架构设计啊？说一下你的思路。" class="headerlink" title="如果让你写一个消息队列，该如何进行架构设计啊？说一下你的思路。"></a>如果让你写一个消息队列，该如何进行架构设计啊？说一下你的思路。</h4><ol>
<li>中间件的可伸缩性，以此来应对高并发时的快速扩容，就可以增加吞吐量和容量。</li>
<li>做数据的持久化操作，落地磁盘。</li>
<li>零丢失方案机制</li>
<li>高可用保障机制</li>
</ol>
<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><h4 id="es-的分布式架构原理"><a href="#es-的分布式架构原理" class="headerlink" title="es 的分布式架构原理"></a>es 的分布式架构原理</h4><p>Elasticsearch 是一个兼有搜索引擎和NoSQL数据库功能的开源系统，基于Java/Lucene构建，可以用于全文搜索，结构化搜索以及近实时分析。可以说Lucene是当今最先进，最高效的全功能开源搜索引擎框架。说明：Lucene：只是一个框架，要充分利用它的功能，需要使用JAVA，并且在程序中集成Lucene，学习成本高，Lucene确实非常复杂。 Elasticsearch 是<strong>面向文档型数据库</strong>，这意味着它存储的是整个对象或者文档，它不但会存储它们，还会为他们建立索引，这样你就可以搜索他们了。</p>
<p><strong>核心概念：</strong></p>
<ul>
<li><p><strong>集群（Cluster):</strong> 包含一个或多个具有相同 cluster.name 的节点.</p>
</li>
<li><p><strong>节点(node):</strong> 一个节点是一个逻辑上独立的服务，可以存储数据，并参与集群的索引和搜索功能, 一个节点也有唯一的名字，群集通过节点名称进行管理和通信.</p>
</li>
<li><p><strong>索引（Index)：</strong> 索引与关系型数据库实例(Database)相当。索引只是一个 逻辑命名空间，它指向一个或多个分片(shards)，内部用Apache Lucene实现索引中数据的读写</p>
</li>
<li><p><strong>文档类型（Type）：</strong>相当于数据库中的table概念。每个文档在ElasticSearch中都必须设定它的类型。文档类型使得同一个索引中在存储结构不同文档时，只需要依据文档类型就可以找到对应的参数映射(Mapping)信息，方便文档的存取</p>
</li>
<li><p><strong>文档（Document) ：</strong>相当于数据库中的row， 是可以被索引的基本单位。例如，你可以有一个的客户文档，有一个产品文档，还有一个订单的文档。文档是以JSON格式存储的。在一个索引中，您可以存储多个的文档。请注意，虽然在一个索引中有多分文档，但这些文档的结构是一致的，并在第一次存储的时候指定, 文档属于一种 类型(type)，各种各样的类型存在于一个 索引 中。你也可以通过类比传统的关系数据库得到一些大致的相似之处：</p>
<p><code>关系数据库 ⇒ 数据库 ⇒ 表 ⇒ 行 ⇒ 列(Columns)Elasticsearch ⇒ 索引 ⇒ 类型 ⇒ 文档 ⇒ 字段(Fields)</code></p>
</li>
<li><p><strong>Mapping：</strong> 相当于数据库中的schema，用来约束字段的类型，不过 Elasticsearch 的 mapping 可以自动根据数据创建</p>
</li>
<li><p><strong>分片(shard) ：</strong>是 工作单元(worker unit) 底层的一员，用来分配集群中的数据，它只负责保存索引中所有数据的一小片。</p>
</li>
</ul>
<p><strong>Elasticsearch 核心知识图谱</strong></p>
<p><a href="https://ask.qcloudimg.com/http-save/yehe-1088682/q552cxsfre.jpeg?imageView2/2/w/1620" target="_blank" rel="noopener"><img data-src="https://ask.qcloudimg.com/http-save/yehe-1088682/q552cxsfre.jpeg?imageView2/2/w/1620" alt="img"></a></p>
<h4 id="es-是如何实现分布式"><a href="#es-是如何实现分布式" class="headerlink" title="es 是如何实现分布式"></a>es 是如何实现分布式</h4><p>ES实际上就是利用分片来实现分布式。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， ES会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。</p>
<p>在索引建立的时候就已经确定了主分片数，但是副本分片数可以随时修改。默认情况下，一个索引会有5个主分片，而其副本可以有任意数量。</p>
<p>主分片和副本分片的状态决定了集群的健康状态。每一个节点上都只会保存主分片或者其对应的一个副本分片，相同的副本分片不会存在于同一个节点中。如果集群中只有一个节点，则副本分片将不会被分配，此时集群健康状态为yellow，存在丢失数据的风险。</p>
<h4 id="es-写入数据的工作原理"><a href="#es-写入数据的工作原理" class="headerlink" title="es 写入数据的工作原理"></a>es 写入数据的工作原理</h4><p><strong>写入数据的过程</strong></p>
<ol>
<li>客户端选择一个node发送请求过去，这个node就是coordinating node (协调节点)</li>
<li>coordinating node，对document进行路由，将请求转发给对应的node</li>
<li>实际上的node上的primary shard处理请求，然后将数据同步到replica node</li>
<li>coordinating node，如果发现primary node和所有的replica node都搞定之后，就会返回请求到客户端</li>
</ol>
<p><strong>写入数据的底层原理</strong></p>
<ol>
<li>数据先写入到buffer里面，在buffer里面的数据时搜索不到的，同时将数据写入到translog日志文件之中</li>
<li>如果buffer快满了，或是一段时间之后，就会将buffer数据refresh到一个新的OS cache之中，然后每隔1秒，就会将OS cache的数据写入到segment file之中，但是如果每一秒钟没有新的数据到buffer之中，就会创建一个新的空的segment file，只要buffer中的数据被refresh到OS cache之中，就代表这个数据可以被搜索到了。当然可以通过restful api 和Java api，手动的执行一次refresh操作，就是手动的将buffer中的数据刷入到OS cache之中，让数据立马搜索到，只要数据被输入到OS cache之中，buffer的内容就会被清空了。同时进行的是，数据到shard之后，就会将数据写入到translog之中，每隔5秒将translog之中的数据持久化到磁盘之中</li>
<li>重复以上的操作，每次一条数据写入buffer，同时会写入一条日志到translog日志文件之中去，这个translog文件会不断的变大，当达到一定的程度之后，就会触发commit操作。</li>
<li>将一个commit point写入到磁盘文件，里面标识着这个commit point 对应的所有segment file</li>
<li>强行将OS cache 之中的数据都fsync到磁盘文件中去。<br>解释：translog的作用：在执行commit之前，所有的而数据都是停留在buffer或OS cache之中，无论buffer或OS cache都是内存，一旦这台机器死了，内存的数据就会丢失，所以需要将数据对应的操作写入一个专门的日志问价之中，一旦机器出现宕机，再次重启的时候，es会主动的读取translog之中的日志文件的数据，恢复到内存buffer和OS cache之中。</li>
<li>将现有的translog文件进行清空，然后在重新启动一个translog，此时commit就算是成功了，默认的是每隔30分钟进行一次commit，但是如果translog的文件过大，也会触发commit，整个commit过程就叫做一个flush操作，我们也可以通过ES API,手动执行flush操作，手动将OS cache 的数据fsync到磁盘上面去，记录一个commit point，清空translog文件<br>补充：其实translog的数据也是先写入到OS cache之中的，默认每隔5秒之中将数据刷新到硬盘中去，也就是说，可能有5秒的数据仅仅停留在buffer或者translog文件的OS cache中，如果此时机器挂了，会丢失5秒的数据，但是这样的性能比较好，我们也可以将每次的操作都必须是直接fsync到磁盘，但是性能会比较差。</li>
<li>如果时删除操作，commit的时候会产生一个.del文件，里面讲某个doc标记为delete状态，那么搜索的时候，会根据.del文件的状态，就知道那个文件被删除了。</li>
<li>如果时更新操作，就是讲原来的doc标识为delete状态，然后重新写入一条数据即可。</li>
<li>buffer每次更新一次，就会产生一个segment file 文件，所以在默认情况之下，就会产生很多的segment file 文件，将会定期执行merge操作</li>
<li>每次merge的时候，就会将多个segment file 文件进行合并为一个，同时将标记为delete的文件进行删除，然后将新的segment file 文件写入到磁盘，这里会写一个commit point，标识所有的新的segment file，然后打开新的segment file供搜索使用。</li>
</ol>
<p>总之，segment的四个核心概念，refresh，flush，translog、merge</p>
<h4 id="es-查询数据的工作原理"><a href="#es-查询数据的工作原理" class="headerlink" title="es 查询数据的工作原理"></a>es 查询数据的工作原理</h4><p><strong>es搜索数据过程</strong></p>
<p>查询，GET某一条的数据，写入某个document，这个document会自动给你分配一个全局的唯一ID，同时跟住这个ID进行hash路由到对应的primary shard上面去，当然也可以手动的设置ID</p>
<ol>
<li>客户端发送任何一个请求到任意一个node，成为coordinate node</li>
<li>coordinate node 对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮训算法，在primary shard 以及所有的replica中随机选择一个，让读请求负载均衡，</li>
<li>接受请求的node，返回document给coordinate note</li>
<li>coordinate node返回给客户端</li>
</ol>
<p><strong>搜索的底层原理</strong></p>
<p>查询过程大体上分为查询和取回这两个阶段，广播查询请求到所有相关分片，并将它们的响应整合成全局排序后的结果集合，这个结果集合会返回给客户端。</p>
<ol>
<li>查询阶段<ol>
<li>当一个节点接收到一个搜索请求，这这个节点就会变成协调节点，第一步就是将广播请求到搜索的每一个节点的分片拷贝，查询请求可以被某一个主分片或某一个副分片处理，协调节点将在之后的请求中轮训所有的分片拷贝来分摊负载。</li>
<li>每一个分片将会在本地构建一个优先级队列，如果客户端要求返回结果排序中从from 名开始的数量为size的结果集，每一个节点都会产生一个from+size大小的结果集，因此优先级队列的大小也就是from+size，分片仅仅是返回一个轻量级的结果给协调节点，包括结果级中的每一个文档的ID和进行排序所需要的信息。</li>
<li>协调节点将会将所有的结果进行汇总，并进行全局排序，最总得到排序结果。</li>
</ol>
</li>
<li>取值阶段<ol>
<li>查询过程得到的排序结果，标记处哪些文档是符合要求的，此时仍然需要获取这些文档返回给客户端</li>
<li>协调节点会确定实际需要的返回的文档，并向含有该文档的分片发送get请求，分片获取的文档返回给协调节点，协调节点将结果返回给客户端。</li>
</ol>
</li>
</ol>
<h4 id="底层的-lucene"><a href="#底层的-lucene" class="headerlink" title="底层的 lucene"></a>底层的 lucene</h4><p>简单来说，lucene 就是一个 jar 包，里面包含了封装好的各种建立倒排索引的算法代码。我们用 Java 开发的时候，引入 lucene jar，然后基于 lucene 的 api 去开发就可以了。</p>
<p>通过 lucene，我们可以将已有的数据建立索引，lucene 会在本地磁盘上面，给我们组织索引的数据结构。</p>
<h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>倒排索引（Inverted Index）也叫反向索引，有反向索引必有正向索引。通俗地来讲，正向索引是通过key找value，反向索引则是通过value找key。</p>
<p>其实就是直接PUT一个JSON的对象，这个对象有多个字段，在插入这些数据到索引的同时，Elasticsearch还为这些字段建立索引——倒排索引，因为Elasticsearch最核心功能是搜索。</p>
<p><strong>Term（单词）</strong>：一段文本经过分析器分析以后就会输出一串单词，这一个一个的就叫做Term（直译为：单词）</p>
<p><strong>Term Dictionary（单词字典）</strong>：顾名思义，它里面维护的是Term，可以理解为Term的集合</p>
<p><strong>Term Index（单词索引）</strong>：为了更快的找到某个单词，我们为单词建立索引</p>
<p><strong>Posting List（倒排列表）</strong>：倒排列表记录了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息，每条记录称为一个倒排项(Posting)。根据倒排列表，即可获知哪些文档包含某个单词。（PS：实际的倒排列表中并不只是存了文档ID这么简单，还有一些其它的信息，比如：词频（Term出现的次数）、偏移量（offset）等，可以想象成是Python中的元组，或者Java中的对象）</p>
<p>（PS：如果类比现代汉语词典的话，那么Term就相当于词语，Term Dictionary相当于汉语词典本身，Term Index相当于词典的目录索引）</p>
<p>我们知道，每个文档都有一个ID，如果插入的时候没有指定的话，Elasticsearch会自动生成一个，因此ID字段就不多说了.</p>
<h4 id="es-在数据量很大的情况下（数十亿级别）如何提高查询效率"><a href="#es-在数据量很大的情况下（数十亿级别）如何提高查询效率" class="headerlink" title="es 在数据量很大的情况下（数十亿级别）如何提高查询效率"></a>es 在数据量很大的情况下（数十亿级别）如何提高查询效率</h4><p><strong>性能优化的杀手锏——filesystem cache</strong></p>
<p>你往 es 里写的数据，实际上都写到磁盘文件里去了，<strong>查询的时候</strong>，操作系统会将磁盘文件里的数据自动缓存到 <code>filesystem cache</code> 里面去。</p>
<p><a href="https://github.com/doocs/advanced-java/blob/master/images/es-search-process.png" target="_blank" rel="noopener"><img data-src="https://github.com/doocs/advanced-java/raw/master/images/es-search-process.png" alt="es-search-process"></a></p>
<p>es 的搜索引擎严重依赖于底层的 <code>filesystem cache</code>，你如果给 <code>filesystem cache</code> 更多的内存，尽量让内存可以容纳所有的 <code>idx segment file</code>索引数据文件，那么你搜索的时候就基本都是走内存的，性能会非常高。</p>
<p>性能差距究竟可以有多大？我们之前很多的测试和压测，如果走磁盘一般肯定上秒，搜索性能绝对是秒级别的，1秒、5秒、10秒。但如果是走 <code>filesystem cache</code>，是走纯内存的，那么一般来说性能比走磁盘要高一个数量级，基本上就是毫秒级的，从几毫秒到几百毫秒不等。</p>
<p>这里有个真实的案例。某个公司 es 节点有 3 台机器，每台机器看起来内存很多，64G，总内存就是 <code>64 * 3 = 192G</code>。每台机器给 es jvm heap 是 <code>32G</code>，那么剩下来留给 <code>filesystem cache</code> 的就是每台机器才 <code>32G</code>，总共集群里给 <code>filesystem cache</code> 的就是 <code>32 * 3 = 96G</code> 内存。而此时，整个磁盘上索引数据文件，在 3 台机器上一共占用了 <code>1T</code> 的磁盘容量，es 数据量是 <code>1T</code>，那么每台机器的数据量是 <code>300G</code>。这样性能好吗？ <code>filesystem cache</code> 的内存才 100G，十分之一的数据可以放内存，其他的都在磁盘，然后你执行搜索操作，大部分操作都是走磁盘，性能肯定差。</p>
<p>归根结底，你要让 es 性能要好，最佳的情况下，就是你的机器的内存，至少可以容纳你的总数据量的一半。</p>
<p>根据我们自己的生产环境实践经验，最佳的情况下，是仅仅在 es 中就存少量的数据，就是你要<strong>用来搜索的那些索引</strong>，如果内存留给 <code>filesystem cache</code> 的是 100G，那么你就将索引数据控制在 <code>100G</code> 以内，这样的话，你的数据几乎全部走内存来搜索，性能非常之高，一般可以在 1 秒以内。</p>
<p>比如说你现在有一行数据。<code>id,name,age ....</code> 30 个字段。但是你现在搜索，只需要根据 <code>id,name,age</code> 三个字段来搜索。如果你傻乎乎往 es 里写入一行数据所有的字段，就会导致说 <code>90%</code> 的数据是不用来搜索的，结果硬是占据了 es 机器上的 <code>filesystem cache</code> 的空间，单条数据的数据量越大，就会导致 <code>filesystem cahce</code> 能缓存的数据就越少。其实，仅仅写入 es 中要用来检索的<strong>少数几个字段</strong>就可以了，比如说就写入 es <code>id,name,age</code> 三个字段，然后你可以把其他的字段数据存在 mysql/hbase 里，我们一般是建议用 <code>es + hbase</code> 这么一个架构。</p>
<p>hbase 的特点是<strong>适用于海量数据的在线存储</strong>，就是对 hbase 可以写入海量数据，但是不要做复杂的搜索，做很简单的一些根据 id 或者范围进行查询的这么一个操作就可以了。从 es 中根据 name 和 age 去搜索，拿到的结果可能就 20 个 <code>doc id</code>，然后根据 <code>doc id</code> 到 hbase 里去查询每个 <code>doc id</code> 对应的<strong>完整的数据</strong>，给查出来，再返回给前端。</p>
<p>写入 es 的数据最好小于等于，或者是略微大于 es 的 filesystem cache 的内存容量。然后你从 es 检索可能就花费 20ms，然后再根据 es 返回的 id 去 hbase 里查询，查 20 条数据，可能也就耗费个 30ms，可能你原来那么玩儿，1T 数据都放 es，会每次查询都是 5~10s，现在可能性能就会很高，每次查询就是 50ms。</p>
<p><strong>数据预热</strong></p>
<p>假如说，哪怕是你就按照上述的方案去做了，es 集群中每个机器写入的数据量还是超过了 <code>filesystem cache</code> 一倍，比如说你写入一台机器 60G 数据，结果 <code>filesystem cache</code> 就 30G，还是有 30G 数据留在了磁盘上。其实可以做<strong>数据预热</strong>。</p>
<p>举个例子，拿微博来说，你可以把一些大V，平时看的人很多的数据，你自己提前后台搞个系统，每隔一会儿，自己的后台系统去搜索一下热数据，刷到 <code>filesystem cache</code> 里去，后面用户实际上来看这个热数据的时候，他们就是直接从内存里搜索了，很快。</p>
<p>或者是电商，你可以将平时查看最多的一些商品，比如说 iphone 8，热数据提前后台搞个程序，每隔 1 分钟自己主动访问一次，刷到 <code>filesystem cache</code> 里去。</p>
<p>对于那些你觉得比较热的、经常会有人访问的数据，最好<strong>做一个专门的缓存预热子系统</strong>，就是对热数据每隔一段时间，就提前访问一下，让数据进入 <code>filesystem cache</code> 里面去。这样下次别人访问的时候，性能一定会好很多。</p>
<p><strong>冷热分离</strong></p>
<p>es 可以做类似于 mysql 的水平拆分，就是说将大量的访问很少、频率很低的数据，单独写一个索引，然后将访问很频繁的热数据单独写一个索引。最好是将<strong>冷数据写入一个索引中，然后热数据写入另外一个索引中</strong>，这样可以确保热数据在被预热之后，尽量都让他们留在 <code>filesystem os cache</code> 里，<strong>别让冷数据给冲刷掉</strong>。</p>
<p>你看，假设你有 6 台机器，2 个索引，一个放冷数据，一个放热数据，每个索引 3 个 shard。3 台机器放热数据 index，另外 3 台机器放冷数据 index。然后这样的话，你大量的时间是在访问热数据 index，热数据可能就占总数据量的 10%，此时数据量很少，几乎全都保留在 <code>filesystem cache</code> 里面了，就可以确保热数据的访问性能是很高的。但是对于冷数据而言，是在别的 index 里的，跟热数据 index 不在相同的机器上，大家互相之间都没什么联系了。如果有人访问冷数据，可能大量数据是在磁盘上的，此时性能差点，就 10% 的人去访问冷数据，90% 的人在访问热数据，也无所谓了。</p>
<p><strong>document 模型设计</strong></p>
<p>对于 MySQL，我们经常有一些复杂的关联查询。在 es 里该怎么玩儿，es 里面的复杂的关联查询尽量别用，一旦用了性能一般都不太好。</p>
<p>最好是先在 Java 系统里就完成关联，将关联好的数据直接写入 es 中。搜索的时候，就不需要利用 es 的搜索语法来完成 join 之类的关联搜索了。</p>
<p>document 模型设计是非常重要的，很多操作，不要在搜索的时候才想去执行各种复杂的乱七八糟的操作。es 能支持的操作就那么多，不要考虑用 es 做一些它不好操作的事情。如果真的有那种操作，尽量在 document 模型设计的时候，写入的时候就完成。另外对于一些太复杂的操作，比如 join/nested/parent-child 搜索都要尽量避免，性能都很差的。</p>
<p><strong>分页性能优化</strong></p>
<p>es 的分页是较坑的，为啥呢？举个例子吧，假如你每页是 10 条数据，你现在要查询第 100 页，实际上是会把每个 shard 上存储的前 1000 条数据都查到一个协调节点上，如果你有个 5 个 shard，那么就有 5000 条数据，接着协调节点对这 5000 条数据进行一些合并、处理，再获取到最终第 100 页的 10 条数据。</p>
<p>分布式的，你要查第 100 页的 10 条数据，不可能说从 5 个 shard，每个 shard 就查 2 条数据，最后到协调节点合并成 10 条数据吧？你<strong>必须</strong>得从每个 shard 都查 1000 条数据过来，然后根据你的需求进行排序、筛选等等操作，最后再次分页，拿到里面第 100 页的数据。你翻页的时候，翻的越深，每个 shard 返回的数据就越多，而且协调节点处理的时间越长，非常坑爹。所以用 es 做分页的时候，你会发现越翻到后面，就越是慢。</p>
<p>我们之前也是遇到过这个问题，用 es 作分页，前几页就几十毫秒，翻到 10 页或者几十页的时候，基本上就要 5~10 秒才能查出来一页数据了。</p>
<p>有什么解决方案吗？</p>
<p><strong>不允许深度分页（默认深度分页性能很差）</strong></p>
<p>跟产品经理说，你系统不允许翻那么深的页，默认翻的越深，性能就越差。</p>
<p><strong>类似于 app 里的推荐商品不断下拉出来一页一页的</strong></p>
<p>类似于微博中，下拉刷微博，刷出来一页一页的，你可以用 <code>scroll api</code>，关于如何使用，自行上网搜索。</p>
<p>scroll 会一次性给你生成<strong>所有数据的一个快照</strong>，然后每次滑动向后翻页就是通过<strong>游标</strong> <code>scroll_id</code> 移动，获取下一页下一页这样子，性能会比上面说的那种分页性能要高很多很多，基本上都是毫秒级的。</p>
<p>但是，唯一的一点就是，这个适合于那种类似微博下拉翻页的，<strong>不能随意跳到任何一页的场景</strong>。也就是说，你不能先进入第 10 页，然后去第 120 页，然后又回到第 58 页，不能随意乱跳页。所以现在很多产品，都是不允许你随意翻页的，app，也有一些网站，做的就是你只能往下拉，一页一页的翻。</p>
<p>初始化时必须指定 <code>scroll</code> 参数，告诉 es 要保存此次搜索的上下文多长时间。你需要确保用户不会持续不断翻页翻几个小时，否则可能因为超时而失败。</p>
<p>除了用 <code>scroll api</code>，你也可以用 <code>search_after</code> 来做，<code>search_after</code> 的思想是使用前一页的结果来帮助检索下一页的数据，显然，这种方式也不允许你随意翻页，你只能一页页往后翻。初始化时，需要使用一个唯一值的字段作为 sort 字段。</p>
<h4 id="es-生产集群的部署架构"><a href="#es-生产集群的部署架构" class="headerlink" title="es 生产集群的部署架构"></a>es 生产集群的部署架构</h4><ul>
<li>es 生产集群我们部署了 5 台机器，每台机器是 6 核 64G 的，集群总内存是 320G。（与下面的一起为回答）</li>
</ul>
<h4 id="es每个索引的数据量大概有多少？每个索引大概有多少个分片？"><a href="#es每个索引的数据量大概有多少？每个索引大概有多少个分片？" class="headerlink" title="es每个索引的数据量大概有多少？每个索引大概有多少个分片？"></a>es每个索引的数据量大概有多少？每个索引大概有多少个分片？</h4><ul>
<li>我们 es 集群的日增量数据大概是 2000 万条，每天日增量数据大概是 500MB，每月增量数据大概是 6 亿，15G。目前系统已经运行了几个月，现在 es 集群里数据总量大概是 100G 左右。</li>
<li>目前线上有 5 个索引（这个结合你们自己业务来，看看自己有哪些数据可以放 es 的），每个索引的数据量大概是 20G，所以这个数据量之内，我们每个索引分配的是 8 个 shard，比默认的 5 个 shard 多了 3 个 shard</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><h4 id="为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）"><a href="#为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）" class="headerlink" title="为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）"></a>为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）</h4><p><strong>用户请求量太大</strong></p>
<p>因为单服务器TPS，内存，IO都是有限的。 解决方法：分散请求到多个服务器上； 其实用户请求和执行一个sql查询是本质是一样的，都是请求一个资源，只是用户请求还会经过网关，路由，http服务器等。</p>
<p><strong>单库太大</strong></p>
<p>单个数据库处理能力有限；单库所在服务器上磁盘空间不足；单库上操作的IO瓶颈 解决方法：切分成更多更小的库</p>
<p><strong>单表太大</strong></p>
<p>CRUD都成问题；索引膨胀，查询超时 解决方法：切分成多个数据集更小的表。</p>
<table>
<thead>
<tr>
<th align="left">#</th>
<th align="left">分库分表前</th>
<th align="left">分库分表后</th>
</tr>
</thead>
<tbody><tr>
<td align="left">并发支撑情况</td>
<td align="left">MySQL 单机部署，扛不住高并发</td>
<td align="left">MySQL从单机到多机，能承受的并发增加了多倍</td>
</tr>
<tr>
<td align="left">磁盘使用情况</td>
<td align="left">MySQL 单机磁盘容量几乎撑满</td>
<td align="left">拆分为多个库，数据库服务器磁盘使用率大大降低</td>
</tr>
<tr>
<td align="left">SQL 执行性能</td>
<td align="left">单表数据量太大，SQL 越跑越慢</td>
<td align="left">单表数据量减少，SQL 执行效率明显提升</td>
</tr>
</tbody></table>
<h4 id="用过哪些分库分表中间件"><a href="#用过哪些分库分表中间件" class="headerlink" title="用过哪些分库分表中间件"></a>用过哪些分库分表中间件</h4><ul>
<li>Cobar</li>
<li>TDDL</li>
<li>Atlas</li>
<li>Sharding-jdbc</li>
<li>Mycat</li>
</ul>
<h4 id="不同的分库分表中间件都有什么优点和缺点"><a href="#不同的分库分表中间件都有什么优点和缺点" class="headerlink" title="不同的分库分表中间件都有什么优点和缺点"></a>不同的分库分表中间件都有什么优点和缺点</h4><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Cobar</th>
<th align="left">Mycat</th>
<th align="left">Cobar-client</th>
<th align="left">TDDL</th>
<th align="left">Sharding-JDBC</th>
</tr>
</thead>
<tbody><tr>
<td align="left">分库</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">未开源</td>
<td align="left">有</td>
</tr>
<tr>
<td align="left">分表</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">未开源</td>
<td align="left">有</td>
</tr>
<tr>
<td align="left">中间层</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left">ORM支持</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">任意</td>
<td align="left">任意</td>
</tr>
<tr>
<td align="left">数据库支持</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">任意</td>
<td align="left">任意</td>
</tr>
<tr>
<td align="left">异构语言</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">仅Java</td>
<td align="left">仅Java</td>
</tr>
<tr>
<td align="left">外部依赖</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">Diamond</td>
<td align="left">无</td>
</tr>
</tbody></table>
<h4 id="具体是如何对数据库如何进行垂直拆分或水平拆分的？"><a href="#具体是如何对数据库如何进行垂直拆分或水平拆分的？" class="headerlink" title="具体是如何对数据库如何进行垂直拆分或水平拆分的？"></a>具体是如何对数据库如何进行垂直拆分或水平拆分的？</h4><h4 id="有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？"><a href="#有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？" class="headerlink" title="有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？"></a>有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表<strong>动态切换</strong>到分库分表上？</h4><h4 id="如何设计可以动态扩容缩容的分库分表方案"><a href="#如何设计可以动态扩容缩容的分库分表方案" class="headerlink" title="如何设计可以动态扩容缩容的分库分表方案"></a>如何设计可以动态扩容缩容的分库分表方案</h4><h4 id="分库分表之后，id-主键如何处理"><a href="#分库分表之后，id-主键如何处理" class="headerlink" title="分库分表之后，id 主键如何处理"></a>分库分表之后，id 主键如何处理</h4><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><h4 id="如何实现-MySQL-的读写分离？"><a href="#如何实现-MySQL-的读写分离？" class="headerlink" title="如何实现 MySQL 的读写分离？"></a>如何实现 MySQL 的读写分离？</h4><p>其实很简单，就是基于主从复制架构，简单来说，就搞一个主库，挂多个从库，然后我们就单单只是写主库，然后主库会自动把数据给同步到从库上去。</p>
<h4 id="MySQL-主从复制原理的是啥？"><a href="#MySQL-主从复制原理的是啥？" class="headerlink" title="MySQL 主从复制原理的是啥？"></a>MySQL 主从复制原理的是啥？</h4><p>主库将变更写入 binlog 日志，然后从库连接到主库之后，从库有一个 IO 线程，将主库的 binlog 日志拷贝到自己本地，写入一个 relay 中继日志中。接着从库中有一个 SQL 线程会从中继日志读取 binlog，然后执行 binlog 日志中的内容，也就是在自己本地再次执行一遍 SQL，这样就可以保证自己跟主库的数据是一样的。</p>
<p>从库同步主库数据的过程是<strong>串行化</strong>的，也就是说主库上并行的操作，在从库上会串行执行。所以这就是一个非常重要的点了，由于从库从主库拷贝日志以及串行执行 SQL 的特点，在高并发场景下，从库的数据一定会比主库慢一些，是<strong>有延时</strong>的。所以经常出现，刚写入主库的数据可能是读不到的，要过几十毫秒，甚至几百毫秒才能读取到。</p>
<p>MySQL 实际上在这一块有两个机制，一个是<strong>半同步复制</strong>，用来解决主库数据丢失问题；一个是<strong>并行复制</strong>，用来解决主从同步延时问题。</p>
<p><strong>半同步复制</strong>：也叫 <code>semi-sync</code> 复制，指的就是主库写入 binlog 日志之后，就会将<strong>强制</strong>此时立即将数据同步到从库，从库将日志写入自己本地的 relay log 之后，接着会返回一个 ack 给主库，主库接收到<strong>至少一个从库</strong>的 ack 之后才会认为写操作完成了。</p>
<p><strong>并行复制</strong>：指的是从库开启多个线程，并行读取 relay log 中不同库的日志，然后<strong>并行重放不同库的日志</strong>，这是库级别的并行。</p>
<h4 id="MySQL-主从同步延时问题"><a href="#MySQL-主从同步延时问题" class="headerlink" title="MySQL 主从同步延时问题"></a>MySQL 主从同步延时问题</h4><ul>
<li>分库，将一个主库拆分为多个主库，每个主库的写并发就减少了几倍，此时主从延迟可以忽略不计。</li>
<li>打开 MySQL 支持的并行复制，多个库并行复制。如果说某个库的写入并发就是特别高，单库写并发达到了 2000/s，并行复制还是没意义。</li>
<li>重写代码，写代码的同学，要慎重，插入数据时立马查询可能查不到。</li>
<li>如果确实是存在必须先插入，立马要求就查询到，然后立马就要反过来执行一些操作，对这个查询<strong>设置直连主库</strong>。<strong>不推荐</strong>这种方法，你要是这么搞，读写分离的意义就丧失了。</li>
</ul>
<h3 id="高并发系统"><a href="#高并发系统" class="headerlink" title="高并发系统"></a>高并发系统</h3><h4 id="如何设计一个高并发的系统"><a href="#如何设计一个高并发的系统" class="headerlink" title="如何设计一个高并发的系统"></a>如何设计一个高并发的系统</h4><p>可以分为以下 6 点：</p>
<ul>
<li>系统拆分</li>
<li>缓存</li>
<li>MQ</li>
<li>分库分表</li>
<li>读写分离</li>
<li>ElasticSearch</li>
</ul>
<p><a href="https://github.com/doocs/advanced-java/blob/master/images/high-concurrency-system-design.png" target="_blank" rel="noopener"><img data-src="https://github.com/doocs/advanced-java/raw/master/images/high-concurrency-system-design.png" alt="high-concurrency-system-design"></a></p>
<h5 id="系统拆分"><a href="#系统拆分" class="headerlink" title="系统拆分"></a>系统拆分</h5><p>将一个系统拆分为多个子系统，用 dubbo 来搞。然后每个系统连一个数据库，这样本来就一个库，现在多个数据库，不也可以扛高并发么。</p>
<h5 id="缓存-1"><a href="#缓存-1" class="headerlink" title="缓存"></a>缓存</h5><p>缓存，必须得用缓存。大部分的高并发场景，都是<strong>读多写少</strong>，那你完全可以在数据库和缓存里都写一份，然后读的时候大量走缓存不就得了。毕竟人家 redis 轻轻松松单机几万的并发。所以你可以考虑考虑你的项目里，那些承载主要请求的<strong>读场景，怎么用缓存来抗高并发</strong>。</p>
<h5 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h5><p>MQ，必须得用 MQ。可能你还是会出现高并发写的场景，比如说一个业务操作里要频繁搞数据库几十次，增删改增删改，疯了。那高并发绝对搞挂你的系统，你要是用 redis 来承载写那肯定不行，人家是缓存，数据随时就被 LRU 了，数据格式还无比简单，没有事务支持。所以该用 mysql 还得用 mysql 啊。那你咋办？用 MQ 吧，大量的写请求灌入 MQ 里，排队慢慢玩儿，<strong>后边系统消费后慢慢写</strong>，控制在 mysql 承载范围之内。所以你得考虑考虑你的项目里，那些承载复杂写业务逻辑的场景里，如何用 MQ 来异步写，提升并发性。MQ 单机抗几万并发也是 ok 的，这个之前还特意说过。</p>
<h5 id="分库分表-1"><a href="#分库分表-1" class="headerlink" title="分库分表"></a>分库分表</h5><p>分库分表，可能到了最后数据库层面还是免不了抗高并发的要求，好吧，那么就将一个数据库拆分为多个库，多个库来扛更高的并发；然后将一个表<strong>拆分为多个表</strong>，每个表的数据量保持少一点，提高 sql 跑的性能。</p>
<h5 id="读写分离-1"><a href="#读写分离-1" class="headerlink" title="读写分离"></a>读写分离</h5><p>读写分离，这个就是说大部分时候数据库可能也是读多写少，没必要所有请求都集中在一个库上吧，可以搞个主从架构，<strong>主库写</strong>入，<strong>从库读</strong>取，搞一个读写分离。<strong>读流量太多</strong>的时候，还可以<strong>加更多的从库</strong>。</p>
<h5 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h5><p>Elasticsearch，简称 es。es 是分布式的，可以随便扩容，分布式天然就可以支撑高并发，因为动不动就可以扩容加机器来扛更高的并发。那么一些比较简单的查询、统计类的操作，可以考虑用 es 来承载，还有一些全文搜索类的操作，也可以考虑用 es 来承载。</p>
<p>上面的 6 点，基本就是高并发系统肯定要干的一些事儿，大家可以仔细结合之前讲过的知识考虑一下，到时候你可以系统的把这块阐述一下，然后每个部分要注意哪些问题，之前都讲过了，你都可以阐述阐述，表明你对这块是有点积累的。</p>
<p>说句实话，毕竟你真正厉害的一点，不是在于弄明白一些技术，或者大概知道一个高并发系统应该长什么样？其实实际上在真正的复杂的业务系统里，做高并发要远远比上面提到的点要复杂几十倍到上百倍。你需要考虑：哪些需要分库分表，哪些不需要分库分表，单库单表跟分库分表如何 join，哪些数据要放到缓存里去，放哪些数据才可以扛住高并发的请求，你需要完成对一个复杂业务系统的分析之后，然后逐步逐步的加入高并发的系统架构的改造，这个过程是无比复杂的，一旦做过一次，并且做好了，你在这个市场上就会非常的吃香。</p>
<p>其实大部分公司，真正看重的，不是说你掌握高并发相关的一些基本的架构知识，架构中的一些技术，RocketMQ、Kafka、Redis、Elasticsearch，高并发这一块，你了解了，也只能是次一等的人才。对一个有几十万行代码的复杂的分布式系统，一步一步架构、设计以及实践过高并发架构的人，这个经验是难能可贵的。</p>
<h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="Zookeeper-都有哪些应用场景？"><a href="#Zookeeper-都有哪些应用场景？" class="headerlink" title="Zookeeper 都有哪些应用场景？"></a>Zookeeper 都有哪些应用场景？</h4><h5 id="分布式协调"><a href="#分布式协调" class="headerlink" title="分布式协调"></a>分布式协调</h5><h5 id="分布式锁-1"><a href="#分布式锁-1" class="headerlink" title="分布式锁"></a>分布式锁</h5><h5 id="元数据-配置信息管理"><a href="#元数据-配置信息管理" class="headerlink" title="元数据/配置信息管理"></a>元数据/配置信息管理</h5><h5 id="HA高可用性"><a href="#HA高可用性" class="headerlink" title="HA高可用性"></a>HA高可用性</h5><h4 id="使用-Redis-如何设计分布式锁？"><a href="#使用-Redis-如何设计分布式锁？" class="headerlink" title="使用 Redis 如何设计分布式锁？"></a>使用 Redis 如何设计分布式锁？</h4><h4 id="使用-Zookeeper-来设计分布式锁可以吗？以上两种分布式锁的实现方式哪种效率比较高？"><a href="#使用-Zookeeper-来设计分布式锁可以吗？以上两种分布式锁的实现方式哪种效率比较高？" class="headerlink" title="使用 Zookeeper 来设计分布式锁可以吗？以上两种分布式锁的实现方式哪种效率比较高？"></a>使用 Zookeeper 来设计分布式锁可以吗？以上两种分布式锁的实现方式哪种效率比较高？</h4><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h3 id="分布式会话"><a href="#分布式会话" class="headerlink" title="分布式会话"></a>分布式会话</h3><h3 id="系统拆分-1"><a href="#系统拆分-1" class="headerlink" title="系统拆分"></a>系统拆分</h3><h3 id="分布式服务框架"><a href="#分布式服务框架" class="headerlink" title="分布式服务框架"></a>分布式服务框架</h3><h2 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h2>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合类的相关转换</title>
    <url>/2019/08/14/java%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E7%9B%B8%E5%85%B3%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>下面的的案例，基本上是以代码为主，文字的描述较少，后期有时间会继续添加。</p>
</blockquote>
<h2 id="ArrayToList"><a href="#ArrayToList" class="headerlink" title="ArrayToList"></a>ArrayToList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ArrayToList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ArrayToList"</span>);</span><br><span class="line">    Object[] objects = <span class="keyword">new</span> Object[]&#123;<span class="string">"纽约"</span>, <span class="string">"伦敦"</span>, <span class="string">"法兰克福"</span>, <span class="string">"东京"</span>, <span class="string">"多伦多"</span>&#125;;</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(objects));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    System.out.println(<span class="string">"使用java8特性的方法"</span>);</span><br><span class="line">    List&lt;Object&gt; list1 = Stream.of(objects).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="ArrayToMap"><a href="#ArrayToMap" class="headerlink" title="ArrayToMap"></a>ArrayToMap</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ArrayToMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ArrayToMap"</span>);</span><br><span class="line">    Object[] objects = <span class="keyword">new</span> Object[]&#123;<span class="string">"纽约"</span>, <span class="string">"伦敦"</span>, <span class="string">"法兰克福"</span>, <span class="string">"东京"</span>, <span class="string">"多伦多"</span>&#125;;</span><br><span class="line">    Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (Object o : objects) &#123;</span><br><span class="line">        map.put(i++, o);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ArrayToSet"><a href="#ArrayToSet" class="headerlink" title="ArrayToSet"></a>ArrayToSet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ArrayToSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ArrayToMap"</span>);</span><br><span class="line">    Object[] objects = <span class="keyword">new</span> Object[]&#123;<span class="string">"纽约"</span>, <span class="string">"伦敦"</span>, <span class="string">"法兰克福"</span>, <span class="string">"东京"</span>, <span class="string">"多伦多"</span>&#125;;</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    Set&lt;Object&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(objects));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    System.out.println(<span class="string">"使用java8特性的方法"</span>);</span><br><span class="line">    Set&lt;Object&gt; set1 = Stream.of(objects).collect(Collectors.toSet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ListToArray"><a href="#ListToArray" class="headerlink" title="ListToArray"></a>ListToArray</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListToArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ListToArray"</span>);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"布朗克斯"</span>);</span><br><span class="line">    list.add(<span class="string">"布鲁克林"</span>);</span><br><span class="line">    list.add(<span class="string">"曼哈顿"</span>);</span><br><span class="line">    list.add(<span class="string">"皇后区"</span>);</span><br><span class="line">    list.add(<span class="string">"斯塔滕岛"</span>);</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    String[] strings = list.toArray(<span class="keyword">new</span> String[list.size()]);</span><br><span class="line">    System.out.println(Arrays.toString(strings));</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    System.out.println(<span class="string">"使用java8特性的方法"</span>);</span><br><span class="line">    String[] strings1 = list.stream().toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">    System.out.println(Arrays.toString(strings1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ListToMap"><a href="#ListToMap" class="headerlink" title="ListToMap"></a>ListToMap</h2><p>新建一个Book类（model）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer releaseYear;</span><br><span class="line">    <span class="keyword">private</span> String isbn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", releaseYear="</span> + releaseYear +</span><br><span class="line">                <span class="string">", isbn='"</span> + isbn + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name, <span class="keyword">int</span> releaseYear, String isbn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.releaseYear = releaseYear;</span><br><span class="line">        <span class="keyword">this</span>.isbn = isbn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getReleaseYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> releaseYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReleaseYear</span><span class="params">(<span class="keyword">int</span> releaseYear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.releaseYear = releaseYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIsbn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isbn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsbn</span><span class="params">(String isbn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isbn = isbn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListToMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ListToMap"</span>);</span><br><span class="line">    Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"布朗克斯"</span>);</span><br><span class="line">    list.add(<span class="string">"布鲁克林"</span>);</span><br><span class="line">    list.add(<span class="string">"曼哈顿"</span>);</span><br><span class="line">    list.add(<span class="string">"皇后区"</span>);</span><br><span class="line">    list.add(<span class="string">"斯塔滕岛"</span>);</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        map.put(<span class="string">"第"</span> + i + <span class="number">1</span> + <span class="string">"区"</span>, list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    List&lt;Book&gt; bookList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    bookList.add(<span class="keyword">new</span> Book(<span class="string">"平凡的世界"</span>, <span class="number">2004</span>, <span class="string">"9787020048045"</span>));</span><br><span class="line">    bookList.add(<span class="keyword">new</span> Book(<span class="string">"战争与和平"</span>, <span class="number">1989</span>, <span class="string">"9787020014071"</span>));</span><br><span class="line">    bookList.add(<span class="keyword">new</span> Book(<span class="string">"百年孤独"</span>, <span class="number">1775</span>, <span class="string">"9787215069657"</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bookList.size(); i++) &#123;</span><br><span class="line">        System.out.println(bookList.get(i).toString());</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Integer&gt; map1 = bookList.stream().collect(Collectors.toMap(Book::getName, Book::getReleaseYear));</span><br><span class="line">    System.out.println(map1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ListToSet"><a href="#ListToSet" class="headerlink" title="ListToSet"></a>ListToSet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListToSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ListToSet"</span>);</span><br><span class="line">    Set&lt;Object&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"布朗克斯"</span>);</span><br><span class="line">    list.add(<span class="string">"布鲁克林"</span>);</span><br><span class="line">    list.add(<span class="string">"曼哈顿"</span>);</span><br><span class="line">    list.add(<span class="string">"皇后区"</span>);</span><br><span class="line">    list.add(<span class="string">"斯塔滕岛"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object i : list) &#123;</span><br><span class="line">        set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MapToArray"><a href="#MapToArray" class="headerlink" title="MapToArray"></a>MapToArray</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MapToArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MapToArray"</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"甘肃"</span>, <span class="string">"兰州"</span>);</span><br><span class="line">    map.put(<span class="string">"陕西"</span>, <span class="string">"西安"</span>);</span><br><span class="line">    map.put(<span class="string">"新疆"</span>, <span class="string">"乌鲁木齐"</span>);</span><br><span class="line">    map.put(<span class="string">"青海"</span>, <span class="string">"西宁"</span>);</span><br><span class="line">    map.put(<span class="string">"宁夏"</span>, <span class="string">"银川"</span>);</span><br><span class="line">    Object[][] strings = <span class="keyword">new</span> Object[map.size()][<span class="number">2</span>];</span><br><span class="line">    Iterator iterator = map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">        Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class="line">        strings[i][<span class="number">0</span>] = entry.getKey();</span><br><span class="line">        strings[i][<span class="number">1</span>] = entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Object[] objects : strings) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object objects1 : objects) &#123;</span><br><span class="line">            System.out.print(objects1 + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MapToList"><a href="#MapToList" class="headerlink" title="MapToList"></a>MapToList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MapToList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MapToList"</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"甘肃"</span>, <span class="string">"兰州"</span>);</span><br><span class="line">    map.put(<span class="string">"陕西"</span>, <span class="string">"西安"</span>);</span><br><span class="line">    map.put(<span class="string">"新疆"</span>, <span class="string">"乌鲁木齐"</span>);</span><br><span class="line">    map.put(<span class="string">"青海"</span>, <span class="string">"西宁"</span>);</span><br><span class="line">    map.put(<span class="string">"宁夏"</span>, <span class="string">"银川"</span>);</span><br><span class="line">    List&lt;Object&gt; objects = <span class="keyword">new</span> ArrayList&lt;&gt;(map.keySet());</span><br><span class="line">    System.out.println(objects);</span><br><span class="line">    <span class="comment">//list里面放置list</span></span><br><span class="line">    List&lt;List&lt;Object&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Object o : map.keySet()) &#123;</span><br><span class="line">        List&lt;Object&gt; objects1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        objects1.add(o);</span><br><span class="line">        objects1.add(map.get(o));</span><br><span class="line">        lists.add(objects1);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(lists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MapToSet"><a href="#MapToSet" class="headerlink" title="MapToSet"></a>MapToSet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MapToSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MapToSet"</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"甘肃"</span>, <span class="string">"兰州"</span>);</span><br><span class="line">    map.put(<span class="string">"陕西"</span>, <span class="string">"西安"</span>);</span><br><span class="line">    map.put(<span class="string">"新疆"</span>, <span class="string">"乌鲁木齐"</span>);</span><br><span class="line">    map.put(<span class="string">"青海"</span>, <span class="string">"西宁"</span>);</span><br><span class="line">    map.put(<span class="string">"宁夏"</span>, <span class="string">"银川"</span>);</span><br><span class="line">    Set&lt;Object&gt; objects = <span class="keyword">new</span> HashSet&lt;&gt;(map.keySet());</span><br><span class="line">    System.out.println(objects);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SetToArray"><a href="#SetToArray" class="headerlink" title="SetToArray"></a>SetToArray</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetToArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"SetToArray"</span>);</span><br><span class="line">    Set&lt;Object&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="string">"北京"</span>);</span><br><span class="line">    set.add(<span class="string">"上海"</span>);</span><br><span class="line">    set.add(<span class="string">"深圳"</span>);</span><br><span class="line">    set.add(<span class="string">"广州"</span>);</span><br><span class="line">    Object[] objects = set.toArray(<span class="keyword">new</span> Object[set.size()]);</span><br><span class="line">    System.out.println(Arrays.toString(objects));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SetToList"><a href="#SetToList" class="headerlink" title="SetToList"></a>SetToList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetToList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"SetToList"</span>);</span><br><span class="line">    Set&lt;Object&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="string">"北京"</span>);</span><br><span class="line">    set.add(<span class="string">"上海"</span>);</span><br><span class="line">    set.add(<span class="string">"深圳"</span>);</span><br><span class="line">    set.add(<span class="string">"广州"</span>);</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(set);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SetToMap"><a href="#SetToMap" class="headerlink" title="SetToMap"></a>SetToMap</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetToMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"SetToMap"</span>);</span><br><span class="line">    Set&lt;Object&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="string">"北京"</span>);</span><br><span class="line">    set.add(<span class="string">"上海"</span>);</span><br><span class="line">    set.add(<span class="string">"深圳"</span>);</span><br><span class="line">    set.add(<span class="string">"广州"</span>);</span><br><span class="line">    Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; set.size(); i++) &#123;</span><br><span class="line">        map.put(i, iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java面试题</title>
    <url>/2019/07/18/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaSE部分"><a href="#JavaSE部分" class="headerlink" title="JavaSE部分"></a>JavaSE部分</h1><h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><a id="more"></a>

<h4 id="为什么重写equals还要重写hashcode？"><a href="#为什么重写equals还要重写hashcode？" class="headerlink" title="为什么重写equals还要重写hashcode？"></a>为什么重写equals还要重写hashcode？</h4><p>两者事实关系如下：</p>
<ol>
<li>如果两个对象相同（即用equals比较返回true），那么它们的hashCode值一定要相同！！！！</li>
<li>如果两个对象不同（即用equals比较返回true），那么它们的hashCode值可能相同也可能不同</li>
<li>如果两个对象的hashCode相同（存在哈希冲突），那么它们可能相同也可能不同(即equals比较可能是false也可能是true)</li>
<li>如果两个对象的hashCode不同，那么他们肯定不同(即用equals比较返回false)</li>
</ol>
<ul>
<li>HashMap中，如果要比较key是否相等，要同时使用这两个函数！因为自定义的类的hashcode（）方法继承于Object类，其hashcode码为默认的内存地址，这样即便有相同含义的两个对象，比较也是不相等的。HashMap中的比较key是这样的，先求出key的hashcode（），比较其值是否相等，若相等再比较equals（），若相等则认为他们是相等的。若equals（）不相等则认为他们不相等。</li>
<li>如果只重写hashcode（）不重写equals（）方法，当比较equals）时只是看他们是否为同一对象（即进行内存地址的比较），所以必定要两个方法一起重写。HashMap用来判断key是否相等的方法，其实是调用了HashSet判断加入元素是否相等。重载hashCode（）是为了对同一个key，能得到相同的Hash Code，这样HashMap就可以定位到我们指定的key上。重载equals（）是为了向HashMap表明当前对象和key上所保存的对象是相等的，这样我们才真正地获得了这个key所对应的这个键值对。</li>
</ul>
<h4 id="说一下map的分类和常见的情况"><a href="#说一下map的分类和常见的情况" class="headerlink" title="说一下map的分类和常见的情况"></a>说一下map的分类和常见的情况</h4><ol>
<li><strong>HashMap</strong>：最常用的Map，根据键的hashcode值来存储数据，根据键可以直接获得他的值（因为相同的键hashcode值相同，在地址为hashcode值的地方存储的就是值，所以根据键可以直接获得值），具有很快的访问速度，遍历时，取得数据的顺序完全是随机的，HashMap最多只允许一条记录的键为null，允许多条记录的值为null，HashMap不支持线程同步，即任意时刻可以有多个线程同时写HashMap，这样对导致数据不一致，如果需要同步，可以使用synchronziedMap的方法使得HashMap具有同步的能力或者使用concurrentHashMap</li>
<li><strong>HashTable</strong>：与 HashMap类似,不同的是:key和value的值均不允许为null;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了Hashtale在写入时会比较慢。</li>
<li><strong>LinkedHashMap</strong>：是HahsMap的一个子类，但它保持了记录的插入顺序，遍历时先得到的肯定是先插入的，也可以在构造时带参数，按照应用次数排序，在遍历时会比HahsMap慢，不过有个例外，当HashMap的容量很大，实际数据少时，遍历起来会比LinkedHashMap慢（因为它是链啊），因为HashMap的遍历速度和它容量有关，LinkedHashMap遍历速度只与数据多少有关。key和value均允许为空，非同步的。</li>
<li><strong>TreeMap</strong>：能够把它保存的记录根据key排序,默认是按升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。</li>
</ol>
<p><strong>什么情况用什么类型的Map：</strong></p>
<ul>
<li>在Map中插入，删除，定位元素：HashMap</li>
<li>要按照自定义顺序或自然顺序遍历：TreeMap</li>
<li>要求输入顺序和输出顺序相同：LinkedHashMap</li>
</ul>
<h4 id="Object-若不重写hashCode（）的话，hashCode（）如何计算出来的？"><a href="#Object-若不重写hashCode（）的话，hashCode（）如何计算出来的？" class="headerlink" title="Object 若不重写hashCode（）的话，hashCode（）如何计算出来的？"></a>Object 若不重写hashCode（）的话，hashCode（）如何计算出来的？</h4><p>Object 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法直接返回对象的 内存地址。</p>
<h4 id="比较的是什么？"><a href="#比较的是什么？" class="headerlink" title="==比较的是什么？"></a>==比较的是什么？</h4><p>“==”对比两个对象基于内存引用，如果两个对象的引用完全相同（指向同一个对象）时，“==”操作将返回true，否则返回false。“==”如果两边是基本类型，就是比较数值是否相等。</p>
<h4 id="若对一个类不重写，它的equals（）方法是如何比较的？"><a href="#若对一个类不重写，它的equals（）方法是如何比较的？" class="headerlink" title="若对一个类不重写，它的equals（）方法是如何比较的？"></a>若对一个类不重写，它的equals（）方法是如何比较的？</h4><p>比较是对象的地址。</p>
<h4 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h4><ul>
<li><strong>Lambda 表达式</strong> − Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中。</li>
<li><strong>方法引用</strong> − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</li>
<li><strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法。</li>
<li><strong>新工具</strong> − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</li>
<li><strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</li>
<li><strong>Date Time API</strong> − 加强对日期与时间的处理。</li>
<li><strong>Optional 类</strong> − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li>
<li><strong>Nashorn, JavaScript 引擎</strong> − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</li>
</ul>
<h4 id="Lamda表达式的优缺点"><a href="#Lamda表达式的优缺点" class="headerlink" title="Lamda表达式的优缺点"></a>Lamda表达式的优缺点</h4><p>优点：1.简洁。2.非常容易并行计算。3.可能代表未来的编程趋势。<br>缺点：1.若不用并行计算，很多时候计算速度没有比传统的for循环快。（并行计算有时需要预热才显示出效率优势）2.不容易调试。3.若其他程序员没有学过1ambda表达式，代码不容易让其他语言的程序员看懂。</p>
<h4 id="一个十进制的数在内存中是怎么存的？"><a href="#一个十进制的数在内存中是怎么存的？" class="headerlink" title="一个十进制的数在内存中是怎么存的？"></a>一个十进制的数在内存中是怎么存的？</h4><p>补码的形式</p>
<h4 id="为啥有时会出现4-0-3-6-0-40000001这种现象？"><a href="#为啥有时会出现4-0-3-6-0-40000001这种现象？" class="headerlink" title="为啥有时会出现4.0-3.6=0.40000001这种现象？"></a>为啥有时会出现4.0-3.6=0.40000001这种现象？</h4><p>原因简单来说是这样：2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差。</p>
<h4 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a>Java支持的数据类型有哪些？什么是自动拆装箱？</h4><p><strong>基本数据类型</strong>：byte（1字节），short（2字节），int（4字节），long（8字节），char（2字节），boolean（不确定，取值是true/false），float（4字节），double（8字节）</p>
<p><strong>引用数据类型</strong>：包括数组，集合，字符串，接口以及类等</p>
<p><strong>自动装箱/自动拆箱</strong>：就是指基本数据类型可以和其对应包装类之间自动转换。对应上面分别是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Byte, Short, Int, Long, Float, Double, Char, Boolean</span><br></pre></td></tr></table></figure>

<h4 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a>什么是值传递和引用传递？</h4><p>值传递是对基本型变量而言的，传递的是该变量的一个副本，改变副本不影响原变量。引用传递一般是对于对象型变量而言的，传递的是该对象地址的一个副本，并不是原对象本身。所以对引用对象进行操作会同时改变原对象.一般认为，java内的传递都是值传递.</p>
<h4 id="数组（Array）和列表（ArrayList）有什么区别？什么时候应该使用Array而不是ArrayList？"><a href="#数组（Array）和列表（ArrayList）有什么区别？什么时候应该使用Array而不是ArrayList？" class="headerlink" title="数组（Array）和列表（ArrayList）有什么区别？什么时候应该使用Array而不是ArrayList？"></a>数组（Array）和列表（ArrayList）有什么区别？什么时候应该使用Array而不是ArrayList？</h4><p><strong>存储内容比较：</strong><br>Array 数组可以包含基本类型和对象类型，<br>ArrayList 却只能包含对象类型。<br>Array 数组在存放的时候一定是同种类型的元素。ArrayList 就不一定了 。</p>
<p><strong>空间大小比较：</strong><br>Array 数组的空间大小是固定的,所以需要事前确定合适的空间大小。<br>ArrayList 的空间是动态增长的,而且，每次添加新的元素的时候都会检查内部数组的空间是否足够。</p>
<p><strong>方法上的比较：</strong></p>
<p>ArrayList 方法上比 Array 更多样化，比如添加全部 addAll()、删除全部 removeAll()、返回迭代器 iterator() 等。</p>
<p><strong>适用场景：</strong></p>
<ul>
<li>如果想要保存一些在整个程序运行期间都会存在而且不变的数据，我们可以将它们放进一个全局数组里， 但是如果我们单纯只是想要以数组的形式保存数据，而不对数据进行增加等操作，只是方便我们进行查找的话，那么，我们就选择 ArrayList。</li>
<li>如果我们需要对元素进行频繁的移动或删除，或者是处理的是超大量的数据，那么，使用 ArrayList 就真的不是一个好的选择，因为它的效率很低，使用数组进行这样的动作就很麻烦，那么，我们可以考虑选择 LinkedList。</li>
</ul>
<h4 id="你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？"><a href="#你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？" class="headerlink" title="你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？"></a>你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？</h4><p>大0符号描述了当数据结构里面的元素增加的时候，算法的规模或者是性能在最坏的场景下有多么好。<br>大0符号也可用来描述其他的行为，比如：内存消耗。因为集合类实际上是数据结构，我们一般使用大0符号基于时间，内存和性能来选择最好的实现。大0符号可以对大量数据的性能给出一个很好的说明。</p>
<p>大O符号表示一个程序运行时所需要的<strong>渐进时间复杂度上界</strong>。</p>
<p>其函数表示是：</p>
<p>对于函数f(n),g(n),如果存在一个常数c，使得f(n)&lt;=c*g(n),则f(n)=O(g(n)); 大O描述当数据结构中的元素增加时，算法的规模和性能在最坏情景下有多好。</p>
<p>大O还可以描述其它行为，比如内存消耗。因为集合类实际上是数据结构，因此我们一般使用大O符号基于时间，内存，性能选择最好的实现。大O符号可以对大量数据性能给予一个很好的说明。</p>
<h4 id="String是最基本的数据类型吗？"><a href="#String是最基本的数据类型吗？" class="headerlink" title="String是最基本的数据类型吗？"></a>String是最基本的数据类型吗？</h4><p>基本数据类型包括byte、int、char、long、float、double、boolean 和short。<br>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类。</p>
<h4 id="int和Integer有什么区别"><a href="#int和Integer有什么区别" class="headerlink" title="int和Integer有什么区别"></a>int和Integer有什么区别</h4><ol>
<li>Integer是int的包装类，int则是java的一种基本数据类型</li>
<li>Integer变量必须实例化后才能使用，而int变量不需要</li>
<li>Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值</li>
<li>Integer的默认值是null，int的默认值是0</li>
</ol>
<h4 id="String、StringBuffer和StringBuilder的区别"><a href="#String、StringBuffer和StringBuilder的区别" class="headerlink" title="String、StringBuffer和StringBuilder的区别"></a>String、StringBuffer和StringBuilder的区别</h4><ol>
<li><p><strong>三者在执行速度方面的比较：</strong></p>
<p> <strong>StringBuilder &gt; StringBuffer &gt; String</strong></p>
</li>
<li><p><strong>StringBuilder与 StringBuffer比较</strong>:</p>
<p> StringBuilder：线程非安全的</p>
<p> StringBuffer：线程安全的</p>
<p> 当我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最 快，但是可以保证StringBuffer是可以正确操作的。</p>
<p> 当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。</p>
</li>
<li><p><strong>对于三者使用的总结</strong></p>
<p> 1.如果要操作少量的数据用String</p>
<p> 2.单线程操作字符串缓冲区 下操作大量数据用StringBuilder</p>
<p> 3.多线程操作字符串缓冲区 下操作大量数据用StringBuffer</p>
</li>
</ol>
<h4 id="我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？"><a href="#我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？" class="headerlink" title="我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？"></a>我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String translate (String str) &#123;</span><br><span class="line">        String tempStr &#x3D; &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            tempStr &#x3D; new String(str.getBytes(&quot;ISO-8859-1&quot;), &quot;GBK&quot;);</span><br><span class="line">            tempStr &#x3D; tempStr.trim();</span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return tempStr;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="amp-和-amp-amp-的区别？"><a href="#amp-和-amp-amp-的区别？" class="headerlink" title="&amp;和&amp;&amp;的区别？"></a>&amp;和&amp;&amp;的区别？</h4><p><strong>相同点</strong>：&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and）。</p>
<p><strong>不同点</strong>：</p>
<p>（1）&amp;&amp;具有短路的功能，而&amp;不具备短路功能。</p>
<p>（2）当&amp;运算符两边的表达式的结果都为true时，整个运算结果才为true。而&amp;&amp;运算符第一个表达式为false时，则结果为false，不再计算第二个表达式。</p>
<p>（3）&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如：0x31 &amp; 0x0f的结果为0x01。</p>
<h4 id="在Java中，如何跳出当前的多重嵌套循环？"><a href="#在Java中，如何跳出当前的多重嵌套循环？" class="headerlink" title="在Java中，如何跳出当前的多重嵌套循环？"></a>在Java中，如何跳出当前的多重嵌套循环？</h4><p>在java里面，我们知道有goto这个关键字，但是实际却没有啥作用，这就让我们不像在c/c++里面能够随便让程序跳到那去执行，而break只能跳出当前的一个循环语句。</p>
<ol>
<li>我们可以在循环体开头设置一个标志位，也就是设置一个标记，然后使用带此标号的break语句跳出多重循环。</li>
<li>设置一个boolean值的标记位，在for循环中使用判断是否继续循环来达到目的。</li>
</ol>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？"><a href="#介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？" class="headerlink" title="介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？"></a>介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？</h4><ul>
<li>synchronized修饰静态方法以及同步代码块的synchronized（类.class）用法锁的是类，线程想要执行对应同步代码，需要获得类锁。</li>
<li>synchronized修饰成员方法，线程获取的是当前调用该方法的对象实例的对象锁。</li>
</ul>
<h4 id="介绍一下-volatile？"><a href="#介绍一下-volatile？" class="headerlink" title="介绍一下 volatile？"></a>介绍一下 volatile？</h4><ul>
<li>olatile关键字是用来保证有序性和可见性的。这跟Java内存模型有关。比如我们所写的代码，不一定是按照我们自己书写的顺序来执行的，编译器会做重排序，CPU也会做重排序的，这样的重排序是为了减少流水线的阻塞的，引起流水阻塞，比如数据相关性，提高CPU的执行效率。需要有一定的顺序和规则来保证，不然程序员自己写的代码都不知带对不对了，所以有happens-before规则，其中有条就是volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；有序性实现的是通过插入内存屏障来保证的。可见性：首先Java内存模型分为，主内存，工作内存。比如线程A从主内存把变量从主内存读到了自己的工作内存中，做了加1的操作，但是此时没有将i的最新值刷新会主内存中，线程B此时读到的还是i的旧值。</li>
<li>加了volatile关键字的代码生成的汇编代码发现，会多出一个lock前缀指令。Lock指令对Intel平台的CPU，早期是锁总线，这样代价太高了，后面提出了缓存一致性协议，MESI，来保证了多核之间数据不一致性问题。</li>
</ul>
<h4 id="锁有了解嘛，说一下Synchronized"><a href="#锁有了解嘛，说一下Synchronized" class="headerlink" title="锁有了解嘛，说一下Synchronized"></a>锁有了解嘛，说一下Synchronized</h4><ul>
<li>synchronized是Java的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。JDK1.5以后引入了自旋锁、锁粗化、轻量级锁，偏向锁来有优化关键字的性能。</li>
<li>Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock（）去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</li>
</ul>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h3 id="集合部分"><a href="#集合部分" class="headerlink" title="集合部分"></a>集合部分</h3><h2 id="java高级"><a href="#java高级" class="headerlink" title="java高级"></a>java高级</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h1 id="JavaEE部分"><a href="#JavaEE部分" class="headerlink" title="JavaEE部分"></a>JavaEE部分</h1><h1 id="Java-web编程"><a href="#Java-web编程" class="headerlink" title="Java web编程"></a>Java web编程</h1><h1 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h1><h1 id="XML编程"><a href="#XML编程" class="headerlink" title="XML编程"></a>XML编程</h1><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-Java题解(数组)</title>
    <url>/2019/07/11/leetcode-Java%E9%A2%98%E8%A7%A3-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-把数组中的-0-移到末尾"><a href="#1-把数组中的-0-移到末尾" class="headerlink" title="1. 把数组中的 0 移到末尾"></a>1. 把数组中的 0 移到末尾</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">For example, given nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">12</span>], after calling your function, nums should be [<span class="number">1</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>].</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[idx++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; nums.length) &#123;</span><br><span class="line">        nums[idx++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

<h2 id="2-改变矩阵维度"><a href="#2-改变矩阵维度" class="headerlink" title="2. 改变矩阵维度"></a>2. 改变矩阵维度</h2><p>示例 1:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">nums = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"> [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">r = <span class="number">1</span>, c = <span class="number">4</span></span><br><span class="line">输出: </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">解释:</span><br><span class="line">行遍历nums的结果是 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]。新的矩阵是 <span class="number">1</span> * <span class="number">4</span> 矩阵, 用之前的元素值一行一行填充新矩阵。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] matrixReshape(<span class="keyword">int</span>[][] nums, <span class="keyword">int</span> r, <span class="keyword">int</span> c) &#123;</span><br><span class="line">    <span class="keyword">int</span> m = nums.length, n = nums[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (m * n != r * c) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][] reshapedNums = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">            reshapedNums[i][j] = nums[index / n][index % n];</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reshapedNums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-找出数组中最长的连续-1"><a href="#3-找出数组中最长的连续-1" class="headerlink" title="3. 找出数组中最长的连续 1"></a>3. 找出数组中最长的连续 1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</span><br><span class="line">        cur = x == <span class="number">0</span> ? <span class="number">0</span> : cur + <span class="number">1</span>;</span><br><span class="line">        max = Math.max(max, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-有序矩阵查找"><a href="#4-有序矩阵查找" class="headerlink" title="4. 有序矩阵查找"></a>4. 有序矩阵查找</h2><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>
<p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:</p>
<p>现有矩阵 matrix 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,   <span class="number">4</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">  [<span class="number">2</span>,   <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">19</span>],</span><br><span class="line">  [<span class="number">3</span>,   <span class="number">6</span>,  <span class="number">9</span>, <span class="number">16</span>, <span class="number">22</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">24</span>],</span><br><span class="line">  [<span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">30</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>给定 target = 5，返回 true。</p>
<p>给定 target = 20，返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findX</span><span class="params">(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> col = m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> init = mat[row][col];;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(init == x) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(init &gt; x)&#123;</span><br><span class="line">                col--;</span><br><span class="line">                <span class="keyword">if</span>(col&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> init = mat[row][col];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                row++;</span><br><span class="line">                <span class="keyword">if</span>(row&gt;n-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> init = mat[row][col];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5未完待续"><a href="#5未完待续" class="headerlink" title="5未完待续"></a>5未完待续</h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql中DML DDL DCL DQL</title>
    <url>/2019/07/25/mysql%E4%B8%ADDML-DDL-DCL-DQL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><table>
<thead>
<tr>
<th align="left">名字</th>
<th align="left">类型</th>
<th align="left">作用的对象</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DDL 英文全称 (Data Definition Language)</td>
<td align="left">数据定义语言</td>
<td align="left">库、表、列</td>
<td align="left">创建、删除、修改、库或表结构，对数据库或表的结构操作</td>
</tr>
<tr>
<td align="left">DML 英文全称(Data Manipulation Language)</td>
<td align="left">数据操作语言</td>
<td align="left">数据库记录（数据）</td>
<td align="left">增、删、改，对表记录进行更新(增、删、改)</td>
</tr>
<tr>
<td align="left">DQL 英文全称(Data Query Language)</td>
<td align="left">数据查询语言</td>
<td align="left">数据库记录（数据）</td>
<td align="left">查、用来查询数据，对表记录的查询</td>
</tr>
<tr>
<td align="left">DCL 英文全称(Data Control Language)</td>
<td align="left">数据控制语言</td>
<td align="left">数据库用户</td>
<td align="left">用来定义访问的权限和安全级别，对用户的创建，及授权</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。<strong>它和DML 语言的最大区别是DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象</strong>。DDL 语句更多的被数据库管理员（DBA）所使用，DDL主要负责数据库的创/改/查/删以及表格的创/改/查/删，一般的开发人员很少使用。</p>
<p><strong>1.创建数据库:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [数据库名] <span class="built_in">character</span> <span class="keyword">set</span> [字符编码];</span><br></pre></td></tr></table></figure>

<p><strong>2.查看数据库:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3.查看数据库创建明细:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> [数据库名字];</span><br></pre></td></tr></table></figure>

<p><strong>4.修改数据库编码:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> [数据库名] <span class="built_in">character</span> <span class="keyword">set</span> [字符编码];</span><br></pre></td></tr></table></figure>

<p><strong>5.删除数据库:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [数据库名];</span><br></pre></td></tr></table></figure>

<p><strong>6.使用数据库:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> [数据库名];</span><br></pre></td></tr></table></figure>

<p><strong>7.创建表格:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),sex <span class="built_in">char</span>(<span class="number">2</span>),birthday <span class="built_in">date</span>,job <span class="built_in">varchar</span>(<span class="number">50</span>),salary <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p><strong>8.查看表的结构:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc [表名];</span><br></pre></td></tr></table></figure>

<p><strong>9.在表中插入列:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> address <span class="built_in">varchar</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p><strong>10.修改列字符的属性:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">MODIFY</span> job <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>注:即将原来varchar(50)改为20;</p>
<p><strong>11.删除某列:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> address;</span><br></pre></td></tr></table></figure>

<p><strong>12.更改表名:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> employee <span class="keyword">to</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><strong>13.查看表的创建细节:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><strong>14.修改字段名:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">CHANGE</span> <span class="keyword">name</span> username <span class="built_in">VARCHAR</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><strong>15.删除表:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以<strong>INSERT、UPDATE、DELETE</strong>三种指令为核心，分别代表插入、更新与删除，是开发以数据为中心的应用程序必定会使用到的指令。<strong>DML是对数据库表中的数据增删改的操作.</strong></p>
<p><strong>1.插入数据:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,sex,birthday,salary) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'dupudupu'</span>,<span class="string">'男'</span>,<span class="string">'2011-09-08'</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>也可以这样写,省略前面括号里面的内容</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'Paul'</span>,<span class="string">'男'</span>,<span class="string">'2018-09-22'</span>,<span class="number">800</span>);</span><br></pre></td></tr></table></figure>

<p><strong>2.批量插入:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> </span><br><span class="line">(<span class="number">3</span>,<span class="string">'Lili'</span>,<span class="string">'女'</span>,<span class="string">'2017-06-25'</span>,<span class="number">3000</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'Hali'</span>,<span class="string">'男'</span>,<span class="string">'2014-09-08'</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'Soso'</span>,<span class="string">'女'</span>,<span class="string">'1997-07-30'</span>,<span class="number">10000</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">'Mama'</span>,<span class="string">'女'</span>,<span class="string">'1789-03-25'</span>,<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>

<p><strong>3.修改数据:</strong>当我在Mysql Workbench中使用下面的语句时,出现了错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'Dupu'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>首先语句是没有错的,经查询</p>
<ul>
<li>错误原因：是在safe mode下,要强制安全点,update只能跟where</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Error Code: 1175. You are using safe <span class="keyword">update</span> <span class="keyword">mode</span> <span class="keyword">and</span> you tried <span class="keyword">to</span> <span class="keyword">update</span> a <span class="keyword">table</span> <span class="keyword">without</span> a <span class="keyword">WHERE</span> that uses a <span class="keyword">KEY</span> <span class="keyword">column</span> <span class="keyword">To</span> <span class="keyword">disable</span> <span class="keyword">safe</span> <span class="keyword">mode</span>, toggle the <span class="keyword">option</span> <span class="keyword">in</span> Preferences -&gt; <span class="keyword">SQL</span> Editor <span class="keyword">and</span> reconnect.</span><br></pre></td></tr></table></figure>

<ul>
<li>解决方案 : 执行命令—-&gt;SET SQL_SAFE_UPDATES = 0;</li>
</ul>
<p><strong>4.删除数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>DCL（Data Control Language）是数据库控制语言。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL。</p>
<p><strong>1.创建用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名@地址 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> user1@localhost <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> ‘<span class="number">123</span>’; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> user2@’%’ <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> ‘<span class="number">123</span>’;</span><br></pre></td></tr></table></figure>

<p><strong>2.用户授权</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限<span class="number">1</span>, … , 权限n <span class="keyword">ON</span> 数据库.* <span class="keyword">TO</span> 用户名@IP</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span>,<span class="keyword">ALTER</span>,<span class="keyword">DROP</span>,<span class="keyword">INSERT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>,<span class="keyword">SELECT</span> <span class="keyword">ON</span> mydb1.* <span class="keyword">TO</span> user1@localhost;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> mydb1.* <span class="keyword">TO</span> user2@’%’;</span><br></pre></td></tr></table></figure>

<p><strong>3.撤销授权</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span>权限<span class="number">1</span>, … , 权限n <span class="keyword">ON</span> 数据库.* <span class="keyword">FORM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">CREATE</span>,<span class="keyword">ALTER</span>,<span class="keyword">DROP</span> <span class="keyword">ON</span> mydb1.* <span class="keyword">FROM</span> user1@localhost;</span><br></pre></td></tr></table></figure>

<p><strong>4.查看权限</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 用户名</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> user1@localhost;</span><br></pre></td></tr></table></figure>

<p><strong>5.删除用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> user1@localhost;</span><br></pre></td></tr></table></figure>

<p><strong>6.修改用户密码</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Use</span> mysql;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(‘密码’) <span class="keyword">WHERE</span> <span class="keyword">User</span>=’用户名’;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(<span class="string">'1234'</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span>=<span class="string">'user2'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>

<h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端,查询返回的<strong>结果集是一张虚拟表</strong>。</p>
<p><strong>1.简单查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名;	<span class="comment">#查询所有字段</span></span><br><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>,列<span class="number">2</span>,... <span class="keyword">from</span> 表名;	<span class="comment">#查询指定字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">as</span> 序号, <span class="keyword">name</span> <span class="keyword">as</span> 名字, gender <span class="keyword">as</span> 性别 <span class="keyword">from</span> students;	<span class="comment">#使用 as 给字段起别名</span></span><br><span class="line"><span class="keyword">select</span> s.id,s.name,s.gender <span class="keyword">from</span> students <span class="keyword">as</span> s;	<span class="comment">#可以通过 as 给表起别名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 列<span class="number">1</span>,... <span class="keyword">from</span> 表名;   <span class="comment">#消除重复行</span></span><br></pre></td></tr></table></figure>

<p>2.条件查询**</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<p>where后面支持多种运算符，进行条件的处理</p>
<ul>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>模糊查询</li>
<li>范围查询</li>
<li>空判断</li>
</ul>
<p>3.排序查询**</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段 <span class="keyword">ASC</span>|<span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p><strong>4.聚合查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(price) <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> category_id = <span class="string">'c001'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(price) <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> category_id = <span class="string">'c002'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(price),<span class="keyword">MIN</span>(price) <span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure>

<p>count：统计指定列不为NULL的记录行数；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</span><br><span class="line"></span><br><span class="line">max：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class="line"></span><br><span class="line">min：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class="line"></span><br><span class="line">avg：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</span><br></pre></td></tr></table></figure>

<p><strong>5.分组查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1,：查询每个工种的最高工资  【每个】</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary),job_id <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 案例2：查询每个位置上的部门个数   【每个】</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),location_id <span class="keyword">FROM</span> departments <span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 案例3：查询邮箱中包含a字符的，每个部门的平均工资   【每个】</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary),department_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">'%a%'</span>  <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 案例4：查询有奖金的每个领导手下员工的最高工资    【添加分组前的筛选】</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary), manager_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>  <span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 案例5：查询哪个部门的员工数&gt;2   【添加分组后的筛选】</span></span><br><span class="line"><span class="comment">-- ①查询每个部门的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),department_id <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="comment">-- ②根据①的结果进行筛选，查询哪个部门的员工个数&gt;2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),department_id <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><strong>6.外键约束</strong></p>
<p>1、级联(cascade)方式</p>
<p>2、置空(set null)方式</p>
<p>3、禁止(no action / restrict)方式</p>
<p><strong>7.多表查询</strong></p>
<p>交叉连接：不适用任何匹配条件。生成笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp,department;</span><br></pre></td></tr></table></figure>

<p>内连接：只连接匹配的行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> emp.id,emp.name,emp.age,emp.sex,department.name <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> department <span class="keyword">on</span> emp.dep_id=department.id;</span><br></pre></td></tr></table></figure>

<p>外链接之左连接：优先显示左表全部记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> emp.id,emp.name,department.name <span class="keyword">as</span> depart_name <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> department <span class="keyword">on</span> emp.dep_id=department.id;</span><br></pre></td></tr></table></figure>

<p>外链接之右链接：优先显示右表全部记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> emp.id,emp.name,department.name <span class="keyword">as</span> depart_name <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> department <span class="keyword">on</span> emp.dep_id=department.id;</span><br></pre></td></tr></table></figure>

<p>全外连接：显示左右两个表全部记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">left</span> <span class="keyword">join</span> department <span class="keyword">on</span> employee.dep_id = department.id</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">right</span> <span class="keyword">join</span> department <span class="keyword">on</span> employee.dep_id = department.id</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>案例来自<a href="https://www.cnblogs.com/schut/p/9065402.html" target="_blank" rel="noopener">博客园</a></p>
<p><strong>8.子查询</strong></p>
<p><strong>1、带IN关键字的子查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询平均年龄在25岁以上的部门名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> department</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> </span><br><span class="line">        (<span class="keyword">select</span> dep_id <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> dep_id <span class="keyword">having</span> <span class="keyword">avg</span>(age) &gt; <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看技术部员工姓名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> employee</span><br><span class="line">    <span class="keyword">where</span> dep_id <span class="keyword">in</span> </span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> department <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'技术'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看不足1人的部门名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> department</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> </span><br><span class="line">        (<span class="keyword">select</span> dep_id <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> dep_id <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">id</span>) &lt;=<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>　<strong>2、带比较运算符的子查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比较运算符：=、!=、&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;</span></span><br><span class="line"><span class="comment">#查询大于所有人平均年龄的员工名与年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> emp <span class="keyword">where</span> age &gt; (<span class="keyword">select</span> <span class="keyword">avg</span>(age) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询大于部门内平均年龄的员工名、年龄</span></span><br><span class="line"><span class="keyword">select</span> t1.name,t1.age <span class="keyword">from</span> emp t1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> dep_id,<span class="keyword">avg</span>(age) avg_age <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dep_id) t2</span><br><span class="line"><span class="keyword">on</span> t1.dep_id = t2.dep_id</span><br><span class="line"><span class="keyword">where</span> t1.age &gt; t2.avg_age;</span><br></pre></td></tr></table></figure>

<p><strong>3、带EXISTS关键字的子查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXISTS关字键字表示存在。在使用EXISTS关键字时，内层查询语句不返回查询的记录。</span><br><span class="line"></span><br><span class="line">而是返回一个真假值。True或False</span><br><span class="line"></span><br><span class="line">当返回True时，外层查询语句将进行查询；当返回值为False时，外层查询语句不进行查询</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>nvm npm nrm的简单理解</title>
    <url>/2019/09/02/nvm-npm-nrm%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="nvm简介"><a href="#nvm简介" class="headerlink" title="nvm简介"></a>nvm简介</h2><p>全称Node Version Manager，是一个nodejs 版本管理工具，一个 nvm 可以管理很多 node 版本和 npm 版本，它让我们能方便的对 Nodejs 的版 本进行切换。</p>
<a id="more"></a>

<h2 id="nvm的常用的命令"><a href="#nvm的常用的命令" class="headerlink" title="nvm的常用的命令"></a>nvm的常用的命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install <span class="comment">## 安装指定版本，可模糊安装，如：安装v6.2.0，既可nvm install v6.2.0，又可nvm install 6.2</span></span><br><span class="line">nvm uninstall <span class="comment">## 删除已安装的指定版本，语法与install类似</span></span><br><span class="line"></span><br><span class="line">nvm use <span class="comment">## 切换使用指定的版本node</span></span><br><span class="line"></span><br><span class="line">nvm ls <span class="comment">## 列出所有安装的版本</span></span><br><span class="line"></span><br><span class="line">nvm ls-remote <span class="comment">## 列出所以远程服务器的版本（官方node version list）</span></span><br><span class="line"></span><br><span class="line">nvm current <span class="comment">## 显示当前的版本</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">alias</span> <span class="comment">## 给不同的版本号添加别名</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">unalias</span> <span class="comment">## 删除已定义的别名</span></span><br><span class="line"></span><br><span class="line">nvm reinstall-packages <span class="comment">## 在当前版本node环境下，重新全局安装指定版本号的npm包</span></span><br></pre></td></tr></table></figure>

<h2 id="npm简介"><a href="#npm简介" class="headerlink" title="npm简介"></a>npm简介</h2><p>npm全称为Node Package Manager，是一个基于<a href="http://lib.csdn.net/base/nodejs" target="_blank" rel="noopener">Node.js</a>的包管理器，也是整个Node.js社区最流行、支持的第三方模块最多的包管理器。</p>
<p>npm的初衷：JavaScript开发人员更容易分享和重用代码。</p>
<p>npm的使用场景：</p>
<ul>
<li>允许用户获取第三方包并使用。</li>
<li>允许用户将自己编写的包或命令行程序进行发布分享。</li>
</ul>
<p>npm版本查询：npm -v</p>
<p>npm安装：</p>
<p>　　1、安装nodejs</p>
<p>　　　　由于新版的nodejs已经集成了npm，所以可直接通过输入npm -v来测试是否成功安装。</p>
<p>　　2、使用npm命令来升级npm: npm install npm -g</p>
<h2 id="npm常用的命令"><a href="#npm常用的命令" class="headerlink" title="npm常用的命令"></a>npm常用的命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init 填写项目的相关的信息 <span class="comment"># 初始化项目(生成package.json)</span></span><br><span class="line"></span><br><span class="line">npm install moduleNames <span class="comment"># 安装Node模块</span></span><br><span class="line"></span><br><span class="line">npm install moduleNames -g <span class="comment"># 全局安装Node模块</span></span><br><span class="line"></span><br><span class="line">npm uninstall <span class="comment"># 卸载模块</span></span><br><span class="line"></span><br><span class="line">npm update [&lt;name&gt;&lt;version&gt;][-g]/[--save][-dev] <span class="comment"># 更新模块</span></span><br><span class="line"></span><br><span class="line">npm search [&lt;name&gt;&lt;version&gt;][-g]/[--save][-dev] <span class="comment"># 搜索模块</span></span><br><span class="line"></span><br><span class="line">npm list -g --depth 0 <span class="comment"># 查看所有已经全局安装的模块</span></span><br><span class="line"></span><br><span class="line">npm list/ls/la/ll [-g] <span class="comment"># 查看全局或项目下已安装的各模块之间的依赖关系图</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> registry &lt;URL&gt; <span class="comment"># 添加镜像</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix &lt;路径&gt; <span class="comment"># 更改npm全局安装路径</span></span><br><span class="line"></span><br><span class="line">npm view &lt;name&gt; [package.json属性名称] <span class="comment"># 查看模块的注册信息，例如包名称（name）、版本号（version）、描述（description）、作者（author）、版权（license）</span></span><br><span class="line">ng <span class="built_in">set</span> --global packageManager=yarn <span class="comment"># 换包管理器</span></span><br><span class="line"></span><br><span class="line">npm <span class="built_in">help</span> // 帮助</span><br><span class="line"></span><br><span class="line">npm -h  // 快速搜索某一个命令的详情语法</span><br><span class="line"></span><br><span class="line">npm cache clean <span class="comment"># 清除模块</span></span><br><span class="line"></span><br><span class="line">npm cache verify <span class="comment"># 验证缓存</span></span><br><span class="line"></span><br><span class="line">npm run &lt;<span class="built_in">command</span>&gt; <span class="comment"># 启动模块</span></span><br><span class="line"></span><br><span class="line">npm root <span class="comment"># 当前包的安装路径</span></span><br><span class="line"></span><br><span class="line">npm root -g <span class="comment"># 全局的包的安装路径</span></span><br></pre></td></tr></table></figure>

<h2 id="nrm简介"><a href="#nrm简介" class="headerlink" title="nrm简介"></a>nrm简介</h2><p>nrm 是一个 npm 源管理器，允许你快速地在 npm源间切换。</p>
<p>npm默认使用的官方源，由于一些特殊的原因不能使用，所以国内一般使用的是淘宝的npm源<code>https://registry.npm.taobao.org</code>，修改源的方法是在终端中输入以下的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<p>nrm安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<h2 id="nrm常见命令"><a href="#nrm常见命令" class="headerlink" title="nrm常见命令"></a>nrm常见命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm ls　　<span class="comment"># 查看所有的支持源（有*号的表示当前所使用的源,以下[name]表示源的名称）</span></span><br><span class="line"></span><br><span class="line">nrm use [name]　　<span class="comment"># 将npm下载源切换成指定的源</span></span><br><span class="line"></span><br><span class="line">nrm <span class="built_in">help</span>　　<span class="comment"># 查看nrm帮助</span></span><br><span class="line"></span><br><span class="line">nrm home [name]　　<span class="comment"># 跳转到指定源的官网</span></span><br><span class="line"></span><br><span class="line">nrm current   <span class="comment"># 查看当前使用源</span></span><br><span class="line"></span><br><span class="line">nrm add &lt;registry&gt; &lt;url&gt;   <span class="comment"># 添加新源（添加一个公司私有的npm源），源名随意取</span></span><br><span class="line"></span><br><span class="line">nrm del &lt;registry&gt;   <span class="comment"># 删除新添加的源</span></span><br><span class="line"></span><br><span class="line">nrm <span class="built_in">test</span> &lt;registry&gt;   <span class="comment">#测试源的速度</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm中的配置文件</title>
    <url>/2019/07/26/ssm%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>web.xml就是一个发布容器，里边包括了相关的项目配置，当一个web项目启动后，Tomcat容器就会先读取web.xml配置文件中的配置，正确后项目才会被正常启动。</p>
<a id="more"></a>

<ol>
<li>首先启动web.xml中的和两个节点。</li>
<li>紧接着创建一个servletContext(application)，这个web项目都将共享这个上下文。</li>
<li>容器以name作为键，value作为值，将其转化为键值对，存入servletContext容器中，这就是是上下文配置。</li>
<li>容器创建监听器的实例，容器会读取过滤器。</li>
<li>容器读取配置。</li>
<li>总的来说web.xml的加载顺序就是-&gt;-&gt;-&gt;。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="comment">&lt;!-- icon元素指出IDE和GUI工具用来表示Web应用的一个和两个图像文件的位置。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- display-name元素提供GUI工具可能会用来标记这个特定的Web应用的一个名称。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- description元素给出与此有关的说明性文本。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- context-param元素声明应用范围内的初始化参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- filter 过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- filter-mapping 一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- listener 对事件监听程序的支持，事件监听程序在建立、修改和删除会话或servlet环境时得到通知。Listener元素指出事件监听程序类。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- servlet 在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。Servlet元素就是用来完成此项任务的。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- servlet-mapping 服务器一般为servlet提供一个缺省的URL：http://host/webAppPrefix/servlet/ServletName。但是，常常会更改这个URL，以便servlet可以访问初始化参数或更容易地处理相对URL。在更改缺省URL时，使用servlet-mapping元素。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- session-config 如果某个会话在一定时间内未被访问，服务器可以抛弃它以节省内存。可通过使用HttpSession的setMaxInactiveInterval方法明确设置单个会话对象的超时值，或者可利用session-config元素制定缺省超时值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- mime-mapping 如果Web应用具有想到特殊的文件，希望能保证给他们分配特定的MIME类型，则mime-mapping元素提供这种保证。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mime-mapping</span>&gt;</span><span class="tag">&lt;/<span class="name">mime-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- welcome-file-list元素指示服务器在收到引用一个目录名而不是文件名的URL时，使用哪个文件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- error-page元素使得在返回特定HTTP状态代码时，或者特定类型的异常被抛出时，能够制定将要显示的页面。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- resource-env-ref元素声明与资源相关的一个管理对象。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource-env-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">resource-env-ref</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- resource-ref元素声明一个资源工厂使用的外部资源。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- security-constraint元素制定应该保护的URL。它与login-config元素联合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 用login-config元素来指定服务器应该怎样给试图访问受保护页面的用户授权。它与sercurity-constraint元素联合使用。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">login-config</span>&gt;</span><span class="tag">&lt;/<span class="name">login-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- security-role元素给出安全角色的一个列表，这些角色将出现在servlet元素内的security-role-ref元素的role-name子元素中。分别地声明角色可使高级IDE处理安全信息更为容易。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security-role</span>&gt;</span><span class="tag">&lt;/<span class="name">security-role</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- env-entry元素声明Web应用的环境项。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry</span>&gt;</span><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ejb-ref元素声明一个EJB的主目录的引用。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ejb-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">ejb-ref</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ejb-local-ref元素声明一个EJB的本地主目录的应用。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ejb-local-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">ejb-local-ref</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span> <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/jdbc</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描web包 ,将带有注解的类 纳入spring容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.eduoinfo.finances.bank.web"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 引入jdbc配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:jdbc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- dataSource 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- mybatis文件配置，扫描所有mapper文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span> <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span> <span class="attr">p:configLocation</span>=<span class="string">"classpath:mybatis-config.xml"</span> <span class="attr">p:mapperLocations</span>=<span class="string">"classpath:com/eduoinfo/finances/bank/web/dao/*.xml"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- spring与mybatis整合配置，扫描所有dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span> <span class="attr">p:basePackage</span>=<span class="string">"com.eduoinfo.finances.bank.web.dao"</span> <span class="attr">p:sqlSessionFactoryBeanName</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 对dataSource 数据源进行事务管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 配置使Spring采用CGLIB代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 启用对事务注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- Cache配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"cacheManager"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehCacheManagerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span> <span class="attr">p:configLocation</span>=<span class="string">"classpath:ehcache.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheCacheManager"</span> <span class="attr">p:cacheManager-ref</span>=<span class="string">"ehCacheManagerFactory"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="springmvc-config-xml"><a href="#springmvc-config-xml" class="headerlink" title="springmvc-config.xml"></a>springmvc-config.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd     </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-4.2.xsd"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描该包，SpringMVC会将包下用了@controller注解的类注册为Spring的controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"***.***.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置默认配置方案 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用默认的Servlet来响应静态文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义Spring MVC的拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 拦截所有请求 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/*"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自定义判断用户权限的拦截类 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"***.***.***"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/WEB-INF/jsp/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>.jsp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10MB） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>********<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入外部资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置驼峰匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置包扫描(别名) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.itcast.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置环境：可以配置多个环境，default：配置某一个环境的唯一标识，表示默认使用哪个环境 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">      	<span class="comment">&lt;!-- 配置连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置映射文件：用来配置sql语句和结果集类型等 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/<span class="built_in">test</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=</span><br><span class="line">jdbc.maxTotal=30</span><br><span class="line">jdbc.maxIdle=10</span><br><span class="line">jdbc.initialSize=5</span><br></pre></td></tr></table></figure>

<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">### 设置###</span></span><br><span class="line">log4j.rootLogger = debug,stdout,D,E</span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出信息到控制抬 ###</span></span><br><span class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target = System.out</span><br><span class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出DEBUG 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.D.File = E://logs/log.log</span><br><span class="line">log4j.appender.D.Append = <span class="literal">true</span></span><br><span class="line">log4j.appender.D.Threshold = DEBUG </span><br><span class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出ERROR 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line">log4j.appender.E = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.E.File =E://logs/error.log </span><br><span class="line">log4j.appender.E.Append = <span class="literal">true</span></span><br><span class="line">log4j.appender.E.Threshold = ERROR </span><br><span class="line">log4j.appender.E.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm框架整合</title>
    <url>/2019/07/27/ssm%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>ssm是Spring+SpringMVC+MyBatis整合的简称。</p>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</p>
<p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式。</p>
<a id="more"></a>

<ul>
<li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 <code>BeanFactory</code>，它是工厂模式的实现。<code>BeanFactory</code> 使用<em>控制反转</em> （IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</li>
<li><strong>Spring DAO</strong>：JDBC DAO抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li>
<li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li>
<li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
</ul>
<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>SpringMVC是一种基于Java，实现了Web MVC设计模式，请求驱动类型的轻量级Web框架，即使用了MVC架构模式的思想，将Web层进行职责解耦。基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发，SpringMVC也是要简化我们日常Web开发。</p>
<p><a href="https://img-blog.csdnimg.cn/20190630145911981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGlhbnhpYW5nX2thb2xh,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener"><img data-src="https://img-blog.csdnimg.cn/20190630145911981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGlhbnhpYW5nX2thb2xh,size_16,color_FFFFFF,t_70" alt="介绍图片"></a></p>
<p>具体流程：</p>
<p>（1）首先浏览器发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；</p>
<p>（2）DispatcherServlet——&gt;HandlerMapping，处理器映射器将会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器对象、多个HandlerInterceptor拦截器）对象；</p>
<p>（3）DispatcherServlet——&gt;HandlerAdapter，处理器适配器将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；</p>
<p>（4）HandlerAdapter——&gt;调用处理器相应功能处理方法，并返回一个ModelAndView对象（包含模型数据、逻辑视图名）；</p>
<p>（5）ModelAndView对象（Model部分是业务对象返回的模型数据，View部分为逻辑视图名）——&gt; ViewResolver， 视图解析器将把逻辑视图名解析为具体的View；</p>
<p>（6）View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构；</p>
<p>（7）返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p>
<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>MyBatis 本是<a href="http://baike.baidu.com/view/28283.htm" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="http://baike.baidu.com/view/628102.htm" target="_blank" rel="noopener">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。MyBatis是一个基于Java的<a href="http://baike.baidu.com/view/198047.htm" target="_blank" rel="noopener">持久层</a>框架。iBATIS提供的<a href="http://baike.baidu.com/view/198047.htm" target="_blank" rel="noopener">持久层</a>框架包括SQL Maps和Data Access Objects（DAO）MyBatis 消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录。</p>
<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="Maven引入需要的JAR包"><a href="#Maven引入需要的JAR包" class="headerlink" title="Maven引入需要的JAR包"></a>Maven引入需要的JAR包</h2><p><strong>在pom.xml中引入jar包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.javen.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven01 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- spring版本号 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- mybatis版本号 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;3.1.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt; --&gt;</span></span><br><span class="line">        </span><br><span class="line">         <span class="comment">&lt;!-- spring核心包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- mybatis核心包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">         <span class="comment">&lt;!-- mybatis/spring包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">         <span class="comment">&lt;!-- 导入java ee jar 包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">         <span class="comment">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- JSTL标签类 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 日志文件管理包 --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- log start --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">        <span class="comment">&lt;!-- 格式化对象，方便输出日志 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 映入JSON --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 上传组件包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.8.v20150217<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">httpConnector</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">httpConnector</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">stopKey</span>&gt;</span>shutdown<span class="tag">&lt;/<span class="name">stopKey</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">stopPort</span>&gt;</span>9966<span class="tag">&lt;/<span class="name">stopPort</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="整合SpringMVC"><a href="#整合SpringMVC" class="headerlink" title="整合SpringMVC"></a>整合SpringMVC</h2><h3 id="配置spring-mvc-xml"><a href="#配置spring-mvc-xml" class="headerlink" title="配置spring-mvc.xml"></a>配置spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.javen.controller"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源处理  css js imgs --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/resources/**"</span> <span class="attr">mapping</span>=<span class="string">"/resources"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span> /&gt;</span> <span class="comment">&lt;!-- JSON转换器 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>    </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 默认编码 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 文件大小最大值 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 内存中的最大值 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 启用是为了推迟文件解析，以便捕获文件大小异常 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置ViewResolver 。可用多个ViewResolver 。使用order属性排序。   InternalResourceViewResolver 放在最后--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 告诉视图解析器，返回的类型为json格式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml"</span> <span class="attr">value</span>=<span class="string">"application/xml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"htm"</span> <span class="attr">value</span>=<span class="string">"text/htm"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- ModelAndView里的数据变成JSON --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJacksonJsonView"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreAcceptHeader"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h3><p>配置的spring-mvc的Servlet就是为了完成SpringMVC+MAVEN的整合。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- Spring和mybatis的配置文件 --&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!--  &lt;context-param&gt;  </span></span><br><span class="line"><span class="comment">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </span></span><br><span class="line"><span class="comment">        &lt;param-value&gt;classpath:spring-mybatis.xml&lt;/param-value&gt;  </span></span><br><span class="line"><span class="comment">    &lt;/context-param&gt;   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编码过滤器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- Spring监听器 --&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!--  &lt;listener&gt;  </span></span><br><span class="line"><span class="comment">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  </span></span><br><span class="line"><span class="comment">    &lt;/listener&gt;   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 防止Spring内存溢出监听器 --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- &lt;listener&gt;  </span></span><br><span class="line"><span class="comment">        &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;  </span></span><br><span class="line"><span class="comment">    &lt;/listener&gt;  --&gt;</span> </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC servlet --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Log4j的配置"><a href="#Log4j的配置" class="headerlink" title="Log4j的配置"></a>Log4j的配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=INFO,Console,File  </span><br><span class="line"><span class="comment">#定义日志输出目的地为控制台  </span></span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender  </span><br><span class="line">log4j.appender.Console.Target=System.out  </span><br><span class="line"><span class="comment">#可以灵活地指定日志输出格式，下面一行是指定具体的格式  </span></span><br><span class="line">log4j.appender.Console.layout = org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#文件大小到达指定尺寸的时候产生一个新的文件  </span></span><br><span class="line">log4j.appender.File = org.apache.log4j.RollingFileAppender  </span><br><span class="line"><span class="comment">#指定输出目录  </span></span><br><span class="line">log4j.appender.File.File = logs/ssm.log  </span><br><span class="line"><span class="comment">#定义文件最大大小  </span></span><br><span class="line">log4j.appender.File.MaxFileSize = 10MB  </span><br><span class="line"><span class="comment"># 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志  </span></span><br><span class="line">log4j.appender.File.Threshold = ALL  </span><br><span class="line">log4j.appender.File.layout = org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.File.layout.ConversionPattern =[%p] [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%c]%m%n  </span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h2 id="Spring与MyBatis的整合"><a href="#Spring与MyBatis的整合" class="headerlink" title="Spring与MyBatis的整合"></a>Spring与MyBatis的整合</h2><h3 id="建立JDBC属性文件"><a href="#建立JDBC属性文件" class="headerlink" title="建立JDBC属性文件"></a>建立JDBC属性文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/maven</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line"><span class="comment">#定义初始连接数  </span></span><br><span class="line">initialSize=0  </span><br><span class="line"><span class="comment">#定义最大连接数  </span></span><br><span class="line">maxActive=20  </span><br><span class="line"><span class="comment">#定义最大空闲  </span></span><br><span class="line">maxIdle=20  </span><br><span class="line"><span class="comment">#定义最小空闲  </span></span><br><span class="line">minIdle=1  </span><br><span class="line"><span class="comment">#定义最长等待时间  </span></span><br><span class="line">maxWait=60000</span><br></pre></td></tr></table></figure>

<h3 id="建立spring-mybatis-xml配置文件"><a href="#建立spring-mybatis-xml配置文件" class="headerlink" title="建立spring-mybatis.xml配置文件"></a>建立spring-mybatis.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.javen"</span> /&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxWait&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/javen/mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.javen.dao"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis-Generator自动创建代码"><a href="#MyBatis-Generator自动创建代码" class="headerlink" title="MyBatis Generator自动创建代码"></a>MyBatis Generator自动创建代码</h2><p>由于MyBatis属于一种半自动的ORM框架，所以主要的工作就是配置Mapping映射文件，但是由于手写映射文件很容易出错，所以可利用 MyBatis Generator 自动生成实体类、DAO接口和Mapping映射文件。</p>
<p>MyBatis Generator (MBG) 是一个Mybatis的代码生成器 ，可以根据数据库中表结构自动生成简单的CRUD（插入，查询，更新，删除）操作。 但联合查询和存储过程，需手动手写SQL和对象。</p>
<h3 id="配置generatorConfig-xml"><a href="#配置generatorConfig-xml" class="headerlink" title="配置generatorConfig.xml"></a>配置generatorConfig.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">" -//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">"/Users/yehaixiao/Maven/mysql/mysql-connector-java/5.1.30/mysql-connector-java.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"my"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">　　　　 <span class="comment">&lt;!-- mysql数据库连接 --&gt;</span>　</span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/test"</span> <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"******"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">　　　　　<span class="comment">&lt;!-- 生成model实体类文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.ssmgen.demo.model"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"/Users/yehaixiao/asiainfo/ssm-demo/src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">　　　　　<span class="comment">&lt;!-- 生成mapper.xml配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.ssmgen.demo.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"/Users/yehaixiao/asiainfo/ssm-demo/src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成mapper接口文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.ssmgen.demo.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"/Users/yehaixiao/asiainfo/ssm-demo/src/main/java"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">　　　　 <span class="comment">&lt;!-- 需要生成的实体类对应的表名，多个实体类复制多份该配置即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"TEST1"</span> <span class="attr">domainObjectName</span>=<span class="string">"Test"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用的是maven构建，首先需要在pom.xml文件添加mybatis-generator依赖包以及插件，配置如下：</p>
<p>dependencies中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在build的plugins中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">　　　　　　　<span class="comment">&lt;!-- mybatis用于生成代码的配置文件 --&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>maven build，添加命令mybatis-generator:generate</strong></p>
<p><strong>还有一种办法，构造一个代码生成类GeneratorSqlmap.java使用代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorSqlmap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//指定 逆向工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"resource/generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">                callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GeneratorSqlmap generatorSqlmap = <span class="keyword">new</span> GeneratorSqlmap();</span><br><span class="line">            generatorSqlmap.generator();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime text3快捷键</title>
    <url>/2019/07/28/sublime-text3%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h2><a id="more"></a>

<table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl+D</td>
<td align="left">选中光标所占的文本，继续操作则会选中下一个相同的文本。</td>
</tr>
<tr>
<td align="left">Alt+F3</td>
<td align="left">选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</td>
</tr>
<tr>
<td align="left">Ctrl+L</td>
<td align="left">选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+L</td>
<td align="left">先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+M</td>
<td align="left">选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</td>
</tr>
<tr>
<td align="left">Ctrl+M</td>
<td align="left">光标移动至括号内结束或开始的位置。</td>
</tr>
<tr>
<td align="left">Ctrl+Enter</td>
<td align="left">在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+Enter</td>
<td align="left">在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+[</td>
<td align="left">选中代码，按下快捷键，折叠代码。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+]</td>
<td align="left">选中代码，按下快捷键，展开代码。</td>
</tr>
<tr>
<td align="left">Ctrl+K+0</td>
<td align="left">展开所有折叠代码。</td>
</tr>
<tr>
<td align="left">Ctrl+←</td>
<td align="left">向左单位性地移动光标，快速移动光标。</td>
</tr>
<tr>
<td align="left">Ctrl+→</td>
<td align="left">向右单位性地移动光标，快速移动光标。</td>
</tr>
<tr>
<td align="left">shift+↑</td>
<td align="left">向上选中多行。</td>
</tr>
<tr>
<td align="left">shift+↓</td>
<td align="left">向下选中多行。</td>
</tr>
<tr>
<td align="left">Shift+←</td>
<td align="left">向左选中文本。</td>
</tr>
<tr>
<td align="left">Shift+→</td>
<td align="left">向右选中文本。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+←</td>
<td align="left">向左单位性地选中文本。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+→</td>
<td align="left">向右单位性地选中文本。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+↑</td>
<td align="left">将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+↓</td>
<td align="left">将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</td>
</tr>
<tr>
<td align="left">Ctrl+Alt+↑</td>
<td align="left">向上添加多行光标，可同时编辑多行。</td>
</tr>
<tr>
<td align="left">Ctrl+Alt+↓</td>
<td align="left">向下添加多行光标，可同时编辑多行。</td>
</tr>
</tbody></table>
<h2 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl+F</td>
<td align="left">打开底部搜索框，查找关键字。</td>
</tr>
<tr>
<td align="left">Ctrl+shift+F</td>
<td align="left">在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</td>
</tr>
<tr>
<td align="left">Ctrl+P</td>
<td align="left">打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</td>
</tr>
<tr>
<td align="left">Ctrl+G</td>
<td align="left">打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</td>
</tr>
<tr>
<td align="left">Ctrl+R</td>
<td align="left">打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</td>
</tr>
<tr>
<td align="left">Ctrl+：</td>
<td align="left">打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+P</td>
<td align="left">打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</td>
</tr>
<tr>
<td align="left">Esc</td>
<td align="left">退出光标多行选择，退出搜索框，命令框等。</td>
</tr>
</tbody></table>
<h2 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl+J</td>
<td align="left">合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+D</td>
<td align="left">复制光标所在整行，插入到下一行。</td>
</tr>
<tr>
<td align="left">Tab</td>
<td align="left">向右缩进。</td>
</tr>
<tr>
<td align="left">Shift+Tab</td>
<td align="left">向左缩进。</td>
</tr>
<tr>
<td align="left">Ctrl+K+K</td>
<td align="left">从光标处开始删除代码至行尾。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+K</td>
<td align="left">删除整行。</td>
</tr>
<tr>
<td align="left">Ctrl+/</td>
<td align="left">注释单行。</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+/</td>
<td align="left">注释多行。</td>
</tr>
<tr>
<td align="left">Ctrl+K+U</td>
<td align="left">转换大写。</td>
</tr>
<tr>
<td align="left">Ctrl+K+L</td>
<td align="left">转换小写。</td>
</tr>
<tr>
<td align="left">Ctrl+Z</td>
<td align="left">撤销。</td>
</tr>
<tr>
<td align="left">Ctrl+Y</td>
<td align="left">恢复撤销。</td>
</tr>
<tr>
<td align="left">Ctrl+U</td>
<td align="left">软撤销，感觉和 Gtrl+Z 一样。</td>
</tr>
<tr>
<td align="left">Ctrl+F2</td>
<td align="left">设置书签</td>
</tr>
<tr>
<td align="left">Ctrl+T</td>
<td align="left">左右字母互换。</td>
</tr>
<tr>
<td align="left">F6</td>
<td align="left">单词检测拼写。</td>
</tr>
</tbody></table>
<h2 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl+Tab</td>
<td align="left">按文件浏览过的顺序，切换当前窗口的标签页。</td>
</tr>
<tr>
<td align="left">Ctrl+PageDown</td>
<td align="left">向左切换当前窗口的标签页。</td>
</tr>
<tr>
<td align="left">Ctrl+PageUp</td>
<td align="left">向右切换当前窗口的标签页。</td>
</tr>
<tr>
<td align="left">Alt+Shift+1</td>
<td align="left">窗口分屏，恢复默认1屏（非小键盘的数字）</td>
</tr>
<tr>
<td align="left">Alt+Shift+2</td>
<td align="left">左右分屏-2列</td>
</tr>
<tr>
<td align="left">Alt+Shift+3</td>
<td align="left">左右分屏-3列</td>
</tr>
<tr>
<td align="left">Alt+Shift+4</td>
<td align="left">左右分屏-4列</td>
</tr>
<tr>
<td align="left">Alt+Shift+5</td>
<td align="left">等分4屏</td>
</tr>
<tr>
<td align="left">Alt+Shift+8</td>
<td align="left">垂直分屏-2屏</td>
</tr>
<tr>
<td align="left">Alt+Shift+9</td>
<td align="left">垂直分屏-3屏</td>
</tr>
<tr>
<td align="left">Ctrl+K+B</td>
<td align="left">开启/关闭侧边栏。</td>
</tr>
<tr>
<td align="left">F11</td>
<td align="left">全屏模式</td>
</tr>
<tr>
<td align="left">Shift+F11</td>
<td align="left">免打扰模式</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Code工具</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>不知所措 才是人生</title>
    <url>/2019/07/10/%E4%B8%8D%E7%9F%A5%E6%89%80%E6%8E%AA-%E6%89%8D%E6%98%AF%E4%BA%BA%E7%94%9F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="文章不能被校验,不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,这里需要密码" /><label>您好,这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="eaee12d6e7c00bb2738a106e580d189c0731a89e2a11a527c7d1fb148dcbdb20">1891c2f55963eb33cec4959065e0d19d624dfa841e2adaa6df565fe7a09fe6be5b106fde9c94e9910ed853e8cb2888049925589a46044541ede8ab1850974605ae871e22ea22fcf6c79be017c1937370c923f6e5657cd4de03c3db16db63e99208b7a3937071d072cc9ddc03d57c822bfbdd3d61dfd42db63beeedc87031482a5ad8cc99a0eea1bb8b343de1d70dc9925c6d3cfd68354d75de6286f4eb3b916cd353ce7331ba003d01a4b0550ef6cde3f5e3711dc23bfe3d34822db6610e22411d2d523eb8da740fbfbb3ffc7cb2a174e3597850b71e37016d60d066bf9862ef3053f87eed767ead75c988f1767442fa42a749b948309859569169821e730854b0ff6df78dba7a1259bb83da4273d4d236b11b84b8c4add8a98df832b4269a7e1439e29a54d3802bb7657f8a19123dcb013b6854af30f61b6587d440c6b3ff121cd0144b2b7791b87e684999d5cf098876d034b3df64fe89a8fc791e211cfe160a8db666d71ab702c76618d2a19ec6dc99fc562a2bdd552cfec23208e493e013a3dbc0960fc470717712b66caba1165bcd82ec4b9633424a0b9883ae82c3618f97ceb271a53d88c30cf9e03aaed61526fb1a4aa459eb91b1581a45ba6a2bd7fc84e882848d185907c64501bc51bb313c95d69f0f655d11d554c9318f46228236360f67267101c9bf565baac50486b2fd78fc68724a061056c365c052d5de122268ca00e9037ff5cf7d6df80692dcb81d6cf2ca74e6c61f8c0152c3ddf520635c6cee0cd3702eea2768e575b16d511b6320af1e6bcc3814a6e7318c9b213ff08efb52325016dafcaec33f0743f2f7c6f4fd983344d7dfc47bbab3b55510962a38d4634d164394968500a637db744c4d6998e22a86297e7ec3427ae2ceb2a343dd36e03e20ef8506267365ae6ceb20be2873ef7bda8c7d1916cf817e0081f6eac1297330c616108e2f836a9b78ca6b7faf97eb4e98e3fd2e3eecc68ec2ccb0aef1fc40dab1bb14f5ea628f565dbddfc322c9331ce7678ee9e3823b90249191946a153dec288a6bdb5102c067b50c148234ab773fb30cc4af126d282d6954bb0845876e695be47392bc9663e18f823732967e6fc9a8fae2f41d0beb86a9becac9035b9508ce48cd8e27040e1664128de49ea11044413d159b880a1c68155021db1beb848a30a6d061a6d5e14fa748511e03797d1262ca245f4508eb56185a109d90cca977dd9240c6ad14e49361584734a011c03ecce2cc40d614a6153ca75c98ed0f303beb8e35f8aabc0d3d6fbf0e2cd461a523713476d11093de4652dd004b8ec055240b513ba096285e51e6e8ce3bbff0f7dd882111626756cebeecc4a48fa4c9cee1c1ab479774766dea5db70d3c8e144d58629b7e85eb3d109e888dc0df5dec01f998dcdb6413ec91a1a0ee642c38c431cf783850f8dcf89ab4ce43b8bf426c0562318e0884329569bd56a3fb9b030380c7e671cfd9c6e9529f7a6ef4a1abd09310ed5f9c87b98f8bb800d4d447de4c5eba80517a5a5cb25b14e374236ad0e2b1bd6c90f1bb0e96604535e0466038fcb88488cf01e49cdb756705081fa47ca3c41a7f786c602f8b9424455351057ffe44de96684f4bdefd4c40af6c3e5be9ee16975b5ba49c0b755c7af8cafe746ab9adeb3905d9e8a62f1bc3a96be141682aed36903358fe9afbaa5f9ae99851b4e0673dfde3b449ea3276e7323db7b252e36b3ce4e93b991574bb1e2ff9e5c358e67c1c980da128deb662badf37593537da058d743916868333ff5bab82ab6a1c38b70f1c6706deee6e48406ce78d0e1b4fac84e19881e53cc68e54d35b29c8fd05d74c82287f36a0eac4d543f8518ac8baf8f7972cc94ce838985980d19c420c2e57cb93b9d7779a6152dcefe2af31c79e5c5f4856d0a34e94dfbbf8b36b6b3e51acb49ce7466274668b50a2c05fb9b9f9800ceee687b97f51b737844cdb1a640007d591093d024f84989c502017ce97ae0dfb376545f0044a77d9077bf4652ed4943a4e69cf8ed16ebc67c543cad8fad118376661a4440ae58d835079a8d94a30c930f766be2aa95548de91e953d43685544b4f2421c9ba9a8ea2fadfa656d35b5695118409b0dcef2d6231b1e4835d7bb68aa6add9fce2f0e121c70902b6feca8103ba75cc1a48477510f1a6c506eb6595d3e0adc2b3436679215f60babed5b25d921d425e93b2f87582c2c3e813397ee5308ed5565aa5810395bb73ef6bce3501901a94857c6ad62c677a8643dae41ae41f4965d18fe40c62a53e6ae57f6a0f684a4cf8f31040db51e24612ed5c9d3fb0f61d4d0274f245893f88dac3fcb4161d6a51824cd937415ea8f6cc6f2103980b10e7e83fa84806fa52932294ef683ee94c8783229726dc7284fa679b2cc754aa5c39a2c62d1d9319d7d78389f6a0b694ac5ed30757d593c887cf091b76bfef0d969218e8f3cd8f2d4dcb0fa49be2abc62ec99d68698f36e668c6e100885c5b8ff699580e16668b038f7a9bbe44b9a91fb094b0eb0e43397338222b97fd1f5c6f452e76bd1c9bede12f290fa78b2a9531166592bc281aaf8f7ccf5d232917f445838ae9ceb452076cdda982c934befc5f700f34404cbbef77490ab28e8704ae0378abca1ec934b4c99ed7f7749d2a12269dda1068261cca828e0812b16ed6a4bf9b580016936007b4697a0bf3af20631852349012f9a272ddbc159ece9f8871dcb66dc4d916f8c648d945f9272d5badf9e6557e3e9e7cc35e5ab47b56ea9849eb1af33ea20ea85f20ec7eb9f6afc463191346d505904bc3b64f775588a5af479d2518d7c187b5ff33adf48f99138dd04d289091c9ae0210c1d70dac8d4c041555bf1a2ba838937eff8a4c118847f51e2172d6b4391cac9971d17f62007346eaed9499af586b1bb6291cd16fc23d36032022463d68031fbfdf5c4a28aeacee940b7249536deb4638bda49761bcf78261e3b5dd709fe673aef593ff578cb6aad455160f031a3bb91a42ff2cc877a4d3bdd42372e3f50987777242edfcd8d2ed1fa009defa083b9d15554801b9a120f2d6d75e2835933e208aefec84d0a85ac3e42bf336f5b9ff332dea50ecbbc5775c009c8c4255a537472d0b47348a3df0b1c920e463b0401235310f5f35b95c3d8ecf530bf844efae4f26d6cc4cac3b073fb0e393f435d980222ffdeef56da810f914e06ad90dc65d28d6e6b78a374e968493e7495e1c26e56e0489c357364a93412c293a29467c65667d7e323697ffdea2baa5628102ca8eb28b20b66c5dd66275c0901fb8c0690446438b1e3085fbc4e20d7633c504b8dc7866afa1f42b95db04b912864352d819c4ba48c31d7519b6aed183fbe252e8482e32e822862b64592d59abb6e9fd6f04ce2c7326b268230aaf465c758f37281c830cefcea6aca5aaa75e0eeb90513ee1e5f6c94095b3e4ce7e2998456a3a7a0805cb053da4924c84101a58331d195e2db3beaf688e7a1b7b7fe389e4b5e4fb09b7c3cae2dbdd6befed786218552d0e7502f65945ef9e45e001f0e90b5c7db8f87dd52b19dde43d7d7f24b7ebd5274c8dd68057e7fe74bfe427ecf655bb80610a7910d74c3fab06b32278931523efca97124e8cdb02d35f2488e0c4820c456aa0fe6efed9e0ecb018364d6795441f8aaa25797d3c513bc1407fec6b9b3cb4970f1af432f8d54263df6da72709ba7f1031990622929abf4f54497ab8f1ea6fd058b2620e1eb906adcf7d3128b8f9cbf7c9bdf4c649a7124a0148d8432ba436d48ab5162e556c59f9824281970aa8e6a401a826ca5c0f77e00303816892e021ed8180bcfefaefa6cebd40e2772f86f5031259c82c3c74468c4e09119d206f6fbbd8c4addf4cd356e158e147e2304a6434ff348b94818ed68311c7f312bdcc508f6668ba8f76e614bf655193230c18b54205acef363d65443af8228cd295b5e54d02c05df01114ec1c9047fed9ba97a4754d0278bc2b3a663ea9fbb8dbd3f059763662172b5e40739bd4db15ad5e851a7286b0d0747b3aa31c5f89e6ea26465fc8d62fc1338eea124b1ef2b45202b47189e94c47342674798f761dc3ef9b6980ba2d7cec98ff7361365d7cabf38f8b1268f00a0c19efd2b3fff46381e2153884d014b0627f1bbf89502e2675295a774e22ef2211ee43b5165b268f79f2cf66541ca26a91970db6afc657821cd1ce317c46af42567c8cbfc2b6e401ee4f04f5595baa7a57be81e160fa4a1f4fd22cb388e0db659a57d61242672cb6d7df21b61c3c4c767d7cc615684e0315bd0a57754a63340bd9036554e0b80bb219c0b9344afbf2f37172072767abc91f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>感触</category>
      </categories>
      <tags>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>人呐</title>
    <url>/2019/07/19/%E4%BA%BA%E5%91%90/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="文章不能被校验,不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,这里需要密码" /><label>您好,这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="abbfab6797a6a6ba4d1ff441bb7a0a0e3325309ec0dfe29dcbe5934f1e87debe">1891c2f55963eb33cec4959065e0d19d624dfa841e2adaa6df565fe7a09fe6be5b106fde9c94e9910ed853e8cb2888049925589a46044541ede8ab1850974605ae871e22ea22fcf6c79be017c1937370c923f6e5657cd4de03c3db16db63e99208b7a3937071d072cc9ddc03d57c822bfbdd3d61dfd42db63beeedc87031482a5ad8cc99a0eea1bb8b343de1d70dc9925c6d3cfd68354d75de6286f4eb3b916cd353ce7331ba003d01a4b0550ef6cde3f5e3711dc23bfe3d34822db6610e22411d2d523eb8da740fbfbb3ffc7cb2a174e3597850b71e37016d60d066bf9862ef3053f87eed767ead75c988f1767442fa42a749b948309859569169821e730854b0ff6df78dba7a1259bb83da4273d4d2463d8f9739ae113d569fd3e0a1920bdf695a947c6e16a2cef21b914308c18dd1a39cd1471ffdd3d257855ecaf4c08db4a811bb65edf9cc310e69d6ad1dae4c7a8582c8ed496c0297ca699c08b01688bcffc4648737d6c518b9a5452fbce79382dc44e244148248d99c0cacd1e5ecdc59db3055100a2b260ba3e155285143207d680a6c7aa8a0e0f123951e043ede7a14cefbaa72d75aeecc5580d78aaf13af5e36cf2bebff1f84490c550be6186c1419799ef7cde79267d3fca7ffa14f3575626c0de0d0f62d4ee35f54c686d1b048979a7ac1347343a1d5c662a89bceebb1713ac0be2924cf487d0dfe5c63ede81e4416277c04307f550b74c5b8d14bbe9606820974cff3ab9478d9f709e0bfa9744f28119b2f4f2d359be8fc39d3bbd684cf2439db6ac065ed5281bc34abc505e2031406c593545637f1e375b4c45f3e02788f7568dc946bc5ed74394c78c52e4a246bc22be7e2f87cfce173decb13b2137030f9a361095343eb5b8a7e02dcaf21ebaf94895be852d32edb14d5d0c464f62750d184d0ac73338a7a257866333404d9b7e614b65d9e13537798a5ad50bc1c6ed5d1b2380fc547980a041a6d3fa0d492a2e76a793e1114698f08cdbb82be7b7d642b1535d4ca381aec5da910bd9afe78676848406dc2a9bda2c2dc9670838ab3599dcda6cfdbc51e937117164c141c25811bd1ebddae32133526f7c423c1c1675431ac16f98d21a788a6b67b9b4fc5a0c414221304be45b1212c284dc9c8fd7186ae666332c41e95b0229b2e57d480e5f165fc42f395292c70c8738aa7ef8e8bc62fe81965a4f66adb082474f80777b48762d6a11ac383899867ad1f5b33e84b1dc2d20510f2ed32f2196c903008b4648484982c4cb30384bac38a2105f42e7ee81c97bc697289fc7c7e6c8f1ab2e9e0fbc529b7e704201656e53529c6cca57ade4a57029defbb85fa951286e24ccb4edec80f97e39de00000ceee28505e5d2930384c8c6a0e2750db35b0231917d0278261c3ca02a717339f82964ea9f2521caca3f9c2606b77c4f5d294c5930681be8338f5c9962310b4637b49a9f3318f6c46a9bbcf3835b3d9a7ad13df177d98ec9f8a52be78ec3d0d6a151eb9ac4e34f423c97b73cfa438c9b0ef97d43a2e7ef6d8c1eb012878d9709dc543af1d3676aa73b113243210ff332b4f7e32d1c0350bcbe87c087c31129d49fa644728d6891e1ff1bea10d3fa8198fe4fff848c792894daa0b03e6cae207ce7cb5e9c47c46d9a1ab7aaed8a908f8af2289e51f245b5d658d64f319e307f09358fa172170b03fd7117de13806faaacda539d8f9b93d6415c2e86c0af30f61771e8b11eb6475be3a6646d8baca3138c68f2da8e87de1680f917bedc351e5c0b960ba2ee8ebeb4f5a7d2d0fdc07a2d6c418426b244f083ea52890f21210a31b841b4d558bb8742e85bfa80e2964009c51464a7ae51ca152ea92c2365c976a42e3e45ab51d53964b879230dfd5083c9f0430be3d5941b325e22606b8b12964e9c763ee793418e4fc1a14ccd9b9d19d886891c6f641dd916117f89835dd8353860b39847a6f3215a737489bb310a3c014b78e53c88ee226c4daffa249271339341c7098ac468173c7aab5e3a292f4b9aa2b5e036635b0d946cc2a1d77c60ea258115b842bf6f75aa15ba3e61a98977e38865c5a2044fb650d781950e64c339a1226e3c038c13aacbb9f7c42615aef3f4e9f7f7bd82a4d8337b458c839ad492bb56d8c416f1ce429c8d6ceb2b4897ae218c1a877146d3b47d8b4b5639d0091299422d84663558e7be407c311a4d9af121aea7ca7b966f15973c38dc4da02e5ccdb06c031f19e665b6e0ac2b46fd99ee8b3d1231704f8b1134306bd89e5c49eec37b8ee1ce1a6deb576f0a0b8c70b452137a51e551c0dbf9a400c5f7ec48c7a672d386d4cda8f6ebe8b2b1d79f9003477a6624849daaf5a8ff55955feaef6520d3903943894427f085fe3207fe807d4ae9956cb606f723aed5553c35f3b1efbeff2c67a33c01924f94bc69c6abf3bfec1495cd07685d8a396a16a1af394faf140a6f781e5546db9f4a5ef5cbf51f67b9fa6f4239d7489e9105243049e36d2d90ddc5c5166cb58100863bddc27a66d8f4f156ea46bf03f9d77d95081ad11c9292946a85488a0108022f1f947096597e252c3ab7993dc54daf293f6926891ae9a1ee177a5fedee5fc61ae9ccb8cdb844bf7f5fa240e197d065240df3c5fde91d51c63b3e0614042f435903ed56c68535cfde61f75772f56f3cf753d5e6f6cfa1cdce4199850c6fe32bf3a638cfd8bbb250b24d10e008b140ce71f5271ffd4a48469fdc23990bd785d9c4a03e453570a3011284ca2b88f8b0019a50b9aed5dbbf36d34414ebea1155f751b74a6c4fae624de42b81c3df4fe15e196b0a5ff5e6ff938922b0d7311f84bc61b983e85c74e41661af4e12c8de68c2ffe54b072f907d9fa044c2787b829a1677e602449fa47253323c1d59f4e664b410efa59be5a1df46033ffb34b4242d92b51089ec072e4bf4d305ae465a80ed4e02d1eba8f4425b1e17b33ca004394835c37891f80c4cbd8ac09a83ae3aea5b043917e4eebad59853436a86ad5096526b75f64e75fa3b8faaf443f0fb219e1431185d3631d2748c42861697de81ae2d2a07536cce82b07c6047dcebd7d164ff62d53c7db6202cf801f16bb22d029497cd8b8c3d371db74bc30c37054f30d4909ff0bcb05853b3403d3c77062e92ab39f2867912ea1438d5731193aa495a00cfb3ecd</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>感触</category>
      </categories>
  </entry>
  <entry>
    <title>傍晚的一件小事</title>
    <url>/2019/11/17/%E5%82%8D%E6%99%9A%E7%9A%84%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>买了个键盘准备换货，结果发现换到手的还不如以前那个，然后又想把以前那个换回来，和那个快递大哥打电话，说把以前的那个拿回来吧，大哥说3分钟就到，结果我在楼下一等就是半小时，等的我又催了他一遍。来了之后，大哥边拿货边说，真的不好意思，这几天货多，人也催得紧，半路上接了电话说，刚才媳妇子开了个三轮出去，又把别人的车给擦到了，还得去处理。说完这句，我就突然的心酸了，摸了一下兜，发现正好带了烟，也不知道大哥抽不抽，就递过去了，大哥接了，顺势我给他点上，给自己也点上。顺势拍了拍大哥的后背，想说点什么，又不知道怎么开口。最后还是说一句，这生活不就一个麻烦接着一个麻烦么，别急，事儿一件一件办。来来回回聊了几句，烟头也近了，人也散了。说了一句，哥，去吧，你媳妇儿还等你呢。看着那远去的尾灯，其实谁又不是笼子里的人呢？</p>
<blockquote>
<p>——2019年11月16日</p>
</blockquote>
]]></content>
      <categories>
        <category>感触</category>
      </categories>
  </entry>
  <entry>
    <title>失败之路</title>
    <url>/2019/07/10/%E5%A4%B1%E8%B4%A5%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1）缺少领导支持"><a href="#1）缺少领导支持" class="headerlink" title="1）缺少领导支持"></a>1）缺少领导支持</h2><p>管理层必须参与和投入。</p>
<p>在 NASA，工程师知道密封圈有缺陷。显然，不管是他们，还是管理层，都不想看到灾难发生。让我们回归根本，敏捷宣言告诉我们，“在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。”“必须”一词是经过慎重选择的。如果管理层最终代表业务，就意味着他们应该花时间到开发人员中间去工作，感觉就像公司里的一名工程师。参与和投入意味着在同一个战壕里——拿着项目自己的“O 型圈”，了解工程师们正在谈论的内容。</p>
<a id="more"></a>

<p>在一家独立的软件公司，研发部门副总裁引入了一家敏捷顾问公司帮助组织转型。在最初培训期间，该副总裁表达了对 Scrum 概念的怀疑。她不想将自己的观点强加给团队，就花时间和工程团队呆在一起，观察他们如何工作。她第一次看到，测试人员和程序员如何一起实现每周的增量价值。“我不明白”，她告诉我们，“但每个人，包括客户，都很高兴，像这样，到了最后，与我无关了。”从那以后，她开始放弃她的命令式风格，这种风格在组织中非常普遍。</p>
<h2 id="2）转型目的缺失或不明确"><a href="#2）转型目的缺失或不明确" class="headerlink" title="2）转型目的缺失或不明确"></a>2）转型目的缺失或不明确</h2><p>企业必须明确希望从敏捷得到什么。</p>
<p>“变得敏捷（Becoming agile）”是一项艰苦的工作。它需要不断地实践，打破旧习惯，采用新思维，这仅仅是其中的部分挑战。它意味着组织需要投入大量的精力调整文化。</p>
<p>如果你连正在努力解决的问题都不清楚，那么就需要更多的精力来保持动力。首先定义好你希望从敏捷得到什么，并不断地改进那些目标。还有，是的——每个人都那样做并不足以成为采用敏捷的理由。你必须眼睛盯着自己的问题，弄清楚为什么希望作出改变。</p>
<p>在大型企业中，最高管理层选择敏捷是为了缩短上市时间、改进质量、加强沟通以及更好地适应变化。但管理层并没有给这些目标指定一个优先级，TTM 和质量相互矛盾，会妨碍沟通改善。由于变革目标不条理，一段时间之后，这四个目标就被人们完全遗忘了。</p>
<h2 id="3）组织结构与角色和敏捷不相容"><a href="#3）组织结构与角色和敏捷不相容" class="headerlink" title="3）组织结构与角色和敏捷不相容"></a>3）组织结构与角色和敏捷不相容</h2><p>现有的团队结构必须不会妨碍“完工”。管理角色必须不会妨碍服务型领导 / 学习文化。</p>
<p>敏捷宣言告诉我们，“最好的架构、需求和设计出自于自组织的团队。”过分依赖其他团队的团队无法实现自组织——例如，如果开发团队依赖于测试团队来推动工作“完工”，那么该团队可能会表现出对他人无益的行为，如归咎文化或冷漠。</p>
<p>同样地，强力或高压领导很可能会导致对领导者的依赖，留给创新和创造力的空间很小。由于我们的行业依赖于创新和创造力，所以我们希望团队成为它们生长的沃土。团队角色和任务的多样性是关键。</p>
<p>根据你希望创造的价值建立组织结构，这样，人们就可以更独立地工作，减少对管理人员的依赖——反过来，管理人员可以帮助那些人提高。</p>
<p>一个大型的政府组织在他们的软件研发部门实施 Scrum。软件 QA、BI 和 DBA 分属不同的部门。每当研发团队需要其他部门的支持，研发团队负责人就不得不接洽其他部门的负责人，请求他们腾出时间。研发团队的成员觉得，他们必须尊重其他非敏捷团队，这让他们觉得被推入了一种瀑布式文化。</p>
<h2 id="4）破“构建”理论"><a href="#4）破“构建”理论" class="headerlink" title="4）破“构建”理论"></a>4）破“构建”理论</h2><p>不修复问题释放了允许质量糟糕的信号。</p>
<p>上世纪 80 年代的<a href="https://en.wikipedia.org/wiki/Broken_windows_theory" target="_blank" rel="noopener">破窗理论</a>指出，忽视像破坏公物这样的小罪会向人们释放更严重的犯罪也会被忽视的信号。后来，纽约市市长 Rudy Giuliani 采纳了这种方法，应对轻微犯罪。被破坏公物的人打碎的窗户会及时得到修复。警察接受训练，对付罪犯，帮助社区处理轻微犯罪行为，而不是忽视它们。结果难以置信。纽约市臭名昭著的危险区域成了最安全的区域之一。虽然有人批评这一研究不科学，但这种方法在其他城市也得到了成功应用。</p>
<p>类似地，对于软件组织而言，这几乎是不言而喻的：如果你忽视了有问题的构建，如 Bug 或者拼写错误，那么你就释放出了可以不编写单元测试、不重构，或者不按照需求开发的信号。标准就是这样形成的。</p>
<p>另一种选择？不要厌烦查找问题原因，确保问题得到修复。成为你希望达到的标准的榜样，并赞扬那些追随你的步伐的人。其他人也会这样做。</p>
<p>一个软件开发团队不断地抱怨其他团队的工作如何导致他们失败并偏离目标：“当他们改善了他们的工作，我们就可以开始着眼于自己的工作了。”有一天，Scrum 管理员（SM）安装了 Jenkins，并借了一块大屏幕展示构建状态。</p>
<p>第二天，构建变红了。SM 和一名工程师开始调查原因，不到一个小时，他们就在另一个团队的代码中发现了 Bug。不到三个小时，Bug 就修复了，在安装 Jenkins 之前，这可能需要数周。</p>
<p>几周之后，SM 开始试验 JUnit。等那一完成，他试验了 RESTful API 自动化（此前仅仅是测试人员的职责）。逐步地，这个团队的成员不断打破界限，修复他们的破窗，增强他们的敬业精神。沮丧日益成为一种偶然，而不是一种心态。</p>
<h2 id="5）严格把关的过程"><a href="#5）严格把关的过程" class="headerlink" title="5）严格把关的过程"></a>5）严格把关的过程</h2><p>传统方法妨碍了任务完成。</p>
<p>这一条要追溯到 17 世纪或者更早的时候。“<a href="https://en.wikipedia.org/wiki/Ren%C3%A9_Descartes" target="_blank" rel="noopener">我思故我在</a>”是笛卡尔二元论的一个来源，该理论认为，精神和肉体是分离的；你要么想，要么做。19 世纪末，科学管理之父 Frederick Taylor 将笛卡尔的观点解释为，思考和计划应该从体力劳动中分离出来。在软件开发中，这些观点告诉你，你要么考虑设计、编码和测试，要么就做——但不能同时。你应该计划如何以及何时做每一件事。这并不是真正的敏捷。</p>
<p>敏捷宣言指出，“敏捷过程提倡可持续的开发速度。责任人、开发者和用户应该能够保持一个长期的、恒定的开发速度”——不是一个阶段接一个阶段，而是一直。</p>
<p>“僵化的关口（Rigid gates）”，如市场（MRR）、需求（BRR）、测试（TRR）等，支持项目不同层面的“完工”。这里，敏捷与传统存在冲突，有时候还很严重。</p>
<p>由于传统通常不容易改变，所以只能一次处理一个关口。通往敏捷失败的第一条路是缺少领导支持，因此，组织领导必须参与并投入消除无用的关口，一次一个。</p>
<p>政府组织已经使用包含需求、分析、实现、测试和 GA 关口的关口系统很长时间了。软件研发团队已经在他们的流程中实现了 Scrum，并在每个冲刺中交付可以工作的软件。但团队仍然需要和测试冲刺同步，在通过公司约定的审批关口之前，不能正式发布。</p>
<h2 id="6）培训不足"><a href="#6）培训不足" class="headerlink" title="6）培训不足"></a>6）培训不足</h2><p>有时候，公司希望一次培训就让所有人都知道如何实施敏捷。</p>
<p>比如你希望完成一次马拉松。那需要能够跑完 42.2 公里。假如你不是一名正式的运动员。你是从零起步。经过一个为期三天的速成课程培训后，你能做好跑马拉松的准备吗？你怎么可能在那三天里学习到所有可能的问题和情况呢？</p>
<p>从非敏捷到敏捷参与者的情况类似。在为期两天的课程里变成一名专家的可能性几乎为零。你必须投入更多的精力和资源来提高敏捷性。</p>
<p>“我们只有一次机会，预算就那么多，因此，我们能做的事情并不多。”这句话描述了一场面向多个团队的初步培训会议的背景，这些团队正着手开始他们的 Scrum 之旅。管理层决定举办一场为期一天的会议来教授 Scrum，由发起敏捷并了解 Scrum 的常务副总授课。先不说人们在理解 Scrum 的作用、仪式和人工制品方面存在差异，实际上，每个人都将 Scrum 视为另外一种项目管理技术，并不理解诸如自组织这样的概念以及迭代工作的实证方法。通过努力，只有两三个团队开始过渡到敏捷思维，但对于大多数团队而言，敏捷仍然只是微观管理的一种新方法。</p>
<h2 id="7）“敏捷只为圣诞节”的实施方法"><a href="#7）“敏捷只为圣诞节”的实施方法" class="headerlink" title="7）“敏捷只为圣诞节”的实施方法"></a>7）“敏捷只为圣诞节”的实施方法</h2><p>敏捷不仅仅是待办事项清单上的另一个项目。变得敏捷是一次旅行，不是一个一次性的项目，也不仅仅是另外一次实践学习。</p>
<p>相当直白地讲，对于许多组织而言，变得敏捷意味着改变运营系统。是的，“达成敏捷（being agile）”意味着采用新的运营方法，但更重要的变化是理念。许多组织的运营都遵循泰勒学派或笛卡尔的理念：管理层负责结果；其他员工负责执行。</p>
<p>让敏捷被接受需要自律和毅力。可能需要花费数年的时间才能达到组织可以号称自己敏捷的转折点——并不是说那时你就可以停止那样的工作方式。到那时，你们甚至不会再考虑其他的可选方案。你们已经调整了文化。</p>
<p>有家大型的国际化企业踏上了敏捷之旅。工作现场会有一名教练，帮助团队和管理人员应对他们每天的挑战，并根据他们的成长和兴趣逐步实行 Scrum。在这个过程进行到大约两个月的时候，一些痛苦的问题开始浮现：例如程序员不想测试，座位安排妨碍了有效工作，团队责备其他团队。接着，预算用完了。留给公司的是残缺的 Scrum 和很多的失望。六个月之后，人们开始自己组织学习敏捷，这次没有现场支持，为了获得期望的结果，他们更加努力。</p>
<h2 id="8）与兄弟部门目标不一致"><a href="#8）与兄弟部门目标不一致" class="headerlink" title="8）与兄弟部门目标不一致"></a>8）与兄弟部门目标不一致</h2><p>所有参与的部门必须遵循同样的游戏规则。</p>
<p>在物理学中，当波形产生一个恒定的相位差时，波源就是相干的。当波源的频率或方向不同，或者两者都不一致时，它们不相干。在音乐方面，我们立即就可以知道我们听到的声音是否协调——可能只是听错了。</p>
<p>对于组织团队而言，亦是如此。</p>
<p>如果组织的一个部分关注交付速度，另一部分专注质量，即使他们步调一致，结果也不会一致。当相互依赖的团队努力的方向不一致时，结果就会不一致。</p>
<p>成功的团队会统一他们的时间表、目标和宗旨。</p>
<p>譬如，那不是说所有的团队都要统一他们的工作程序。只有当兄弟部门需要统一他们的价值、标准和成功定义时，才需要进行这种调整。如果那让你想起了领导支持，说明你逐步理解敏捷了！</p>
<p>两个从事同一款产品开发的部门已经在他们的工作流程中实现了 Scrum。一个部门正在开发提供产品 KPI 的度量工具。他们关注度量质量。另一个部门正在增加新的产品特性。他们关注特性交付速度。两个部门互相依赖：提供 KPI 需要调用产品特性的 API；没有 KPI，新特性就没有“完工”。两个部门都对自己的敏捷实施以及敏捷对他们实现价值的助益感到满意。但也只有当两个部门在一两个冲刺中试验性地交换了专家，这两个部门才真的弥补了他们之间的差距，制定出了包含对方需求的“完工定义”。</p>
<h2 id="9）缺少足够的适应性指标"><a href="#9）缺少足够的适应性指标" class="headerlink" title="9）缺少足够的适应性指标"></a>9）缺少足够的适应性指标</h2><p>使用虚荣指标会导致失败。</p>
<p>敏捷宣言的第七条“可工作的软件是首要的进度度量标准，”因此，不管你选择了什么指标，都应该能够度量工作如何对功能性产品有所贡献。</p>
<p>打开或关闭的缺陷数量、速度、速度趋势、“承诺 - 完工比（committed-versus-done ratio）”，诸如这些指标都可以度量贡献，但并不适应于一个可工作的产品。</p>
<p>The Organisation Within 一书的作者的 Larry Hirschhorn 将这种指标称为“偶像”。它们或许可以代表实情，但基本上没有。</p>
<p>相反，客户满意度、员工幸福感或者媒体报道可能是更好的指标。</p>
<p>不过，按照 Mark Twain 的说法，指标和尿不湿一样，应该经常换。每个指标都可能失效，因为人们会根据你度量他们的方式行事。因此，不要试图寻找一个可以裁定所有人的指标。你度量的东西应该和产品及团队的成熟度有关，而且你应该尽可能经常地替换它。</p>
<p>一家大型企业利用一系列工具来帮助敏捷实施，并且自己在上层构建了一个报表工具。该工具已经逐步发展成为一个 BI 平台，可以随意处理各种数据：速度、连续运转效率、WIP 随时间的变化（即 CFD）、承诺准确性，等等。于是，一种新的文化形成了：临近每个季度末的时候，项目经理花费几天时间，进行周密地过滤，把最好的报表展示给利益相关者。不管车间里实际上发生了什么，只要报表看上去好看。</p>
<h2 id="10）“将-Scrum-和敏捷等量齐观”的实施方法"><a href="#10）“将-Scrum-和敏捷等量齐观”的实施方法" class="headerlink" title="10）“将 Scrum 和敏捷等量齐观”的实施方法"></a>10）“将 Scrum 和敏捷等量齐观”的实施方法</h2><p>当“技术性的”Scrum 意味着“完工”的时候，这是成立的。</p>
<p>敏捷的范畴比 Scrum 要大得多。Scrum 是最流行的开发周期框架，只处理一个方面：一个或多个团队接受一个需求积压列表，并用一个较短的反馈循环完成它们。Scrum 本身并不涉及工程卓越、总体目标、扩展使用 Scrum 优雅地处理了扩展）或者长期规划，等等。</p>
<p>优秀的 Scrum 管理员知道那些，并帮助他们的团队、产品经理和利益相关者实现多方面的改善。</p>
<p>就是说，优秀的 Scrum 管理员并没有真正的践行 Scrum。他们是在 Scrum 环境里操作的敏捷实践者。</p>
<p>一个中型组织希望实施 Scrum。一场组织分析澄清了这个过程：从改善工程实践入手，因为组织第一个可能遇到的问题会和代码有关。尽管出现了发布过程痛苦冗长、怪罪文化盛行等症状，但在接下来的多次会议中，组织领导者还是坚持继续推进 Scrum。这段旅程使得团队成员之间的关系不断恶化，直到组织完全放弃了 Scrum。</p>
<h2 id="接下来做什么？"><a href="#接下来做什么？" class="headerlink" title="接下来做什么？"></a>接下来做什么？</h2><p>现在轮到你逆向分析这篇文章了。</p>
<p>这篇文章不是要让你放弃敏捷之旅。</p>
<p>相反，它是要让你坚持下去。</p>
<p>如果你发现自己陷入了这里提到的一个或多个反模式，那么问下自己，你可以做点什么来改变它。你可以做点什么不同的事情，以一种你可以操作的方式，变得更加敏捷呢？哪里是你忽略了的 O 型圈，什么反模式促成了它，如何摆脱它？</p>
<p>一家大型企业在他们其中一个研发部门实施了 Scrum 和看板。接下来，产品经理和团队之间的关系变得紧张，组织引入了一家外部供应商就团队工作协议组织召开一场研讨会。虽然预备会议表明团队层面存在一些挑战，但更大的挑战来自领导者。例如，虽然管理者相信敏捷，但他们没有为团队工作树立好榜样。</p>
<p>团队研讨会被一场管理团队组建会议所取代。研讨会的结果是一份待变革事项列表：正式确定部门的目的和价值；澄清管理团队成员的角色；定义并拥有标准，尤其是对于外部依赖，等等。通过设置自己的变革看板及承认运转问题，管理层开始消除导致敏捷失败的方式，并代之以渐进的步骤，为敏捷团队树立一个榜样。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>寄言</title>
    <url>/2019/08/18/%E5%AF%84%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>在很久很久以前的魔法时代，任何一位谨慎的巫师都把自己的真名实姓看作最值得珍视的密藏，同时也是对自己生命的最大威胁。因为——故事里都这么说——一旦巫师的对头掌握他的真名实姓，随便用哪种人人皆知的普通魔法都能杀死他，或是使他成为自己的奴隶，无论这位巫师的魔力多么高强，而他的对头又是多么虚弱、笨拙。</p>
</blockquote>
<blockquote>
<p>——弗诺·文奇《真名实姓》</p>
</blockquote>
<blockquote>
<p>真正孤独的人从来不去想别的，因为如果你已经很孤独了，又救不了自己，你所能做的只是不想。</p>
</blockquote>
<blockquote>
<p>——江南《龙族》</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>我们可以找出一千个得过且过的理由，同样能找出一千零一个反驳的理由。一个，只要一个必须成全自己的理由，就足以抵过千军万马，攻城略地。</p>
</blockquote>
<blockquote>
<p>——谢姣姣</p>
</blockquote>
<blockquote>
<p>无论他们到什么地方去，都应该记住，过去都是假的。回忆是一条没有归途的路，一切已往的春天是无法复原的，那最狂乱而又坚韧的爱情归根结底也不过是一种瞬息即逝的现实。</p>
</blockquote>
<blockquote>
<p>——马尔克斯《百年孤独》</p>
</blockquote>
<blockquote>
<p>人生最好的三个词：“失而复得”，“久别重逢”，“虚惊一场”，唯独没有那个词叫“和好如初”，和好容易，如初多难啊。</p>
</blockquote>
<blockquote>
<p>——网易云热评</p>
</blockquote>
<blockquote>
<p>政府通过所能运用的一切宣传机器，千遍万遍地在全国反复重申。于是，一种官方说法终于站住了脚，这就是：没有人死亡，工人们已经满意地回到了家里。</p>
</blockquote>
<blockquote>
<p>——人民万岁</p>
</blockquote>
<blockquote>
<p>想要忘记一段感情，方法永远只有一个：时间和新欢。要是时间和新欢也不能使你忘记一段感情，原因只有一个：时间不够长，新欢不够好。</p>
</blockquote>
<blockquote>
<p>——张小娴《面包树上的女人》</p>
</blockquote>
<blockquote>
<p>让自己喜欢的女孩子小瞧了自己，这本身就是一个悲剧。</p>
</blockquote>
<blockquote>
<p>——J.Nmeo</p>
</blockquote>
<ul>
<li><strong>本文作者：</strong> J.Nemo</li>
<li><strong>本文链接：</strong> <a href="https://muxiaoning.github.io/2019/08/18/寄言/" target="_blank" rel="noopener">https://muxiaoning.github.io/2019/08/18/寄言/</a></li>
<li><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank" rel="noopener">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>常用的插件合集</title>
    <url>/2019/09/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="文章不能被校验,不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,这里需要密码" /><label>您好,这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="51ad960a95d90d7adb833fe2249ef879cb948f9d3f6dce6ba148ad89a21d6863">1891c2f55963eb33cec4959065e0d19d624dfa841e2adaa6df565fe7a09fe6be5b106fde9c94e9910ed853e8cb2888049925589a46044541ede8ab1850974605ae871e22ea22fcf6c79be017c1937370c923f6e5657cd4de03c3db16db63e99208b7a3937071d072cc9ddc03d57c822bfbdd3d61dfd42db63beeedc87031482a5ad8cc99a0eea1bb8b343de1d70dc9925c6d3cfd68354d75de6286f4eb3b916cd353ce7331ba003d01a4b0550ef6cde3f5e3711dc23bfe3d34822db6610e22411d2d523eb8da740fbfbb3ffc7cb2a174e3597850b71e37016d60d066bf9862ef3053f87eed767ead75c988f1767442fa42a749b948309859569169821e730854b0ff6df78dba7a1259bb83da4273d4d2d4d2675f39fc18e8bfaddf2902ce77547d70fc7703ad3e53961e2c1a9772e5fadcbad8271436a61e89ee02d845a8203ad1b30518fdc982e5e95f1ef01837a81a572e8f6d1006f099007b60dfdfc06e9544bc89f3361f5b74b29f630e033dd6257ea2a2ae198e3b5a97e053d2e14689e4fa257631a18d071324a529aea3b266437028bae43536c0c56054ee900c26567e1c51aa0fa3edbf695e8a59749bbe37bc0804dda004163e58680a05bd286effb53dbbe9f8504bbffd1961a573de45ce3aee0e3145c8ee6c585c1d2e9c255a846a5e32f000671bf03346a3a0a41c37c8371d90f8643f38424b730a2d76f0da71b961ad549dfd607a3774cea377997c0b2ca3d2a0c958442e9038e85f418fdb096a4aa1e43bf5919615061b268561aefff1d329a52f8bb4a4f029fba39f925d8a09cb089b7a1cfc323f2f0ce209f1cf7eb68c60e14055b505f1f91e506b1dd5fd0effef01469331cff6a9a076e6b9f2007ee2ace095d66056255e6ff73ecf09d9f4b9b91533642b5900bb8b9e475a1d00656121a0b93a2367d0498be0c3f2804c45f01785f963f33e21996fe0cf1c14fe2b3a03e969d44e651c8e793a44c46846b22ea08480e88787b7d0c9c4f2c9110ff749660584dc03339541302484620a4cf165c7746df1f5fe3ce5f67d224bfa6f7eaf5b328b30349be848723b974e0709543f2a2bb2e29540b2f6de0177582bb6964140bbbea922c56db3e7648919a51b84ed843b83375565ce1d5f51c5059a11102040f768ec4da72d01f3f74eb46a907e130ed7fc1187226cd67e0989c55372d768ebe97b06575ca7bd117d9acca52809ae031e4d1a244be3eb508eb939ecf558b8ead142d624c5f72ffca69d2c19a097951a29971ae5d61bacf2a9a0cdf22b71634be39da4147ff17132c31d4a48db7c44581d4ea3ed1e231c9bd2764a4b71dbf6507b61f3a9ef1fee102393409804e2d299e96d5c14c05b0a4afcb031f32cd1be5016502dfd1e40500595480aa17fed36ffc2e2661722899522945adba28af2f2345ad4f8fe1a33ec2a420d25981864019e423393907950b0a841448ae57cbed2937a63e5dd7fad7b51827494d6da56ecf0199a8ea2a46986cd99ab40daa28503dffb9ebb89afd3321147383a4de3779a8937818ba663ad8fdfa158584f6aba9378867214c89cd7d9b1e68b9ac5637953c7b6e92896945e61596e61e8e4f0bf8829d88e6854ea6eda06af4c4f5eae4d50599f032668b13516d78a51720403c992ff83f81ed2016695ee5a3392ec7344457ee7a273798519c9f1c8de3e66dbebcfd2a355525eee4a3a1d1e924801bfc8fe9ad3df66f79d5b8a78a4be3c5e6e57144de72b78eab6d46aca6d4f0a2ae61013dcf70f0944ca97214ac13db16aaa5eb1586bf89e3d14b2b7e6040ce9a2e5a05373996244fa91fdfb3befd724d8acbcf32d41871213a91fc163fcf3a2e66ccdc67fd64d751476b0e3c03152b0308920056090da06d5e86b27d1fd501920e8a982611c9dadcd238301b16723b5fdfa4c0d0eb7ac8c35a67a9e5563ba39876ca346a7206ca69fa1454192afc4beae8c917503bc57afb2be352c3a6253dca2d0d063d518bdc2dec3b52e634f4ce8bc1044d19eb4d12633226b80d53ffdce6080ce1a6ba223d5ba34cd73e827333f6f0f1995f3731e9e24ea50538ce0c83236479bec9f90ef7c5b2855c149bc52189904e20ca2e9dee163cd150a5980112962626b3ae6e9270d109b3c364ded46b5cabb2c08f50c692d3849eac0fea5e4ad8b0b2cfc906a9f3905457304f54f436bc43c8967ffb5bb9b9e40b0311d3d868d8e43b3c7b4c0ce62d0a86169b4ffaa977a8988c26f09722e02e523e27c216c24846e96386b69d57dec31fefbcd47b8f04895591dbbd2cdb503b1344a0b24e63c9184c89a86772b091e9063182bce7278a99751aed0f9c272b7cb2aeb0ce0985fc70b9f8bb7701ff81df26596900e2384380be3a199e4d84035b3e4ee397ad73e59f71bb82cbb8c95d1d6dff766ffb16e92ff4b7b58be4f885d1ebfafe80d9ab6737686814480ab417cd49da5a73c9d4194cffa5e4adb3b2f736bc3f2e2a3e84cdd4045fff9ccd073f3c16b43240e6f3a7d474baa4abf2b3dbd2255b11a12aff2b1093e09fec294956459acd2a85685f35e1b773e0fd0e6297ba2254c5ee8c9157377feaae52d840545b0a02e6b52e0069f5a5c1ec1eae0f34277aa55d00fbb3464304f0c3c69b7556ff39a3408bd724fb084436360c4753f814bdef01beaf42483f5a3b3cfa64e84c0c324ca77ed8ea391f639015f3f3d6bca6ebd65deb91feca365410375a6c3c43145db2b29195d13de98ba</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的软件合集</title>
    <url>/2019/09/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>这些软件目前是我自己使用的，为了预防换机带来不必要的麻烦，留作备份。</p>
</blockquote>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>IntelliJ IDEA 2019.2.1 x64</p>
<p>JetBrains WebStorm 2019.2.1 x64</p>
<p>PyCharm</p>
<p>Vscode</p>
<a id="more"></a>

<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>node.js</p>
<p>jdk</p>
<p>python</p>
<p>Vue</p>
<h2 id="开发辅助软件"><a href="#开发辅助软件" class="headerlink" title="开发辅助软件"></a>开发辅助软件</h2><p>Xshell</p>
<p>FileZilla</p>
<p>Postman</p>
<p>Vmware</p>
<p>Git</p>
<p>Svn</p>
<p>TortoiseGit</p>
<p>TortoiseSvn</p>
<p>Maven</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>Mysql</p>
<p>Navicat Premium 12（复合型的数据库图形化的工具）</p>
<p>MongoDB</p>
<p>Redis</p>
<h2 id="图片（截图）"><a href="#图片（截图）" class="headerlink" title="图片（截图）"></a>图片（截图）</h2><p>IrfanView</p>
<p>FastStoneCapture</p>
<p>Snipaste</p>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>Potplayer</p>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>MindMaster亿图思维导图</p>
<p>Xmind</p>
<p>MyDraw思维导图</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>pandownload beta</p>
<p>Internet Download Manager IDM</p>
<p>迅雷破解版</p>
<p>Motrix</p>
<h2 id="小玩意"><a href="#小玩意" class="headerlink" title="小玩意"></a>小玩意</h2><p>fliqlo（一种时钟壁纸）</p>
<p>f.lux（保护眼睛）</p>
<p>Windscribe（短期使用）</p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>火绒安全</p>
<p>Wise Care 365</p>
<h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>Bandizip</p>
<h2 id="文档编辑器"><a href="#文档编辑器" class="headerlink" title="文档编辑器"></a>文档编辑器</h2><p>Editplus</p>
<p>Notepad++</p>
<p>Subime text编辑器</p>
<p>Atom</p>
<p>Vim</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>Chrome</p>
<p>Firefox</p>
<h2 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h2><p>wps2019政府专用版（推荐）</p>
<p>office365</p>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>Wise Memory Optimizer</p>
<p>Wise System Monitor</p>
<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><p>Everything</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>IObit Uninstaller Pro</p>
<p>GeekUninstaller</p>
<h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p>PDFelement</p>
<p>SumatraPDF</p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>Typora</p>
<p>Yu Writer</p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>Simple DNSCrypt</p>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><p>cmder</p>
<h2 id="系统检测"><a href="#系统检测" class="headerlink" title="系统检测"></a>系统检测</h2><p>CPU-Z</p>
<p>hdtunepro570</p>
<h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>caliabre</p>
]]></content>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>这是一个很长的故事</title>
    <url>/2019/08/30/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E9%95%BF%E7%9A%84%E6%95%85%E4%BA%8B/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="文章不能被校验,不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,这里需要密码" /><label>您好,这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="ac99b5c02f2a342148fe8a866e43264bae4f525d2e6bc62a671068a5a68047f2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>感触</category>
      </categories>
  </entry>
  <entry>
    <title>霍乱时期的爱情</title>
    <url>/2020/07/01/%E9%9C%8D%E4%B9%B1%E6%97%B6%E6%9C%9F%E7%9A%84%E7%88%B1%E6%83%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>趁年轻，好好利用这个机会，尽力去尝遍所有痛苦，这种事可不是一辈子什么时候都会遇到的。</p>
<p> ——马尔克斯 《霍乱时期的爱情》</p>
</blockquote>
<a id="more"></a>

<hr>
<p> 和杜哥喝完小酒，趟着小城的微风急急忙忙的去医院。恍恍惚惚还忆起旧时光景，哎，年轻时候的友谊总是在嬉笑打闹间变的深刻。过了马路，走进门诊，看到欣哥在那来回踱步等着取药。我透着玻璃看着这个哥们，嗯，好久不见了，人又胖了些，头发带着锋利的棱角感，熟悉的模样。快步上去打了声招呼，跟着他往病房走，跟着我这兄弟着急的步子，我脑子中就浮现出霍乱时期的爱情这本书的名字。</p>
<p>我已经很久没有像他一样走的这么快去奔向那个令我着急的人了，也可以说暂时没有。进了病房，我和杜哥同欣哥他女友打声招呼，便靠墙站着，看着他在那一边忙着收拾出院需要的单子，一边询问着他女友现在的情况。我打量着这个南方姑娘，这是我第一次见到真人，也是我第一次知道荔枝可以吃到上火，严重到住院。我又想起下午本来约好的酒局，他没办法按时过来的抱歉与无奈，其实我们之间说这些倒是生分了许多，我俩本就理解，看到这，又为自己后面的数个催他的电话感到愧疚。</p>
<p>仔细的听着医嘱，目光时不时的折回他对象的欣哥，倒是让我颇感意外，这种意外更来自于一种他现在不一样的地方，那和我俩相比多几分的担当与责任。再看我自己，倒是斑驳了些。毕业之后的我们似乎都不顺利，日子过得糟心了些。以前每次见面之后的烤腰子都少不了，直到时间越来越长，见面的机会也越来越少，视频中高呼万岁的那一声烤腰子也变的遥遥无期。我想这次也算了吧，毕竟他对象刚好点，还得他陪着呢。三个人喝了点水，搁着那路灯下围成一个圈，嘬了几口烟，随便讲了讲自己的事，我想烟抽完就散了吧。欣哥倒是固执的说送完对象后，他一定要出来和我们一起撸个腰子。执拗不过，那就这样吧。</p>
<p>半小时后，三人坐在摊前回味着那熟悉的烧烤味，记忆也顺着那熟悉的光过来了。那时候在西关的十字，送我故事里的她回家之后，老是和杜哥打趣阿欣在文科班也不知道找个对象，现在看起来，一众兄弟们，欣哥的感情好像是最顺的。而我们回头一看自己，也确实是有些满目疮痍了。完事儿，兜着风，回哥们家，那风竟有些冻人，白瞎了这夏天了。哥们之间其实可以有很多话说，也确实都有很多事情打算一吐为快，但是夜太深了，缺酒，也不打算喝了，阿欣还得开车回去。相约的一顿大酒也只能再一次说下次了。那会我倒是异常的清醒，烟圈肆意的捉弄着我这纷乱的思绪。难吗？真难。</p>
<p>霍乱时期的爱情，肺炎时期的爱情，其实这男女情爱何尝不是一场霍乱呢？而爱情本身既伟大又是一个莫大的嘲讽。同时也应情、应我、应景。</p>
<hr>
<blockquote>
<p>无关爱情，倒是有些像自己的心情了，晚安，诸位。</p>
</blockquote>
]]></content>
      <categories>
        <category>感触</category>
      </categories>
  </entry>
  <entry>
    <title>项目文档规范</title>
    <url>/2020/03/21/%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="项目文档的总体布局"><a href="#项目文档的总体布局" class="headerlink" title="项目文档的总体布局"></a>项目文档的总体布局</h1><p>软件文档可以分为<strong>开发文档和产品文档</strong>两大类，交付用户还有<strong>用户文档</strong>。</p>
<h2 id="开发文档"><a href="#开发文档" class="headerlink" title="开发文档"></a>开发文档</h2><ol>
<li>软件开发计划</li>
<li>需求规格说明书</li>
<li>软件概要设计说明</li>
<li>数据库设计说明</li>
</ol>
<a id="more"></a>

<ol>
<li>软件详细设计说明</li>
<li>可执行程序生成说明</li>
<li>软件测试计划</li>
<li>软件测试说明</li>
<li>软件测试报告</li>
<li>安装部署手册</li>
<li>源代码交付说明</li>
<li>上线部署方案</li>
<li>上线部署实施报告</li>
<li>软件终验测试方案</li>
<li>软件终验测试报告</li>
</ol>
<h2 id="产品文档"><a href="#产品文档" class="headerlink" title="产品文档"></a>产品文档</h2><ol>
<li>产品简介</li>
<li>产品演示</li>
<li>疑问解答</li>
<li>功能介绍</li>
<li>技术白皮书</li>
<li>评测报告</li>
</ol>
<h2 id="用户文档"><a href="#用户文档" class="headerlink" title="用户文档"></a>用户文档</h2><ol>
<li>安装手册</li>
<li>使用手册</li>
<li>维护手册</li>
<li>用户报告</li>
<li>销售培训</li>
</ol>
<h1 id="开发文档的具体要求"><a href="#开发文档的具体要求" class="headerlink" title="开发文档的具体要求"></a>开发文档的具体要求</h1><h2 id="1-软件开发计划"><a href="#1-软件开发计划" class="headerlink" title="1 软件开发计划"></a>1 软件开发计划</h2><h3 id="一-文档内容要求"><a href="#一-文档内容要求" class="headerlink" title="(一) 文档内容要求"></a>(一) 文档内容要求</h3><h5 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h5><p>1.1标识<br>本条应包含本文档的完整标识，以及本文档适用的系统和软件的完整标识，包括标识号、标题、缩略词语、版本号和发行号。</p>
<p>1.2系统概述<br>本条应简述本文档适用的系统和软件的用途，应描述系统和软件的一般特性；概述系统开发、运行和维护的历史；标识项目的业主方、用户、承建方、监理方等；标识当前和计划的运行现场等。</p>
<p>1.3文档概述<br>概述本文档的用途和内容，并描述与其使用有关的保密性和私密性的要求。</p>
<p>1.4与其他计划之间的关系<br>描述本计划和其他项目管理计划的关系。</p>
<p>1.5输入基线<br>给出编写本项目开发计划的输入基线，如业务需求说明书等。</p>
<h5 id="2-引用文件"><a href="#2-引用文件" class="headerlink" title="2.引用文件"></a>2.引用文件</h5><p>2.1应列出本文档引用的所有文档的编号、标题、修订版本、日期和来源。</p>
<h5 id="3-项目范围及约束条件"><a href="#3-项目范围及约束条件" class="headerlink" title="3.项目范围及约束条件"></a>3.项目范围及约束条件</h5><p>3.1 交付产品<br>列出本项目的交付产品成果，包括软件程序、交付文档等，以及各交付成果的交付期限。</p>
<p>3.2 业务需求和约束条件<br>分条阐述项目的业务需求和约束条件；</p>
<p>3.3 其它方面的需求和约束条件<br>分条阐述其它方面的约束，如项目进度要求、保密性等。</p>
<p>3.4 项目目标<br>综述项目进度目标、成本目标、质量目标。</p>
<h5 id="4-项目总体计划"><a href="#4-项目总体计划" class="headerlink" title="4.项目总体计划"></a>4.项目总体计划</h5><p>4.1软件开发过程和里程碑<br>描述要采用的软件开发过程。计划应覆盖论及它的所有合同条款，确定已计划的开发阶段(适用)、目标和各阶段要执行的软件开发活动。<br>里程碑设置分条阐述里程碑/阶段名称、期限、里程碑标志说明（进入条件和输出）、评审方式等。<br>提供一张工作产品矩阵表，描述各工作产品的编号、名称、产生阶段、评审方式等。工作产品包括各阶段产生的过程文档和技术文档等，是工作任务分解和配置管理计划制定的重要依据。</p>
<p>4.2软件开发方法<br>描述或引用要使用的软件开发方法，包括为支持这些方法所使用的手工、自动工具和过程的描述。</p>
<p>4.3软件产品标准<br>描述或引用在表达需求、设计、编码、测试用例、测试过程和测试结果方面要遵循的标准和要求。对要使用的各种编程语言应提供编码标准。</p>
<p>4.4 评审途径<br>阐述软件内部评审的方式，以及需方或授权代表（总集、监理）实施软件产品和活动评审的途径和方式。</p>
<p>4.5软件配置管理<br>描述针对本项目所采用和遵循的软件配置管理方法.包括配置项的标识、控制、状态统计、审核、交付等。 具体的配置项识别和管理可在配置管理计划中另文给出。</p>
<p>4.6软件质量保证<br>描述针对在本项目所采用和遵循的软件质量保证方法。包括软件质量保证评估、软件质量保证记录和处理、第三方独立性保证等。质量保证计划也可另文给出。承建方应在计划中落实下述内部审核和检查工作：<br>软件计划审核：在软件计划编制阶段结束后必须进行软件计划审核，以确保在软件开发计划、软件配置管理计划、软件质量保证计划中所规定的计划的合适性。<br>软件需求审核：在软件需求分析阶段结束后必须进行软件需求审核，以确保在软件需求规格说明中所规定的各项需求的合适性。<br>软件概要设计审核：在软件设计结束后必须进行软件设计的审核，以评价软件概要设计说明、数据结构设计说明中所描述的软件设计在总体结构、外部接口、主要部件功能分配、全局数据结构以及各主要部件之间的接口等方面的合适性；以及在数据结构、功能、算法和过程描述等方面的合适性。<br>软件详细设计、编码阶段的审核：在软件详细设计和编码实现完成之后要对软件详细设计说明、软件测试计划、软件测试说明（含软件测试用例）、目标程序生成说明进行审核，以确认业主方的业务需求是否得到满足，验证软件需求规格说明中的需求是否已由软件设计说明描述的设计实现，软件设计说明表达的设计是否已由编码实现。<br>出厂测试审核：在完成出厂测试之后要对源代码交付验证说明、软件测试报告（含源代码交付验证报告）以及按照合同要求应提交给业主方的所有文档（如：软件用户手册等）进行审核，以评价待交付的程序及文档的质量是否满足出厂交付要求、覆盖了业主方的业务需求、做好了交付准备。<br>部署审核：在配合监理方和业主方完成测试工作后承建方进入系统部署阶段，在完成软件部署并配合完成系统联调联试后，要对部署实施报告进行审核，以验证部署实施的真实性以及外部接口的正确性。</p>
<p>4.7问题跟踪和处理(更正活动)<br>描述软件更正活动中要遵循的方法，包括不同阶段的问题发现、纪录、报告、处理、审核和更正流程，问题/bug跟踪系统的选用等。须论及出厂测试、需方验证测试、试运行三个阶段。</p>
<p>4.8 档案收集<br>阐述作为承建方在项目进行过程中进行自身档案收集管理的方法，包括纸质档案。</p>
<h5 id="5-项目估算及进度计划"><a href="#5-项目估算及进度计划" class="headerlink" title="5.项目估算及进度计划"></a>5.项目估算及进度计划</h5><p>5.1 工作任务分解<br>分解项目工作任务，得出工作任务分解结构（WBS）。</p>
<p>5.2 规模估算<br>估算项目规模，如需新编的代码行数、文档页数等。</p>
<p>5.3 工作量估算<br>根据规模估算及项目经验，估算项目工作量。</p>
<p>5.4 进度计划<br>在工作任务分解结构（WBS）、工作量估算的基础上，进行活动排序、资源分配，进而编制进度计划甘特图,标识各活动的依赖关系、资源分配情况、起止时间等。</p>
<p>5.5风险估计及应对方法<br>逐条给出识别的风险及其风险估计量化指标（可能性、严重性等级）、相应的对策和缓解方案。建议以列表的方式给出。</p>
<h5 id="6-项目跟踪与变更管理"><a href="#6-项目跟踪与变更管理" class="headerlink" title="6.项目跟踪与变更管理"></a>6.项目跟踪与变更管理</h5><p>6.1 项目日常跟踪<br>阐述项目日常跟踪方法，包括由业主方和授权代表(监理方)参与的项目跟踪。</p>
<p>6.2 里程碑评审<br>阐述或引用项目各里程碑评审的方法。</p>
<p>6.3 变更管理<br>包括计划变更、需求变更等的处理流程、机制和方法。</p>
<h5 id="7-项目组织和资源"><a href="#7-项目组织和资源" class="headerlink" title="7.项目组织和资源"></a>7.项目组织和资源</h5><p>7.1项目组织<br>本条应描述本项目要采用的组织结构，包括涉及的组织机构、机构之间的关系、执行所需活动的每个机构的权限和职责。</p>
<p>7.2项目资源<br>本条应描述适用于本项目的资源。 主要包括：<br>a.人力资源，分条说明投入此项目的人员、职责、投入阶段、地理位置和涉密程度等；<br>b. 开发人员要使用的设施，包括执行工作的地理位置、要使用的设施、保密区域和运用合同项目的设施的其他特性；<br>c.为满足合同需要，需方应提供的设备、软件、服务、文档、资料及设施及需要提供的时间。</p>
<h5 id="8-内部培训"><a href="#8-内部培训" class="headerlink" title="8.内部培训"></a>8.内部培训</h5><p>根据项目的技术要求和项目成员的情况，确定是否需要进行项目培训，并制订培训计划。如不需要培训，应说明理由。</p>
<h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><p>本章应包含有助于理解本文档的一般信息(例如原理)。本章应包含为理解本文档需要的术语和定义，所有缩略语和它们在文档中的含义的字母序列表。<br>附录<br>附录可用来提供那些为便于文档维护而单独出版的信息(例如图表、分类数据)。为便于处理，附录可单独装订成册。附录应按字母顺序(A, B等)编排。</p>
<h3 id="二-内容审核要点："><a href="#二-内容审核要点：" class="headerlink" title="(二)内容审核要点："></a>(二)内容审核要点：</h3><p>1．项目范围阐述与合同及其附件要求等是否一致；</p>
<p>2．工作任务分解与项目范围/需求是否一致；</p>
<p>3．工作任务分解、工作量估计和活动进度安排是否合理；</p>
<p>4．计划内容是否包括软件项目管理的各个必要的方面；</p>
<p>5．工作产品定义是否包含需方所要求的各相关必要文档；</p>
<p>6．组织机构和人力资源安排和分配是否合理并符合合同相关要求；</p>
<p>7．项目日常跟踪管理是否具有可操作性；</p>
<p>8．项目开发过程中的问题/bug处理机制是否具有可操作性；</p>
<p>9．档案收集管理是否具有可操作性。</p>
<p>10．是否制定了合适的配置管理策略和质量保证策略。</p>
<h2 id="2-软件需求规格说明书"><a href="#2-软件需求规格说明书" class="headerlink" title="2 软件需求规格说明书"></a>2 软件需求规格说明书</h2><h3 id="（一）文档内容要求"><a href="#（一）文档内容要求" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-引言-1"><a href="#1-引言-1" class="headerlink" title="1 引言"></a>1 引言</h5><p>1.1 编写目的<br>说明编写这份用户需求说明书的目的，指出预期的读者范围。</p>
<p>1.2 范围<br>说明系统的业务范围以及功能界限的划分。</p>
<p>1.3 术语和缩略语<br>提供此文档中用到的专门术语的定义和缩写词的原词组。</p>
<p>1.4 参考资料<br>列出此文档所参考的文档。这些文档可以是合同、标准、指南、和其他的用户需求说明书。</p>
<h5 id="2-需求概述"><a href="#2-需求概述" class="headerlink" title="2 需求概述"></a>2 需求概述</h5><p>2.1 项目背景<br>提供对项目的整体描述。如果此文档定义的项目是一个更大的项目的一个构件，应提供同更大项目或系统的关系和这个项目会提供的功能。并且提供和明确两者之间的关系。</p>
<p>2.2 操作环境<br>描述使软件运行的运行环境。给出了软件运行所需的硬件平台、操作系统和软件平台等细节。<br>如果功能/子模块/子项目涉及仅仅是整体的产品/项目、硬件/软件环境的子集，也在这里指出。</p>
<p>2.3 设计和实现限制<br>包括客户在所采用的技术和运行环境等方面的特定要求，以及其它影响开发人员自由选择的问题，必要时说明原因。</p>
<p>2.4 假设、依赖和外部风险<br>明确在准备此文档时所做的假设和外部依赖条件，这些假设会影响需求的状态。<br>对外部项目或软件的接口服务的依赖条件也可在这里说明。<br>明确客户应该会关心的外部风险，如：第三方供应的软件和硬件应该准时送到、所依赖软件是否按时提供等等。<br>对需求优先等级的定义也需要给出。</p>
<h5 id="3-功能需求"><a href="#3-功能需求" class="headerlink" title="3 功能需求"></a>3 功能需求</h5><p>以下详细描述系统功能需求。如果需要，用例图及其描述可以作为附录。功能点、子功能或功能可以指定缺省优先级。</p>
<p>3.1 &lt;功能名称1&gt;<br>所有的功能名、子功能名、功能点都需要以某种全文档唯一的方式进行编号，以备审核、设计、实现、测试时引用。功能、子功能都要规定优先等级。</p>
<p>3.1.1 功能概述<br>对本功能进行概要描述。如有需要，可用结构图来描述本功能中各模块的结构关系。</p>
<p>3.1.2 相关业务流程<br>根据需要，提供相应的业务流程图。</p>
<p>3.1.3 &lt;子功能名称1&gt;</p>
<p>3.1.3.1 子功能描述<br>对子功能作文字描述。如果需要，对子功能流程进行流程描述，并提供子功能业务流程图。</p>
<p>3.1.3.2 &lt;功能点1&gt;<br>对于每一功能点，需要具体描述其各种需求，由下列部分组成，可以以表格的形式给出：</p>
<p>a.功能点编号</p>
<p>b.功能点描述<br>具体描述该功能点所提供的功能。<br>c.操作<br>这里说明用户要求的常规的和特殊的操作。</p>
<p>d.输入<br>描述该功能的所有输入数据，如输入源、数量、度量单位、时间设定和有效输入范围等。</p>
<p>e.输出<br>详细描述该功能的所有输出数据，如输出目的地、数量、度量单位、时间关系、有效输出范围、非法值的处理、出错信息等。</p>
<p>f.业务表单<br>如果需要，描述该模块所涉及的业务表单。</p>
<p>g. 处理或算法<br>定义获得预期输出结果的全部操作，包括输入数据的有效性检查、操作的顺序、异常情况的响应、把输入转换成相应输出的方法、输出数据的有效性检查等。</p>
<p>f. 数据库要求<br>如果需要，指出对于数据库表设计方面的要求</p>
<p>3.1.3.3 &lt;功能点2&gt;功能需求<br>……<br>3.1.4 &lt;子功能名称1&gt;功能需求<br>……<br>3.2 &lt;功能名称2&gt;功能需求<br>……</p>
<h5 id="4-外部接口需求"><a href="#4-外部接口需求" class="headerlink" title="4 外部接口需求"></a>4 外部接口需求</h5><p>所有接口都必须提供唯一标识。</p>
<p>4.1 用户接口</p>
<p>提供用户使用软件产品时的接口需求。例如，如果系统的用户通过显示终端进行操作，就必须指定如下要求：</p>
<p>a． 对屏幕格式的要求；<br>b． 报表或菜单的页面格式和内容；<br>c． 程序功能键的可用性。<br>屏幕接口要求细节很多，建议提供界面demo。</p>
<p>4.2 硬件接口<br>要指出软件产品和系统硬部件之间每一个接口。包括支撑什么样的设备，如何支撑这些设备，有何约定。</p>
<p>4.3 软件接口</p>
<p>需要说明3方面的软件接口内容：</p>
<p>1．说明需使用的其他软件产品（例如，数据管理系统、工作流软件、中间件产品等）；<br>2．说明需要使用到的其它应用软件系统所提供的接口功能；<br>3．说明需要提供出来供其它应用软件系统调用的公用接口功能服务。对这些接口要尽量做形式化描述。</p>
<h5 id="5-成品软件定制需求："><a href="#5-成品软件定制需求：" class="headerlink" title="5.成品软件定制需求："></a>5.成品软件定制需求：</h5><p>如果本项目是在成熟的成品软件基础上进行进一步的定制开发，需要在此说明本项目所依据的成品软件版本。并根据成品软件的功能，对照本项目需求，以列表的方式明确说明哪些功能点需要进行进一步的定制开发。</p>
<h5 id="6-性能需求"><a href="#6-性能需求" class="headerlink" title="6.性能需求"></a>6.性能需求</h5><p>以下详细说明软件各项性能需求，(如适用)包括以下方面。<br>6.1 数据容量<br>根据实际情况，确定数据容量。</p>
<p>6.2 时间特性<br>说明系统在响应时间、更新处理时间、数据转换与传输时间、运行时间等方面所需达到的时间特性。</p>
<p>6.3 吞吐量<br>系统需要支持并发的处理能力。</p>
<p>6.4 安全性<br>系统安全方面的需求描述。</p>
<p>6.5 其它质量属性<br>指明软件产品在可靠性、可移植性、实用性、可维护性等方面的目标和需求。应尽量以明确的、量化的、可检验的方式来描述。</p>
<h5 id="7-其他需求"><a href="#7-其他需求" class="headerlink" title="7.其他需求"></a>7.其他需求</h5><p>7.1 可测试性需求<br>指出可测试性方面的需求。如对于只能在生产环境才能满足的测试条件，如何在出厂测试时用变通的方式解决。</p>
<p>7.2 安装和操作<br>定义软件安装和操作方面的需求，例如安装的环境要求，以及安装的方式等。</p>
<p>7.3 安全保密<br>定义有关产品安全保密方面的要求和说明。如果没有这方面的要求， 注明无安全保密性要求。</p>
<p>7.6 维护服务<br>对软件的升级、维护以及服务方面的需求说明，包含维护方式和提供服务的方式，以及服务的质量要求，时间要求等。</p>
<h5 id="8-辅助部分"><a href="#8-辅助部分" class="headerlink" title="8 辅助部分"></a>8 辅助部分</h5><p>8.1 未确定的问题<br>说明目前尚未确定的问题，以及对这些问题的处理的计划。</p>
<p>8.2 风险分析<br>说明本项目面临的主要风险，例如需求可实现性、需求变动、时间压力、技术复杂度、人力资源不足等，并提出规避或预防措施。</p>
<p>8.3 编程工具<br>说明对开发的工具要求，包含编程语言，使用的开发环境，以及其中涉及到的其它工具的要求，例如建模工具，分析工具，配置管理工具等。</p>
<p>8.4 其它支撑软件<br>软件运行说必需的环境的说明，包含软件使用到地第三方的组件以及应用程序的说明。</p>
<h5 id="9-项目的交付"><a href="#9-项目的交付" class="headerlink" title="9 项目的交付"></a>9 项目的交付</h5><p>9.1 交付形式<br>项目的交付方式的说明，包含交付的产品、文档，以及交付的方式等。</p>
<p>9.2 测试要求<br>说明需要对目标系统进行哪些方面的测试，如功能测试、集成测试、压力测试等，以及各种测试的功能覆盖面要求。</p>
<h3 id="（二）内容审核要点："><a href="#（二）内容审核要点：" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．功能描述是否完备，是否通盘考虑了业务需求说明书所述内容；</p>
<p>2．文档内容是否充分反应了与用户的沟通成果；</p>
<p>3．功能描述是否明确，是否有二义性、含糊的或相互矛盾的需求内容；</p>
<p>4．功能点是否细化到合理程度；</p>
<p>5．对外接口服务的描述是否全面并细化到合理程度；</p>
<p>6．对于外部依赖条件的描述是否准确全面；</p>
<p>7．是否提供了用户所需的人机界面的必要描述（如以demo方式）；</p>
<p>9．对性能指标是否进行了必要的说明；</p>
<p>10．是否给出了必要的数据库设计方面的要求；</p>
<h2 id="3-软件概要设计说明"><a href="#3-软件概要设计说明" class="headerlink" title="3 软件概要设计说明"></a>3 软件概要设计说明</h2><h3 id="（一）文档内容要求-1"><a href="#（一）文档内容要求-1" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-引言-2"><a href="#1-引言-2" class="headerlink" title="1 引言"></a>1 引言</h5><p>1.1 编写目的<br>说明编写这份概要设计说明书的目的，指出预期的读者。（对于由多个子系统构成的系统，可以根据需要针对子系统编写单独的软件概要设计说明）<br>1.2背景<br>说明：<br>a． 待开发软件系统的名称；<br>b． 列出此项目的任务提出者、开发者、用户以及将运行该软件的位置；<br>1.3术语和缩略语<br>列出本文件中用到的专门术语的定义和外文首字母组词的原词组。<br>1.4参考资料<br>列出有关的参考文件，如：<br>a． 本项目的经核准的计划任务书或合同，上级机关的批文；<br>b． 属于本项目的其他已编制文件；<br>c． 本文件中各处引用的文件、资料，包括所要用到的软件开发标准、专业技术标准。列出这些文件的标题、文件编号、发表日期、出版单位和来源。</p>
<h5 id="2总体设计"><a href="#2总体设计" class="headerlink" title="2总体设计"></a>2总体设计</h5><p>2.1需求规定<br>说明对本系统的主要的输入输出项目、处理的功能性能要求。可以引用软件规格说明文档以避免重复。</p>
<p>2.2运行环境<br>简要地说明对本系统的运行环境（包括硬件环境和支持环境）的规定。</p>
<p>2.3设计思想<br>2.1.1 系统构思<br>说明本系统设计的系统构思。</p>
<p>2.1.2 关键技术与算法<br>说明本系统设计采用的关键技术和主要算法。</p>
<p>2.1.3关键数据结构<br>简要说明本系统实现中的最主要的数据结构。</p>
<p>2.2系统总体结构<br>以图表的形式说明本系统的系统元素（各层模块、子模块、公用模块等）的划分，扼要说明各系统元素的标识和功能，分层次说明各系统元素之间的关系。</p>
<p>2.3基本处理流程</p>
<p>2.3.1系统流程图<br>用流程图的方式说明本系统的主要控制流程和处理流程。</p>
<p>2.3.2 数据流程图<br>根据需要，用数据流程图说明本系统的主要数据及其流转过程，并说明流转过程中的处理动作。</p>
<p>2.4功能需求与模块的关系<br>说明各项功能需求的实现同各模块的分配关系。要与软件规格说明中的功能编号相一致。</p>
<p>2.6尚未解决的问题<br>说明在概要设计过程中尚未解决而设计者认为在系统完成之前必须解决的各个问题。</p>
<h5 id="3接口设计"><a href="#3接口设计" class="headerlink" title="3接口设计"></a>3接口设计</h5><p>3.1外部接口<br>说明本系统同外界的所有接口设计。包括本系统与硬件之间的接口设计、本系统与各支持软件之间的接口设计、对外提供的接口服务的设计。</p>
<p>3.2内部接口<br>说明本系统之内的各个系统元素之间的接口的安排。</p>
<h5 id="4性能设计及质量属性考虑"><a href="#4性能设计及质量属性考虑" class="headerlink" title="4性能设计及质量属性考虑"></a>4性能设计及质量属性考虑</h5><p>通过设计落实在软件规格说明中的各种性能及质量属性规定。</p>
<h5 id="5数据库设计"><a href="#5数据库设计" class="headerlink" title="5数据库设计"></a>5数据库设计</h5><p>说明本系统内所使用的数据结构设计要点及与程序模块间的关系。对数据库表的设计一般以另文方式（数据库设计说明）给出。</p>
<h3 id="（二）内容审核要点：-1"><a href="#（二）内容审核要点：-1" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．是否全面考虑了软件需求规格说明文档的功能需求；</p>
<p>2．所述功能名称及编号与软件需求规格说明文档是否一致；</p>
<p>3．总体结构是否清晰合理；</p>
<p>4．是否包括对外提供的接口服务的形式化表述和设计内容；</p>
<p>5．数据结构设计内容的全面性及合理性；</p>
<h2 id="4-数据库设计说明"><a href="#4-数据库设计说明" class="headerlink" title="4 数据库设计说明"></a>4 数据库设计说明</h2><h3 id="一-文档内容要求-1"><a href="#一-文档内容要求-1" class="headerlink" title="(一) 文档内容要求"></a>(一) 文档内容要求</h3><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h5><p>1.1 编写目的<br>描述该文档的编写目的。</p>
<p>1.2 参考资料<br>列出此文档所参考的文档，如软件需求规格说明、软件设计说明等。</p>
<p>1.3 分类<br>（若有）对存储数据分类进行简要说明（数据可以按照子系统进行划分）。<br>· 第全局类数据及其说明<br>· 第二类数据及其说明<br>· 第三类数据及其说明<br>…</p>
<p>1.4 使用它的程序<br>描述对应不同分类的数据，所使用它的外部程序或者业务系统。</p>
<p>1.5 约定<br>描述数据库设计方面的标识约定、设计约定、特殊约定等。</p>
<h5 id="2-数据定义"><a href="#2-数据定义" class="headerlink" title="2 数据定义"></a>2 数据定义</h5><p>2.1 全局数据<br>主要应用范围：<br>作用：<br>数据库定义文件：<br>ER图文件：</p>
<p>2.1.1 表结构设计</p>
<p>2.1.1.1 表一与触发器<br>表一结构说明，包括：表名、表说明（内容、作用）、索引、各列属性。<br>各列属性，包括：列英文名、列中文名、 数据类型、长度、 列取值含义等。<br>触发器列表，包括：名称、说明、定义等。</p>
<p>2.1.1.2 表二与触发器<br>……<br>2.1.2 视图设计</p>
<p>2.1.2.1 视图一<br>定义：<br>用途：</p>
<p>2.1.2.1 视图二<br>……</p>
<p>2.1.3 存储过程设计</p>
<p>2.1.3.1 过程一<br>定义：<br>用途：<br>输入：<br>输出：<br>2.1.3.2 过程二<br>……</p>
<p>2.2 第二类数据<br>主要应用范围：<br>作用：<br>数据库定义文件：<br>ER图文件：<br>2.2.1 表结构设计<br>……</p>
<p>2.2.2 视图设计<br>……</p>
<p>2.1.3 存储过程设计<br>……</p>
<h5 id="3-数据库角色定义"><a href="#3-数据库角色定义" class="headerlink" title="3 数据库角色定义"></a>3 数据库角色定义</h5><p>3.1 第一类角色<br>角色职能：<br>角色权限：</p>
<p>3.2 第二类角色<br>……</p>
<h5 id="4-数据库安全设计"><a href="#4-数据库安全设计" class="headerlink" title="4 数据库安全设计"></a>4 数据库安全设计</h5><p>针对数据库安全方面的要求进行的设计，包括保密性、安全性等方面。</p>
<h5 id="5-数据库备份设计"><a href="#5-数据库备份设计" class="headerlink" title="5 数据库备份设计"></a>5 数据库备份设计</h5><p>针对数据的备份要求，描述数据库的备份策略、备份和恢复的手段、备份计划、操作步骤等方面的内容。</p>
<h3 id="二-内容审核要点：-1"><a href="#二-内容审核要点：-1" class="headerlink" title="(二) 内容审核要点："></a>(二) 内容审核要点：</h3><p>1．本文档内容与软件设计文档、软件需求文档是否一致性；</p>
<p>2．所述内容是否完备；</p>
<p>3．本文档内容本身是否前后一致；</p>
<p>4．表结构描述是否清楚明确；</p>
<p>5．（若有）触发器描述是否清楚明确；</p>
<p>6．（若有）视图描述是否清楚明确；</p>
<p>7．（若有）存储过程描述是否清楚明确；</p>
<p>8．数据库角色设置是否清楚合理。</p>
<p>9．是否满足了安全、备份的要求。</p>
<h2 id="5-软件详细设计说明"><a href="#5-软件详细设计说明" class="headerlink" title="5 软件详细设计说明"></a>5 软件详细设计说明</h2><h3 id="（一）文档内容要求-2"><a href="#（一）文档内容要求-2" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><p>1 引言<br>1.1 编写目的<br>说明编写这份详细设计说明书的目的，指出预期的读者范围。</p>
<p>1.2 背景<br>说明：<br>a． 待开发的软件系统的名称；<br>b． 列出本项目的任务提出者、开发者、用户以及将运行该项软件的单位。</p>
<p>1.3 术语和缩略语<br>列出本文件中用到的专门术语的定义和缩写词的原词组。</p>
<p>1.4 参考资料<br>列出要用到的参考资料，如：<br>a． 本项目的经核准的计划任务书或合同、上级机关的批文；<br>b． 属于本项目的其他已发表的文件，包括软件需求说明书、软件概要设计说明等；<br>c． 本文件中各处引用的文件、资料，包括所要用到的软件开发标准。<br>列出这些文件的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。</p>
<p>2 系统结构<br>以表格方式列出本程序系统内的每个程序（包括每个模块和子程序）的名称、标识符和它们之间的层次结构关系。并用文字说明每个程序完成的功能，以及互相之间的调用关系。</p>
<p>3 程序1（标识符）设计说明<br>从本章开始，逐个地给出各个层次中的每个程序的详细设计。以下给出的提纲是针对一般情况的。对于一个具体的模块，可能根据需要在其说明条目上有适当增减。</p>
<p>3.1 程序描述<br>给出对该程序的简要描述，主要说明安排设计本程序的目的意义，并且说明本程序的特点。</p>
<p>3.2 功能<br>说明该程序应具有的功能，可采用IPO图（即输入－处理－输出图）的形式。</p>
<p>3.3 性能<br>说明对该程序的全部性能要求，包括对精度、灵活性和时间特性的要求。</p>
<p>3.4 输入项<br>给出对每一个输入项的特性，包括名称、标识、数据的类型和格式、数据值的有效范围、输入的方式、数量和频度、输入媒体、输入数据的来源和安全保密条件等等。</p>
<p>3.5 输出项<br>给出对每一个输出项的特性，包括名称、标识、数据的类型和格式、数据值的有效范围、输出的形式、数量和频度、输出媒体、对输出图形及符号的说明、安全保密条件等等。</p>
<p>3.6 算法<br>详细说明本程序所选用的算法，具体的计算公式和计算步骤。</p>
<p>3.7 流程逻辑<br>用图表（例如流程图、判定表等）辅以必要的说明来表示本程序的逻辑流程。</p>
<p>3.8 接口<br>用图的形式说明本程序所隶属的上一层模块及隶属于本程序的下一层模块、子程序，说明参数赋值和调用方式，说明与本程序相直接关联的数据结构。</p>
<p>3.11 限制条件<br>说明本程序运行中所受到的限制条件。</p>
<p>3.12 单元测试<br>说明对本程序进行单元测试的计划和方式，包括单元测试用例的设计等。</p>
<p>3.13 尚未解决的问题<br>说明在本程序的设计中尚未解决而设计者认为在软件完成之前应解决的问题。</p>
<p>4 程序2（标识符）设计说明<br>．．．．．．</p>
<h3 id="（二）内容审核要点：-2"><a href="#（二）内容审核要点：-2" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．本文档内容与概要设计说明、软件需求规格说明等文档中的内容是否一致性；</p>
<p>2．所述内容是否完备；</p>
<p>3．各子程序模块描述是否清楚；</p>
<p>4．是否有必要的单元测试用例编制方面的考虑；</p>
<p>5．程序模块间关系是否清楚准确。</p>
<h2 id="6-可执行程序生成说明"><a href="#6-可执行程序生成说明" class="headerlink" title="6 可执行程序生成说明"></a>6 可执行程序生成说明</h2><h3 id="（一）文档内容要求-3"><a href="#（一）文档内容要求-3" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1 概述"></a>1 概述</h5><p>1.1 编写目的<br>说明编写目的。本文档主要供开发方项目组内部使用，其目的包括：<br>a．便于项目组测试人员通过版本控制机制，每次生成新的目标程序在干净的环境下进行自测（包括出厂测试）；<br>b．便于今后源代码的交付。</p>
<p>1.2背景<br>说明软件系统的名称和作用，以及本可执行程序属于软件系统的哪一部分。</p>
<p>1.3 参考资料<br>列出所参考的文档，如需求规格说明、设计说明等。</p>
<h5 id="2-工具和支撑软件要求"><a href="#2-工具和支撑软件要求" class="headerlink" title="2 工具和支撑软件要求"></a>2 工具和支撑软件要求</h5><p>指出目标程序生成的工具要求，如对于使用ant 脚本生成目标程序的方式，需要ant工具的支持。</p>
<p>指出目标程序执行的支撑软件要求，如虚拟机、应用服务器或其它底层软件支持。</p>
<p><strong>注</strong>：建议尽量提供生成脚本而不依赖于可视化开发工具来生成目标代码，以便于测试方能根据版本控制库中的源码迅速生成目标程序进行测试和回归测试。</p>
<h5 id="3-源代码获取"><a href="#3-源代码获取" class="headerlink" title="3 源代码获取"></a>3 源代码获取</h5><p>指出从何处及如何获取源代码，包括脚本程序代码。一般情况下，在开发团队内部，源代码的获取方法和步骤与项目源代码配置管理方式相关。</p>
<h5 id="4-目标程序生成步骤"><a href="#4-目标程序生成步骤" class="headerlink" title="4 目标程序生成步骤"></a>4 目标程序生成步骤</h5><p>详细说明目标程序生成步骤，步骤的多少与项目复杂度、所编制脚本功能强弱等因素相关。<br>注：不管步骤多少，整个步骤应是明确和完备的，并提供方便的清除所生成目标程序的方法。</p>
<h5 id="5-目标程序的执行"><a href="#5-目标程序的执行" class="headerlink" title="5 目标程序的执行"></a>5 目标程序的执行</h5><p>说明如何运行生成的目标程序，一般包括以下内容：<br>。从何处获取生成的目标程序；<br>。执行前的准备工作，如配置文件的修改、数据库表定义/删除的脚本的执行、数据库表的初始化数据生成/清除脚本的执行等；<br>。软硬件运行环境的建立；<br>。程序的部署和执行。</p>
<h3 id="（二）内容审核要点：-3"><a href="#（二）内容审核要点：-3" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．所述各目标程序生成说明文档是否涵盖项目整个软件系统；</p>
<p>2．所述步骤是否明确和详细；</p>
<p>3．是否内部有版本控制机制。</p>
<h2 id="7．软件测试计划"><a href="#7．软件测试计划" class="headerlink" title="7．软件测试计划"></a>7．软件测试计划</h2><h3 id="（一）文档内容要求-4"><a href="#（一）文档内容要求-4" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-范围"><a href="#1-范围" class="headerlink" title="1 范围"></a>1 范围</h5><p>1.1 标识<br>本条应包含本文档及本文档适用的系统和软件的完整标识，(若适用)包括标识号、标题、缩略词语、版本号和发行号。</p>
<p>1.2 系统概述<br>本条应简述本文档适用的系统和软件的用途，它应描述系统和软件的一般特性；概述系统开发、运行和维护的历史；标识项目的开发方、业主方、总集方、监理方等；标识当前和计划的运行现场等。</p>
<p>1.3 文档概述<br>本条应概述本文档的用途和内容，并描述与其使用有关的保密性和私密性的要求。</p>
<h5 id="2-引用文档"><a href="#2-引用文档" class="headerlink" title="2 引用文档"></a>2 引用文档</h5><p>应列出本文档引用的所有文档的编号、标题、修订版本、日期和来源。</p>
<h5 id="3-术语和定义"><a href="#3-术语和定义" class="headerlink" title="3 术语和定义"></a>3 术语和定义</h5><p>提供此文档中用到的专门术语的定义和缩写词的原词组。</p>
<h5 id="4-测试目标和测试内容"><a href="#4-测试目标和测试内容" class="headerlink" title="4 测试目标和测试内容"></a>4 测试目标和测试内容</h5><p>4.4 测试目标<br>描述本测试计划的测试目标。如完成软件的出厂测试，达到可交付验证测试的目的。</p>
<p>4.1 测试的功能和特性<br>概要说明本次需要测试的功能和特性</p>
<p>4.2 不测的功能和特性<br>说明本次不测的功能、特性及原因</p>
<p>4.4 测试质量目标</p>
<p>简要说明测试的质量目标,如：</p>
<p>(1)测试计划中所有测试方法和模块已经执行通过</p>
<p>(2)所有的测试案例已经执行过</p>
<p>(3)所有的重要等级Bug已经解决并由测试验证</p>
<h5 id="5-应交付的测试成果文档"><a href="#5-应交付的测试成果文档" class="headerlink" title="5.应交付的测试成果文档"></a>5.应交付的测试成果文档</h5><p>说明最终需要交付的测试成果文档，包括软件测试计划、软件测试说明(含测试用例)、软件测试报告、测试问题报告等。文档名和数量因具体项目而异，应确定文档责任人。</p>
<h5 id="6-测试策略"><a href="#6-测试策略" class="headerlink" title="6.测试策略"></a>6.测试策略</h5><p>6.1整体测试策略<br>说明基本的测试过程和策略。如测试人员在需求和设计阶段参与需求评审和设计评审、在开发完成前实施测试案例设计和测试开发，在系统开发完成之后正式执行测试等。</p>
<p>6.2问题等级划分<br>划分软件缺陷的等级分类代码。推荐的等级划分如下：</p>
<p><a href="https://upload-images.jianshu.io/upload_images/1833901-b0ae4f9cedca7a04.png?imageMogr2/auto-orient/strip|imageView2/2/w/1116/format/webp" target="_blank" rel="noopener"><img data-src="https://upload-images.jianshu.io/upload_images/1833901-b0ae4f9cedca7a04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1116/format/webp" alt="img"></a></p>
<p>6.3 开始/中断/完成标准</p>
<p>6.3.1 测试启动条件<br>说明启动测试的条件。如对于出厂测试，已经过评审、测试人力资源已经具备、软件需求规格说明/详细设计文档/测试说明文档已经过确认、内部模块测试和组装测试已经完成等。<br>其中业主方、总集方、监理方交付验证测试的准入条件：</p>
<p>a) 软件源代码正确通过编译且为最终版本；</p>
<p>b) 软硬件测试平台已搭建并已配置完成；</p>
<p>c) 业主方具有测试所需的各种文档（纸质、电子版）；</p>
<p>d) 业主方获得的各种文档均与最终版本的软件相对应，且全部通过审核；</p>
<p>e) 承建方、监理方已完成测试并提交测试报告。</p>
<p>6.3.2 测试中断条件<br>说明测试中断的条件。例如：<br>１．在测试中发现A类bug，并导致后续的测试无法继续时；</p>
<p>２．已执行完所有的测试用例，并已报告给承建方，等待承建方在限期内改正时。</p>
<p>6.3.３ 测试终止条件<br>说明在什么条件下终止本计划所述产品交付验收证测试。如：</p>
<p>\1. 正常终止条件：</p>
<p>a) 按照测试计划完成所有定义的测试用例；</p>
<p>b) 客观、详细地记录了软件测试过程和软件测试中发现的问题；</p>
<p>c) 有效完成了定位缺陷的回归测试循环；</p>
<p>d) 测试中未发现A、B缺陷，以及少于n个C类缺陷；</p>
<p>e) 提交测试报告。</p>
<ol>
<li><p>异常终止条件<br>太多的A或B类缺陷以致测试无法进行或测试周期已结束。<br>或者针对软件规模，规定C类bug不超过n个<br>6.4 测试工具选择<br>说明需要用到的测试工具软件，应包括软件版本号。</p>
<p>6.5 测试流程<br>阐述或引用测试流程，应包括问题报告、审核、分配、跟踪、回归等各方面。测试流程与承建方内部质量管理制度和业主方的要求相关。</p>
<p>6.6 测试技术和方法<br>确定测试需要的技术或方法，如测试数据生成与验证技术、测试数据输入技术、测试结果获取技术等；明确测试用例的设计和选择方法，针对不同类型的测试(功能测试、性能测试、容量测试、用户界面测试), 根据需要，应给出针对性的测试用例设计要求。</p>
<p>6.7 评价准则和方法</p>
<p>6.7.1 测试通过准则</p>
<p>定义系统测试通过准则，以下是一个测试通过准则的示例：</p>
<p>1． 可执行软件与需求规格说明书、设计说明书是一致的；</p>
<p>2． 测试覆盖率应达到100%</p>
<p>3． 测试用例通过率要达到95%；</p>
<p>4． 软件缺陷终结率达到100%</p>
<p>5． 系统页面风格符合规范化要求，程序代码编写以及各种命名符合规范化要求。</p>
<p>6． 各模块正确衔接。</p>
<p>7． 对异常数据应有相应的提示信息，并能安全终止异常操作。</p>
<p>6.7.2 对测试结果处理方法<br>测试结果分为通过和未通过。测试达到通过准则的要求称为“通过”，测试结果没有达到测试通过准则的称为“未通过”。说明对不同测试结果的处理方法。</p>
</li>
<li><p>测试项目组织与资源<br>7.1 参与部门和组织<br>说明参与测试的组织/部门</p>
</li>
<li><p>7.2 角色和职责<br>说明参与测试的组织/部门中各角色划分及职责。</p>
</li>
<li><p>7.3 人员和培训要求<br>说明参与测试的组织/部门的员及角色对应关系。以及是否需要预先进行相关培训。</p>
</li>
<li><p>7.4 关键资源<br>说明需要用到的关键资源</p>
</li>
<li><p>测试活动和进度计划<br>应根据测试资源和测试项目内容，分解测试活动，分配测试资源，编制测试进度计划。以下是一个进度计划的示例：</p>
</li>
</ol>
<p><a href="https://upload-images.jianshu.io/upload_images/1833901-615df122dd4e1c1b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1168/format/webp" target="_blank" rel="noopener"><img data-src="https://upload-images.jianshu.io/upload_images/1833901-615df122dd4e1c1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1168/format/webp" alt="img"></a></p>
<h5 id="7-风险分析及应对措施"><a href="#7-风险分析及应对措施" class="headerlink" title="7 风险分析及应对措施"></a>7 风险分析及应对措施</h5><p>风险分析是评测项目管理的重要内容。常见的风险包括供测试的软件版本混乱、软件缺陷修改时间过长、回归不足引发新的问题、测试方和开发方对缺陷的认识存在差异等。建议以列表的方式给出识别的风险并提供针对性的缓解措施。</p>
<h3 id="（二）内容审核要点：-4"><a href="#（二）内容审核要点：-4" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．测试内容是否完整，是否涵盖了测试目的、内容、方法策略、资源、进度安排等各方面；</p>
<p>2．测试进度安排是否合理；</p>
<p>3．测试资源要求是否充分；</p>
<p>4．测试技术和方法的选择是否可行；</p>
<p>5．是否包含了对测试结果评价分析标准；</p>
<p>6．是否包含了对测试过程的跟踪和控制规程。</p>
<h2 id="8-软件测试说明"><a href="#8-软件测试说明" class="headerlink" title="8 软件测试说明"></a>8 软件测试说明</h2><h3 id="（一）文档内容要求-5"><a href="#（一）文档内容要求-5" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-范围-1"><a href="#1-范围-1" class="headerlink" title="1 范围"></a>1 范围</h5><p>1.1标识<br>本条应包含本文档及本文档适用的系统和软件的完整标识，(若适用)包括标识号、标题、缩略词语、版本号和发行号。<br>1.2系统概述<br>本条应简述本文档适用的系统和软件的用途，它应描述系统和软件的一般特性；概述系统开发、运行和维护的历史；标识项目的开发方、业主方、总集方、监理方等；标识当前和计划的运行现场等。<br>1.3文档概述<br>本条应概述本文档的用途和内容，并描述与其使用有关的保密性和私密性的要求。</p>
<h5 id="2-引用文件-1"><a href="#2-引用文件-1" class="headerlink" title="2 引用文件"></a>2 引用文件</h5><p>应列出本文档引用的所有文档的编号、标题、修订版本、日期和来源。</p>
<h5 id="3-术语和缩略语"><a href="#3-术语和缩略语" class="headerlink" title="3 术语和缩略语"></a>3 术语和缩略语</h5><p>提供此文档中用到的专门术语的定义和缩写词的原词组。</p>
<h5 id="4-测试准备"><a href="#4-测试准备" class="headerlink" title="4 测试准备"></a>4 测试准备</h5><p>以下按照软件测试类型（如：功能测试、性能测试、可靠性测试等）分章节编写。<br>每一项测试类型均应有唯一的标识号，应描述如何准备并获取测试资源，如测试环境所必须的软件、硬件、数据资源等；必要时，应描述如何准备测试程序，如开发测试接口所需的数据仿真、业务仿真程序以及测试支持软件等。<br>4.X （测试名称、唯一标识号）</p>
<p>4.X.1 设施环境要求<br>描述对测试场所、设施和环境的要求。（若有）分析上述差异对测试可能造成的影响。</p>
<p>4.X.2 硬件准备<br>描述对测试硬件的要求。分析硬件差异对测试可能造成的影响。</p>
<p>4.X.3 软件准备<br>描述对测试软件的要求。分析软件差异对测试可能造成的影响。</p>
<p>4.X.4 数据准备<br>描述对测试数据的要求。分析数据差异对测试可能造成的影响。</p>
<p>4.X.5 其它测试准备<br>描述对测试程序等分面的其他测试准备工作。</p>
<h5 id="5-测试项分解"><a href="#5-测试项分解" class="headerlink" title="5 测试项分解"></a>5 测试项分解</h5><p>将需测试的内容进行层次化的分解形成测试项，并进行标识命名。对最终分解后的每个测试项，说明测试用例设计方法的具体应用、测试数据的选择依据等。测试项与具体的功能和性能要求对应，测试项还应包含对用户文档(用户手册、安装部署手册)的测试。</p>
<h5 id="6-测试说明"><a href="#6-测试说明" class="headerlink" title="6 测试说明"></a>6 测试说明</h5><p>逐层对测试项和测试用例进行标识和说明。其中，测试用例至少应包含：所属测试项、用例名称标识、用例说明、对应需求、前提和约束、执行步骤、预期结果等。注：测试用例可采用表格方式，可作为本文档的附件另行成文，以下是对测试用例相关项的解释。</p>
<p>对应需求：说明测试所依据的内容来源，如软件需求规格说明书中的需求功能编号或具体条款</p>
<p>测试说明：简要描述测试的对象、目的和所采用的测试方法。</p>
<p>前提和约束：说明实施该测试用例的前提条件和约束条件，如环境条件、准备工作等。</p>
<p>执行步骤：编写按照执行顺序排列的一系列相对独立的步骤，每一个执行步骤应包括测试操作动作、测试程序输入或设备操作、期望的测试结果。</p>
<p>预期结果：期望测试结果应有具体内容(如确定的元数值、业务流程状态等)，不应是不确切的概念或笼统的描述。</p>
<h5 id="7-测试用例执行顺序"><a href="#7-测试用例执行顺序" class="headerlink" title="7 测试用例执行顺序"></a>7 测试用例执行顺序</h5><p>应确定软件测试用例的执行顺序，从而合理安排测试执行过程，避免重复执行测试用例，提高测试工作效率。同时，通过合理的测试用例执行顺序实现对完整的业务流程的确认和验证。</p>
<h3 id="（二）内容审核要点：-5"><a href="#（二）内容审核要点：-5" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．测试说明的范围与合同及其附件要求等是否一致；是否覆盖了全部软件需求；是否覆盖了全部测试需求；</p>
<p>2．软件测试准备是否充分；</p>
<p>3．软件测试分解是否合理；测试设计思路是否清晰；测试技术实现方法是否科学；</p>
<p>4．对接口的分析和说明是否完整、准确；对接口测试的正常和容错说明是否全面；</p>
<p>5．测试用例是否充分；除正常操作、正常流程、正常数据外，是否覆盖了可测试的异常情况；</p>
<p>6．测试用例的执行顺序是否合理；是否可覆盖必要的业务流程。</p>
<h2 id="9-软件测试报告"><a href="#9-软件测试报告" class="headerlink" title="9 软件测试报告"></a>9 软件测试报告</h2><h3 id="（一）文档内容要求-6"><a href="#（一）文档内容要求-6" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1引言"><a href="#1引言" class="headerlink" title="1引言"></a>1引言</h5><p>1.1标识<br>本条应包含本文档及其所适用的系统和软件的完整标识，(若适用)包括标识号、标题、缩略词语、版本号、发行号。<br>1.2系统概述<br>本条简述本文档适用的系统和软件的用途。应描述系统与软件的一般性质；描述系统基本功能；概述本系统或软件的开发、测试、试运行和维护的历史；标识项目的承建方、业主方、总集方、监理方等；标识系统当前和计划的运行现场；<br>1.3文档概述<br>本条应概括本文档的用途与内容，并描述与其使用有关的保密性方面的要求。<br>1.5引用文件<br>本条应列出本文档引用的所有文档的编号、标题、修订版本、日期和来源。<br>1.6 术语与缩略语<br>提供此文档中用到的专门术语的定义和缩写词的原词组。</p>
<h5 id="2测试概述"><a href="#2测试概述" class="headerlink" title="2测试概述"></a>2测试概述</h5><p>2.1测试目的<br>描述本次测试的目的。</p>
<p>2.2测试内容<br>描述本次测试的主要内容，包括需要进行测试的功能和特性。可以引用测试计划和测试说明文档中的内容。对于出厂测试，要将用户文档的正确性测试作为测试的内容之一。</p>
<p>2.3测试的质量目标<br>描述本次测试所要达到的质量目标，如A、B类bug低于多少个，系统响应时间、系统表现达到什么目标等等。</p>
<p>2.4测试依据<br>描述本次测试的所依据的方案、文档和标准。</p>
<p>2.5测试环境描述<br>描述本次测试的软硬件环境，包括使用的服务器的软硬件环境和配置，网络和客户端环境，部署情况说明等。与生产系统环境的差异。</p>
<p>2.6测试时间<br>说明本次测试的执行时间。</p>
<p>2.7测试人员及工作量<br>说明本次测试投入的人员、工作量，以及具体每个功能子模块的人员、计划工作量、实际工作量的分配。</p>
<h5 id="3测试问题记录"><a href="#3测试问题记录" class="headerlink" title="3测试问题记录"></a>3测试问题记录</h5><p>通过列表的方式列出测试发现的主要问题记录，包括问题编号、问题说明、对应测试用例、解决情况等。</p>
<h5 id="4测试结果分析及软件评价"><a href="#4测试结果分析及软件评价" class="headerlink" title="4测试结果分析及软件评价"></a>4测试结果分析及软件评价</h5><p>4.1对被测试软件的总体评价<br>.根据本报告中所展示的测试结果，提供对该软件的总体评价，包括遗留bug的统计与分析、软件存在的主要问题、是否达到本次测试的质量目标等。</p>
<p>4.2测试技术分析<br>分析测试技术对测试结果的影响。</p>
<p>4.3 测试环境的影响<br>对测试环境与操作环境的差异进行评估，并分析这种差异对测试结果的影响。</p>
<p>4.4 改进建议<br>针对对被测试软件还存在的问题，提出改进建议。</p>
<h5 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h5><p>附录可用来提供那些为便于文档维护而单独出版的信息(例如图表、分类数据)。为便于处理，附录可单独装订成册。附录应按字母顺序(A,B等)编排。<br>文档中，如果定义了缺陷等级分类代码，需要在附录中给出其定义。</p>
<h3 id="（二）内容审核要点：-6"><a href="#（二）内容审核要点：-6" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1.是否全面、真实地反映了测试执行过程；测试记录是否完整、有效；</p>
<p>2.是否全面总结了测试执行过程中发现的软件问题和缺陷；</p>
<p>3.对问题及缺陷的判断和定位是否准确；</p>
<p>4.所测试内容与测试计划是否一致。</p>
<h2 id="10-软件安装部署手册"><a href="#10-软件安装部署手册" class="headerlink" title="10 软件安装部署手册"></a>10 软件安装部署手册</h2><h3 id="（一）文档内容要求-7"><a href="#（一）文档内容要求-7" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1 概述"></a>1 概述</h5><p>1.1 编写目的<br>说明编写目的，指出本文档的预期读者。</p>
<p>1.2 背景<br>说明系统的项目背景，使用本系统所包含的用户。</p>
<p>1.2 范围<br>说明本文档的适用范围。</p>
<p>1.3 参考资料<br>列出所参考的文档，如其它的用户文档。</p>
<p>1.3 软件清单<br>列出所提交的软件产品的程序及其它必要的附件文件，包括可能的支持软件、第三方包、脚本文件、说明文档等，对清单中的名项给出必要的说明。</p>
<h5 id="2-运行环境要求"><a href="#2-运行环境要求" class="headerlink" title="2 运行环境要求"></a>2 运行环境要求</h5><p>说明系统进行安装部署时，对运行环境的要求，分为硬件环境和软件环境，包括服务器、客户端。</p>
<p>服务器端的运行环境，硬件方面需要指出最低参数要求，软件方面需要指出如操作系统、数据库软件、web应用服务器的名称、版本信息等。</p>
<p>客户端的运行环境，硬件方面需要指出最低参数要求，软件方面需要列出操作系统版本、运行依赖的浏览器版本、需要安装的驱动程序等。</p>
<h5 id="3-支撑软件的安装、部署和配置"><a href="#3-支撑软件的安装、部署和配置" class="headerlink" title="3 支撑软件的安装、部署和配置"></a>3 支撑软件的安装、部署和配置</h5><p>给出所有支撑软件的安装、部署和配置步聚，可以引用第三方文档。<br>3.x &lt;支撑软件X&gt;的安装、部署和配置<br>支撑软件X安装、部署和配置步聚。</p>
<h5 id="4-应用程序的安装、部署和配置"><a href="#4-应用程序的安装、部署和配置" class="headerlink" title="4 应用程序的安装、部署和配置"></a>4 应用程序的安装、部署和配置</h5><p>4.x&lt;应用程序x&gt;的安装、部署和配置</p>
<p>4.x.1 安装、部署前的准备工作<br>说明系统进行安装部署前，需要进行的前期准备工作。如对操作系统、数据库、web应用服务器进行相应的参数设置，数据库的初始化等等。</p>
<p>4.x.2 部署环境概要说明<br>可以对部署的服务器环境，如文件目录结构，进行概要说明。</p>
<p>4.x.3 依赖<br>系统在进行安装、部署时，如果需要对外部系统运行或接口有依赖关系，在此列出。</p>
<p>4.x.4 安装、部署和配置步聚<br>列出详细的安装、部署和配置过程，包括对相关配置文件内容的修改。</p>
<h5 id="5-程序的启动和停止"><a href="#5-程序的启动和停止" class="headerlink" title="5 程序的启动和停止"></a>5 程序的启动和停止</h5><p>给出软件的启动和停止说明</p>
<h3 id="（二）内容审核要点：-7"><a href="#（二）内容审核要点：-7" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．所述运行环境和支撑软件是否详细完备；</p>
<p>2．部署前的准备工作是否详细完备；</p>
<p>3．安装过程是否详细易懂。</p>
<h2 id="11源代码交付说明"><a href="#11源代码交付说明" class="headerlink" title="11源代码交付说明"></a>11源代码交付说明</h2><h3 id="（一）文档内容要求-8"><a href="#（一）文档内容要求-8" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1 概述"></a>1 概述</h5><p>1.1 背景<br>说明系统的项目背景，本系统的使用和运维单位等。</p>
<p>1.2 范围<br>说明本文档的适用范围。</p>
<h5 id="2-源代码交付清单"><a href="#2-源代码交付清单" class="headerlink" title="2 源代码交付清单"></a>2 源代码交付清单</h5><p>以表格的形式，列出所提交的源代码光盘中所有的文件目录结构，对各目录和子目录加以说明。对主要源代码程序加以说明。对其它必要的附件（包括第三方包、类库、配置文件、程序的帮助说明文档等）也要加以说明。</p>
<h5 id="3-编译和打包的说明"><a href="#3-编译和打包的说明" class="headerlink" title="3 编译和打包的说明"></a>3 编译和打包的说明</h5><p>3.1编译环境和工具要求<br>如果需要，对编译环境和所需要工具进行简要说明。</p>
<p>3.2 编译和打包步聚<br>说明对源代码进行编译和打包的详细步聚，要能根据这些步骤生成可用的目标程序。尽量使用脚本方式生成目标程序。</p>
<p>3.3 生成物说明<br>对编译生成的执行程序进行简要说明。</p>
<h3 id="（二）内容审核要点：-8"><a href="#（二）内容审核要点：-8" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．交付清单是否详细完备；</p>
<p>2．说明文字是否明确易懂；</p>
<p>3．交付物版本是否和实际系统的程序版本一致（能根据本文档生成与实际生产系统一致的程序）；</p>
<h2 id="12-系统上线部署方案"><a href="#12-系统上线部署方案" class="headerlink" title="12 系统上线部署方案"></a>12 系统上线部署方案</h2><h3 id="（一）文档内容要求-9"><a href="#（一）文档内容要求-9" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-概述-4"><a href="#1-概述-4" class="headerlink" title="1 概述"></a>1 概述</h5><p>1.1 编写目的<br>说明编写目的，指出预期的读者范围。<br>1.2背景<br>简要描述此次上线部署的背景。<br>1.3 参考资料<br>列出所参考的文档，如安装部署手册等。</p>
<h5 id="2-工作内容"><a href="#2-工作内容" class="headerlink" title="2 工作内容"></a>2 工作内容</h5><p>说明本次上线部署的工作内容。即要做哪几件事。</p>
<h5 id="3-部署环境"><a href="#3-部署环境" class="headerlink" title="3 部署环境"></a>3 部署环境</h5><p>3.1部署结构<br>以部署结构图的形式描述本软件系统各部件的上线部署结构。对部署部件、服务器、网络等情况加以必要的说明。<br>3.2软件环境描述<br>明确描述本次部署的软件环境。包括操作系统、数据库、JDK、中间件等系统软件及版本信息。对于尚未明确需要协调的部分要加以说明。<br>3.3硬件环境描述<br>明确描述本次部署的硬件支撑环境。对于尚未明确需要协调的部分要加以说明。</p>
<h5 id="4-详细步骤"><a href="#4-详细步骤" class="headerlink" title="4 详细步骤"></a>4 详细步骤</h5><p>详细说明本次部署要做的各项工作的执行步骤（需要时可以引用安装部署手册中的内容）。本章是该文档的重点，各步骤必须具体明确，具有可操作性。</p>
<h5 id="5-人员和进度安排"><a href="#5-人员和进度安排" class="headerlink" title="5 人员和进度安排"></a>5 人员和进度安排</h5><p>列出本次的人员组织以及详细的进度安排。</p>
<h5 id="6-部署测试"><a href="#6-部署测试" class="headerlink" title="6 部署测试"></a>6 部署测试</h5><p>说明系统上线部署时需要进行的必要的测试验证工作内容。</p>
<h5 id="7-部署不成功的处理"><a href="#7-部署不成功的处理" class="headerlink" title="7 部署不成功的处理"></a>7 部署不成功的处理</h5><p>说明部署不成功的处理措施。如果是在生产系统上替代已有系统，则必须提供完善的应对措施。</p>
<h3 id="（二）内容审核要点：-9"><a href="#（二）内容审核要点：-9" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．部署目标和工作内容是否明确；</p>
<p>2．部署环境描述是否清楚；</p>
<p>3．任务是否适当分解，人员是否落实，进度是否明确。</p>
<p>4．所述步骤是否具体并具有可操作性；</p>
<p>4．部署测试内容是否能对本次部署是否成功能起到验证作用。</p>
<h2 id="13-系统上线部署实施报告"><a href="#13-系统上线部署实施报告" class="headerlink" title="13 系统上线部署实施报告"></a>13 系统上线部署实施报告</h2><h3 id="（一）文档内容要求-10"><a href="#（一）文档内容要求-10" class="headerlink" title="（一）文档内容要求"></a>（一）文档内容要求</h3><h5 id="1-概述-5"><a href="#1-概述-5" class="headerlink" title="1 概述"></a>1 概述</h5><p>1.1 编写目的<br>说明编写目的，指出预期的读者范围。<br>1.2背景<br>简要描述此次上线部署的背景。<br>1.3 参考资料<br>列出所参考的文档，如安装部署手册等。</p>
<h5 id="2-工作内容-1"><a href="#2-工作内容-1" class="headerlink" title="2 工作内容"></a>2 工作内容</h5><p>说明本次上线部署的工作内容。即要做哪几件事。</p>
<h5 id="3-实际完成情况"><a href="#3-实际完成情况" class="headerlink" title="3 实际完成情况"></a>3 实际完成情况</h5><p>对照工作内容，详细说明本次实际部署过程和工作任务完成情况。</p>
<h5 id="4-部署测试情况"><a href="#4-部署测试情况" class="headerlink" title="4 部署测试情况"></a>4 部署测试情况</h5><p>详细说明本次部署测试情况，测试内容是否都获通过。</p>
<h5 id="5遗留工作和待解决问题"><a href="#5遗留工作和待解决问题" class="headerlink" title="5遗留工作和待解决问题"></a>5遗留工作和待解决问题</h5><p>如果有遗留工作或问题，需要在此部分列出。</p>
<h5 id="6-签字栏"><a href="#6-签字栏" class="headerlink" title="6 签字栏"></a>6 签字栏</h5><p>本报告作为验收的依据，需要相关方的签字。应留有签字栏。</p>
<h3 id="（二）内容审核要点：-10"><a href="#（二）内容审核要点：-10" class="headerlink" title="（二）内容审核要点："></a>（二）内容审核要点：</h3><p>1．任务描述是否明确；</p>
<p>2．部署实际完成情况是否描述清楚；</p>
<p>3．部署测试情况是否描述清楚；</p>
<p>2．部署部署过程是否与实际情况一致。</p>
<h2 id="14-软件终验测试方案"><a href="#14-软件终验测试方案" class="headerlink" title="14 软件终验测试方案"></a>14 软件终验测试方案</h2><h3 id="一-文档内容要求-2"><a href="#一-文档内容要求-2" class="headerlink" title="(一) 文档内容要求"></a>(一) 文档内容要求</h3><h5 id="１．测试目的"><a href="#１．测试目的" class="headerlink" title="１．测试目的"></a>１．测试目的</h5><p>终验测试是项目终验的组成部分，用于各方现场验证系统各功能可用，试运行中发现的问题是否已经解决。</p>
<h5 id="２．测试对象"><a href="#２．测试对象" class="headerlink" title="２．测试对象"></a>２．测试对象</h5><p>描述所测试的软件系统名、版本等信息</p>
<h5 id="３．测试方式"><a href="#３．测试方式" class="headerlink" title="３．测试方式"></a>３．测试方式</h5><p>由业主方、承建方、监理方、总集方代表在用户现场，依据本方案进行测试，并记录测试结果，时间以半天到一天为宜。测试结束后，现场编制终验测试报告并由各方签字确认。</p>
<h5 id="４．测试通过准则"><a href="#４．测试通过准则" class="headerlink" title="４．测试通过准则"></a>４．测试通过准则</h5><p>本测试方案中所列所有测试项均已通过，则终验测试通过，否则为不通过。</p>
<h5 id="5．功能测试"><a href="#5．功能测试" class="headerlink" title="5．功能测试"></a>5．功能测试</h5><p>４.1 功能名1<br>以表格方式列出子功能、测试方法、是否通过、备注<br>4.2 功能名2<br>。。。</p>
<h5 id="6．试运行期间问题解决情况测试"><a href="#6．试运行期间问题解决情况测试" class="headerlink" title="6．试运行期间问题解决情况测试"></a>6．试运行期间问题解决情况测试</h5><p>以表格方式列出问题、问题描述、测试方法、是否通过、备注</p>
<h3 id="二-内容审核要点：-2"><a href="#二-内容审核要点：-2" class="headerlink" title="(二)内容审核要点："></a>(二)内容审核要点：</h3><p>略</p>
<h2 id="15-软件终验测试报告"><a href="#15-软件终验测试报告" class="headerlink" title="15 软件终验测试报告"></a>15 软件终验测试报告</h2><h3 id="一-文档内容要求-3"><a href="#一-文档内容要求-3" class="headerlink" title="(一) 文档内容要求"></a>(一) 文档内容要求</h3><h5 id="１．测试目的-1"><a href="#１．测试目的-1" class="headerlink" title="１．测试目的"></a>１．测试目的</h5><p>终验测试是项目终验的组成部分，用于各方现场验证系统各功能可用，试运行中发现的问题是否已经解决。</p>
<h5 id="２．测试对象-1"><a href="#２．测试对象-1" class="headerlink" title="２．测试对象"></a>２．测试对象</h5><p>描述所测试的软件系统名、版本等信息</p>
<h5 id="３．测试方式-1"><a href="#３．测试方式-1" class="headerlink" title="３．测试方式"></a>３．测试方式</h5><p>由业主方、承建方、监理方、总集方代表在用户现场，依据本方案进行测试，并记录测试结果，时间以半天到一天为宜。测试结束后，现场编制终验测试报告并由各方签字确认。</p>
<h5 id="４．测试通过准则-1"><a href="#４．测试通过准则-1" class="headerlink" title="４．测试通过准则"></a>４．测试通过准则</h5><p>终验测试方案中所列所有测试项均已通过，则终验测试通过，否则为不通过。</p>
<h5 id="５．测试时间"><a href="#５．测试时间" class="headerlink" title="５．测试时间"></a>５．测试时间</h5><p>说明实施测试的时间</p>
<h5 id="６．测试地点"><a href="#６．测试地点" class="headerlink" title="６．测试地点"></a>６．测试地点</h5><p>说明实施测试的地点</p>
<h5 id="７．测试参与人员"><a href="#７．测试参与人员" class="headerlink" title="７．测试参与人员"></a>７．测试参与人员</h5><p>说明参与终验测试的各方人员，要说明所属单位</p>
<h5 id="８．功能测试结果记录"><a href="#８．功能测试结果记录" class="headerlink" title="８．功能测试结果记录"></a>８．功能测试结果记录</h5><p>根据终验测试方案，以表格的方式列出各项所测功能是否通过</p>
<h5 id="９．问题解决情况记录"><a href="#９．问题解决情况记录" class="headerlink" title="９．问题解决情况记录"></a>９．问题解决情况记录</h5><p>根据终验测试方案，以表格的方式列出各项所测问题是否全部解决</p>
<h5 id="10．测试结论"><a href="#10．测试结论" class="headerlink" title="10．测试结论"></a>10．测试结论</h5><p>给出终验测试是否通过的结论。</p>
<h3 id="二-内容审核要点：-3"><a href="#二-内容审核要点：-3" class="headerlink" title="(二)内容审核要点："></a>(二)内容审核要点：</h3><p>略</p>
<p>附：关于接口描述的文档内容要求</p>
<h5 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h5><p>1.1、接口的概念<br>在应用软件系统中，接口是程序和系统与外界交互的窗口。本文中所阐述的接口，包括：</p>
<ul>
<li>应用软件系统提供软件功能供外部软件程序调用；</li>
<li>应用软件系统调用外部系统提供的软件功能；</li>
<li>应用软件系统依据应用级别的交互协议与外系统进行功能和数据的交换；</li>
<li>应用软件系统通过公用文件目录或数据库与外部系统交换信息。</li>
</ul>
<p>此处中所阐述的接口不包括：</p>
<ul>
<li>应用软件系统内部功能模块之间的接口调用；</li>
<li>应用软件系统提供的人机交互界面。</li>
</ul>
<p>1.2、接口处理策略</p>
<p>xxxxxxxxxxx是一个庞大的由众多应用子系统构成的复杂分布式系统。各应用子系统之间存在众多的软件接口关系。</p>
<p>在xxxxxxxxxxx中，我们采用SOA的体系架构来解决各应用子系统之间、应用子系统与外部系统之间的接口问题。通过基于ESB服务总线技术的应用支撑平台来发布和管理应用软件系统对外提供公用服务。在这里，服务系指精确定义、封装完善、独立于其他服务所处环境和状态的软件功能。接口服务系指以服务的方式提供的接口实现。<br>通过支撑平台，各业务子系统接口之间的点对点关系，变成了各业务子系统接口与支撑平台的关系，从而简化了系统间的逻辑关系，应用支撑平台是各业务子系统相互连接的中介和纽带。各业务子系统之间在进行服务请求和服务调用时所需的一些附加工作，如通信协议的转换、路由、消息格式转换、安全性保证等，也可以由应用支撑平台来提供支持。此外，应用支撑平台提供适配器方式以支持文件同步、数据库同步、JMS、FTP等,应用支持平台还提供定制适配器功能接入特殊的外部系统。</p>
<p>通过应用支持平台发布公用服务，将有利于接口服务的复用，以及接口服务的维护和管理。</p>
<p>1.3、接口文档规范的必要性<br>xxxxxxxxxxx建设过程中，各应用软件系统的接口定义、实现、发布和管理是处理好接口问题的四个关键环节，他们贯穿在软件生命周期的全过程。为了保证在这些环节对应用软件系统之间的接口问题进行有效的处理，保证接口的良好定义、合理实现、受控发布和方便管理，有必要对相关技术文档提出规范化要求。<br>涉及接口定义的技术文档主要有业务需求说明书、软件需求规格说明书；涉及接口实现的技术文档主要有软件概要设计说明书、软件详细设计说明书、用户手册；涉及接口服务发布和管理的技术文档包括接口服务发布和管理规范等。</p>
<h5 id="2、接口定义的文档规范要求"><a href="#2、接口定义的文档规范要求" class="headerlink" title="2、接口定义的文档规范要求"></a>2、接口定义的文档规范要求</h5><p>2.1、业务需求说明书中的接口描述</p>
<p>在xxxxxxxxxxx中，业务需求说明书由业主方任命的子项目组负责编制。业务需求说明书中有关接口描述的要求：<br>1． 宜有专门章节阐述子项目拟分包系统与其它子项目系统及外部系统之间的接口关系；</p>
<p>2． 在描述本系统与外部某系统接口关系时，宜：</p>
<ul>
<li>具体阐明本系统的哪项或哪些业务功能与所述外部系统存在接口关系；</li>
<li>阐明接口的类型，如向外系统提供数据、从外系统获取数据、对外系统提供功能服务、向外系统请求某项功能服务；</li>
<li>对所述接口作必要的文字解释。</li>
</ul>
<p>2.2、软件需求规格说明书中的接口描述</p>
<p>软件需求规格说明书系由承建方在业务需求说明书的基础上，在系统功能、性能、外部限制条件等方面的进一步明确和细化，作为系统设计、实现、测试的依据。是涉及接口定义的重要文档。</p>
<p>软件需求规格说明书中有关接口定义和描述的要求如下：</p>
<p>1． 软件需求规格说明书中有关与外部系统接口定义的范围应涵盖业务需求说明书中有关接口的描述，并补充业务需求书中遗漏的接口内容；</p>
<p>2． 本系统作为接口对外提供的软件功能，应在软件需求规格说明书中明确阐明该功能。包括接口功能编号、名称、性质（功能服务、数据交换、文件交换等）、接口功能的各输入参数及数据类型，返回的结果数据类型等；<br>3． 如果接口是作为某种信息交互协议（如Z39.50）的服务端提供的功能，要求阐明支持的协议版本以及是否完全支持该协议，如果不完全支持，要明确列举支持或不支持的功能；</p>
<p>4． 如果接口是某种信息交互协议（如Z39.50）的客户端，且外部系统提供的相应协议服务端功能是本系统相关功能实现的必要条件，须将对外部系统的相关接口实现要求列入软件需求规格说明书中的限制条件部分；</p>
<p>5． 如果系统功能涉及到要使用或访问外部系统提供的功能，须将其列入需求规格说明书中限制条件部分。</p>
<p>2．3 接口定义的变更<br>如果在软件需求评审通过后的实施过程中，原定义或描述的接口发生了变化，须通过变更流程修改软件需求规格说明书；或编制需求文档的补充材料，与原需求规格说明书一起，作为测试和验收的依据。</p>
<h5 id="3、接口实现的文档规范要求"><a href="#3、接口实现的文档规范要求" class="headerlink" title="3、接口实现的文档规范要求"></a>3、接口实现的文档规范要求</h5><p>3.1、软件设计说明书中的接口服务实现描述</p>
<p>在软件概要设计说明书中，有关接口实现的要求如下：</p>
<p>1． 须覆盖软件需求说明书中所述对外提供接口功能；</p>
<p>2． 确定接口的实现策略。如采用Web Service、EJB、通过网络端口连接对外提供服务、文件目录或数据库同步等。</p>
<p>3． 对外提供的接口功能，需要进行形式化描述，如果不能确定在软件概要设计说明书完全进行接口功能的形式化表述，应在该说明书中明示并在详细设计说明书中给出以供编码实现之用。</p>
<p>3．2 用户文档中的接口使用描述</p>
<p>在设计说明书中描述的所有对外提供的接口功能，最终都要落实在用户文档中。具体的用户文档名称，取决于项目合同和软件开发计划中对最终交付文件的规定。如用户使用手册、用户参考手册、用户技术手册等。<br>各应用软件系统通过该系统的用户文档对外正式公布本系统对外的接口服务的功能和调用方式。</p>
<h1 id="产品文档的具体要求"><a href="#产品文档的具体要求" class="headerlink" title="产品文档的具体要求"></a>产品文档的具体要求</h1><h1 id="用户文档的具体要求"><a href="#用户文档的具体要求" class="headerlink" title="用户文档的具体要求"></a>用户文档的具体要求</h1><h2 id="软件用户手册"><a href="#软件用户手册" class="headerlink" title="软件用户手册"></a>软件用户手册</h2><h3 id="1-引言-3"><a href="#1-引言-3" class="headerlink" title="1.引言"></a>1.引言</h3><p>1.1编写目的<br>【阐明编写手册的目的。指明读者对象。】</p>
<p>1.2项目背景<br>【说明项目来源、委托单位、开发单位及主管部门】</p>
<p>1.3 定义<br>【列出手册中使用的专门术语的定义和缩写词的原意】</p>
<p>1.4参考资料<br>【列出有关资料的作者、标题、编号、发表日期、出版单位或资料来源，可包括：a.项目的计划任务书、合同或批文；b.项目开发计划；C. 需求规格说明书；d.概要设计说明书；e。详细设计说明书；f.测试计划；g。手册中引用的其他资料、采用的软件工程标准或软件工程规范。】</p>
<h3 id="2-软件概述"><a href="#2-软件概述" class="headerlink" title="2.软件概述"></a>2.软件概述</h3><p>2.1目标</p>
<p>2.2功能</p>
<p>2.3 性能<br>a.数据精确度【包括输入、输出及处理数据的精度】</p>
<p>b.时间特性【如响应时间、处理时间、数据传输时间等。】</p>
<p>c.灵活性【在操作方式、运行环境需做某些变更时软件的适应能力。】</p>
<h4 id="3-运行环境"><a href="#3-运行环境" class="headerlink" title="3.运行环境"></a>3.运行环境</h4><p>3.1硬件</p>
<p>【列出软件系统运行时所需的硬件最小配置，如<br>a. 计算机型号、主存容量；<br>b. 外存储器、媒体、记录格式、设备型号及数量；<br>c. 输入、输出设备；<br>d. 数据传输设备及数据转换设备的型号及数量。】</p>
<p>3.2支持软件</p>
<p>【如：a. 操作系统名称及版本号；<br>b. 语言编译系统或汇编系统的名称及版本号；<br>c. 数据库管理系统的名称及版本号；<br>d. 其他必要的支持软件。】</p>
<h4 id="4-使用说明"><a href="#4-使用说明" class="headerlink" title="4.使用说明"></a>4.使用说明</h4><p>4.1安装和初始化<br>给出程序的存储形式、操作命令、反馈信息及其含意、表明安装完成的测试实例以及安装所需的软件工具等。</p>
<p>4.2输入<br>【给出输入数据或参数的要求。】</p>
<p>4.2.1数据背景<br>【说明数据来源、存储媒体、出现频度、限制和质量管理等。】</p>
<p>4.2.2数据格式<br>【如：a。长度；b.格式基准；C，标号；d.顺序；e。分隔符；f.词汇表；g. 省略和重复；h.控制。】</p>
<p>4.2.3输入举例</p>
<p>4.3输出<br>【给出每项输出数据的说明】</p>
<p>4.3.l数据背景<br>【说明输出数据的去向使用频度、存放媒体及质量管理等。】</p>
<p>4.3.2数据格式<br>【详细阐明每一输出数据的格式，如：首部、主体和尾部的具体形式。】</p>
<p>4.3.3举例</p>
<p>4.4出错和恢复<br>【给出：a。出错信息及其含意；b.用户应采取的措施，如修改、恢复、再启动.】</p>
<p>4.5求助查询<br>【说明如何操作】</p>
<h4 id="5-运行说明"><a href="#5-运行说明" class="headerlink" title="5.运行说明"></a>5.运行说明</h4><p>5.1运行表<br>【列出每种可能的运行情况，说明其运行目的。】</p>
<p>5.2运行步骤<br>【按顺序说明每种运行的步骤，应包括：】</p>
<p>5.2.1运行控制</p>
<p>5.2.2操作信息<br>a. 运行目的；<br>b. 操作要求；<br>c. 启动方法；<br>d. 预计运行时间；<br>e. 操作命令格式及格式说明；<br>f. 其他事项。<br>5.2.3输入／输出文件<br>【给出建立或更新文件的有关信息，如：】<br>a.文件的名称及编号；b.记录媒体；C。存留的目录；d.文件的支配<br>【说明确定保留文件或废弃文件的准则，分发文件的对象，占用硬件的优先级及保密控制等.】</p>
<p>5.2.4启动或恢复过程</p>
<h4 id="6-非常规过程"><a href="#6-非常规过程" class="headerlink" title="6.非常规过程"></a>6.非常规过程</h4><p>【提供应急或非常规操作的必要信息及操作步骤，如出错处理操作、向后备系统切换操作以及维护人员须知的操作和注意事项。】</p>
<h4 id="7-操作命令一览表"><a href="#7-操作命令一览表" class="headerlink" title="7.操作命令一览表"></a>7.操作命令一览表</h4><p>【按字母顺序逐个列出全部操作命令的格式、功能及参数说明。】</p>
<h4 id="8-程序文件（或命令文件）和数据文件一览表"><a href="#8-程序文件（或命令文件）和数据文件一览表" class="headerlink" title="8.程序文件（或命令文件）和数据文件一览表"></a>8.程序文件（或命令文件）和数据文件一览表</h4><p>【按文件名字母顺序或按功能与模块分类顺序逐个列出文件名称、标识符及说明。】</p>
<h4 id="9-用户操作举例"><a href="#9-用户操作举例" class="headerlink" title="9.用户操作举例"></a>9.用户操作举例</h4>]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码解析</title>
    <url>/2019/07/29/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>定义：</strong>HashMap实现了Map接口，Map接口定义了键映射到值的规则。HashMap继承了AbstractMap，AbstractMap提供接口的主要实现，以最大限度的减少HashMap实现Map接口所需的工作。</p>
<p><strong>HashMap 有两个参数影响性能：</strong>初始容量和加载因子。加载因子表示哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目超过了容量和加载因子的乘积的时候，就会进行重哈希操作。加载因子默认为0.75，容量默认为16。加载因子过高，容易产生哈希冲突，加载因子过小，容易浪费空间，0.75是一种折中。</p>
<a id="more"></a>

<p><strong>注意：</strong>HashMap 不是同步的。<br>HashMap 的整体思路就是先创建一个 table 数组，然后算出哈希值，找到table 数组特定的位置，找到或者存放该值。另外，由于哈希冲突，该位置可能有一个或者多个值（使用链表法进行连接），还需要进一步判断。</p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.SharedSecrets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidObjectException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashMap是常用的Java集合之一，是基于哈希表的Map接口的实现。与HashTable主要区别为不支持同步和允许null作为key和value。</span></span><br><span class="line"><span class="comment"> * HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。</span></span><br><span class="line"><span class="comment"> * 如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</span></span><br><span class="line"><span class="comment"> * 在JDK1.6中，HashMap采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。</span></span><br><span class="line"><span class="comment"> * 但是当位于一个数组中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。</span></span><br><span class="line"><span class="comment"> * 而JDK1.8中，HashMap采用数组+链表+红黑树实现，当链表长度超过阈值8时，将链表转换为红黑树，这样大大减少了查找时间。</span></span><br><span class="line"><span class="comment"> * 原本Map.Entry接口的实现类Entry改名为了Node。转化为红黑树时改用另一种实现TreeNode。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的初始容量（容量为HashMap中槽的数目）是16，且实际容量必须是2的整数次幂。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认装填因子0.75，如果当前键值对个数 &gt;= HashMap最大容量*装填因子，进行rehash操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDK1.8 新加，Entry链表最大长度，当桶中节点数目大于该长度时，将链表转成红黑树存储；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDK1.8 新加，当桶中节点数小于该长度，将红黑树转为链表存储；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶可能被转化为树形结构的最小容量。当哈希表的大小超过这个阈值，才会把链式结构转化成树型结构，否则仅采取扩容来尝试减少冲突。</span></span><br><span class="line"><span class="comment">     * 应该至少4*TREEIFY_THRESHOLD来避免扩容和树形结构化之间的冲突。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDK1.6用Entry描述键值对，JDK1.8中用Node代替Entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// hash存储key的hashCode</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="comment">// final:一个键值对的key不可改变</span></span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="comment">//指向下个节点的引用</span></span><br><span class="line">        Node&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K, V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">"="</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;) o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                        Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Static utilities -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap中键值对的存储形式为链表节点，hashCode相同的节点（位于同一个桶）用链表组织</span></span><br><span class="line"><span class="comment">     * hash方法分为三步:</span></span><br><span class="line"><span class="comment">     * 1.取key的hashCode</span></span><br><span class="line"><span class="comment">     * 2.key的hashCode高16位异或低16位</span></span><br><span class="line"><span class="comment">     * 3.将第一步和第二步得到的结果进行取模运算。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="comment">//计算key的hashCode, h = Objects.hashCode(key)</span></span><br><span class="line">        <span class="comment">//h &gt;&gt;&gt; 16表示对h无符号右移16位，高位补0，然后h与h &gt;&gt;&gt; 16按位异或</span></span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果参数x实现了Comparable接口，返回参数x的类名，否则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">            Class&lt;?&gt; c;</span><br><span class="line">            Type[] ts, as;</span><br><span class="line">            Type t;</span><br><span class="line">            ParameterizedType p;</span><br><span class="line">            <span class="keyword">if</span> ((c = x.getClass()) == String<span class="class">.<span class="keyword">class</span>) // <span class="title">bypass</span> <span class="title">checks</span></span></span><br><span class="line"><span class="class">                <span class="title">return</span> <span class="title">c</span></span>;</span><br><span class="line">            <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                            ((p = (ParameterizedType) t).getRawType() ==</span><br><span class="line">                                    Comparable<span class="class">.<span class="keyword">class</span>) &amp;&amp;</span></span><br><span class="line"><span class="class">                            (<span class="title">as</span> </span>= p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                            as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                        <span class="keyword">return</span> c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果x的类型为kc，则返回k.compareTo(x)，否则返回0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;) <span class="comment">// for cast to Comparable</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x == <span class="keyword">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">                ((Comparable) k).compareTo(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结果为&gt;=cap的最小2的自然数幂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先移位再或运算，最终保证返回值是2的整数幂</span></span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希桶数组，分配的时候，table的长度总是2的幂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K, V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap将数据转换成set的另一种存储形式，这个变量主要用于迭代功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际存储的数量，则HashMap的size()方法，实际返回的就是这个值，isEmpty()也是判断该值是否为0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hashmap结构被改变的次数，fail-fast机制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap的扩容阈值，在HashMap中存储的Node键值对超过这个数量时，自动扩容容量为原来的二倍</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap的负加载因子，可计算出当前table长度下的扩容阈值：threshold = loadFactor * table.length</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Public operations -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定的初始化容量initial capacity 和加载因子load factor构造一个空HashMap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity 初始化容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFactor      加载因子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 如果指定的初始化容量为负数或者加载因子为非正数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                    initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                    loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定的初始化容量initial capacity和默认加载因子DEFAULT_LOAD_FACTOR（0.75）构造一个空HashMap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity 初始化容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 如果指定的初始化容量为负数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定的初始化容量（16）和默认加载因子DEFAULT_LOAD_FACTOR（0.75）构造一个空HashMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定Map m构造新的HashMap。使用指定的初始化容量（16）和默认加载因子DEFAULT_LOAD_FACTOR（0.75）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m 指定的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException 如果指定的map是null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map.putAll and Map constructor的实现需要的方法</span></span><br><span class="line"><span class="comment">     * 将m的键值对插入本map中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m     指定的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict 初始化map时使用false，否则使用true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = m.size();</span><br><span class="line">        <span class="comment">//如果参数map不为空</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断table是否已经初始化</span></span><br><span class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="comment">// 未初始化，s为m的实际元素个数</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>) s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>) MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="keyword">int</span>) ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="comment">// 计算得到的t大于阈值，则初始化阈值</span></span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    <span class="comment">//根据容量初始化临界值</span></span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">                <span class="comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">                <span class="comment">//扩容处理</span></span><br><span class="line">                resize();</span><br><span class="line">            <span class="comment">// 将m中的所有元素添加至HashMap中</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回map中键值对映射的个数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map中键值对映射的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果map中没有键值对映射，返回true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果map中没有键值对映射，返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定的key映射的value，如果value为null，则返回null</span></span><br><span class="line"><span class="comment">     * get可以分为三个步骤：</span></span><br><span class="line"><span class="comment">     * 1.通过hash(Object key)方法计算key的哈希值hash。</span></span><br><span class="line"><span class="comment">     * 2.通过getNode( int hash, Object key)方法获取node。</span></span><br><span class="line"><span class="comment">     * 3.如果node为null，返回null，否则返回node.value。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #put(Object, Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="comment">//根据key及其hash值查询node节点，如果存在，则返回该节点的value值</span></span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key的哈希值和key获取对应的节点</span></span><br><span class="line"><span class="comment">     * getNode可分为以下几个步骤：</span></span><br><span class="line"><span class="comment">     * 1.如果哈希表为空，或key对应的桶为空，返回null</span></span><br><span class="line"><span class="comment">     * 2.如果桶中的第一个节点就和指定参数hash和key匹配上了，返回这个节点。</span></span><br><span class="line"><span class="comment">     * 3.如果桶中的第一个节点没有匹配上，而且有后续节点</span></span><br><span class="line"><span class="comment">     * 3.1如果当前的桶采用红黑树，则调用红黑树的get方法去获取节点</span></span><br><span class="line"><span class="comment">     * 3.2如果当前的桶不采用红黑树，即桶中节点结构为链式结构，遍历链表，直到key匹配</span></span><br><span class="line"><span class="comment">     * 4.找到节点返回null，否则返回null。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash 指定参数key的哈希值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  指定参数key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回node，如果没有则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; first, e;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        K k;</span><br><span class="line">        <span class="comment">//如果哈希表不为空，而且key对应的桶上不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果桶中的第一个节点就和指定参数hash和key匹配上了</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                    ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">//返回桶中的第一个节点</span></span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="comment">//如果桶中的第一个节点没有匹配上，而且有后续节点</span></span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果当前的桶采用红黑树，则调用红黑树的get方法去获取节点</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class="line">                <span class="comment">//如果当前的桶不采用红黑树，即桶中节点结构为链式结构</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">//遍历链表，直到key匹配</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果哈希表为空，或者没有找到节点，返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果map中含有key为指定参数key的键值对，返回true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 指定参数key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果map中含有key为指定参数key的键值对，返回true</span></span><br><span class="line"><span class="comment">     * key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定参数key和指定参数value插入map中，如果key已经存在，那就替换key对应的value</span></span><br><span class="line"><span class="comment">     * put(K key, V value)可以分为三个步骤：</span></span><br><span class="line"><span class="comment">     * 1.通过hash(Object key)方法计算key的哈希值。</span></span><br><span class="line"><span class="comment">     * 2.通过putVal(hash(key), key, value, false, true)方法实现功能。</span></span><br><span class="line"><span class="comment">     * 3.返回putVal方法返回的结果。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   指定key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 指定value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果value被替换，则返回旧的value，否则返回null。当然，可能key对应的value就是null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 倒数第二个参数false：表示允许旧值替换</span></span><br><span class="line">        <span class="comment">// 最后一个参数true：表示HashMap不处于创建模式</span></span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map.put和其他相关方法的实现需要的方法</span></span><br><span class="line"><span class="comment">     * putVal方法可以分为下面的几个步骤:</span></span><br><span class="line"><span class="comment">     * 1.如果哈希表为空，调用resize()创建一个哈希表。</span></span><br><span class="line"><span class="comment">     * 2.如果指定参数hash在表中没有对应的桶，即为没有碰撞，直接将键值对插入到哈希表中即可。</span></span><br><span class="line"><span class="comment">     * 3.如果有碰撞，遍历桶，找到key映射的节点</span></span><br><span class="line"><span class="comment">     * 3.1桶中的第一个节点就匹配了，将桶中的第一个节点记录起来。</span></span><br><span class="line"><span class="comment">     * 3.2如果桶中的第一个节点没有匹配，且桶中结构为红黑树，则调用红黑树对应的方法插入键值对。</span></span><br><span class="line"><span class="comment">     * 3.3如果不是红黑树，那么就肯定是链表。遍历链表，如果找到了key映射的节点，就记录这个节点，退出循环。如果没有找到，在链表尾部插入节点。插入后，如果链的长度大于TREEIFY_THRESHOLD这个临界值，则使用treeifyBin方法把链表转为红黑树。</span></span><br><span class="line"><span class="comment">     * 4.如果找到了key映射的节点，且节点不为null</span></span><br><span class="line"><span class="comment">     * 4.1记录节点的vlaue。</span></span><br><span class="line"><span class="comment">     * 4.2如果参数onlyIfAbsent为false，或者oldValue为null，替换value，否则不替换。</span></span><br><span class="line"><span class="comment">     * 4.3返回记录下来的节点的value。</span></span><br><span class="line"><span class="comment">     * 5.如果没有找到key映射的节点（2、3步中讲了，这种情况会插入到hashMap中），插入节点后size会加1，这时要检查size是否大于临界值threshold，如果大于会使用resize方法进行扩容。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash         指定参数key的哈希值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          指定参数key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        指定参数value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent 如果为true，即使指定参数key在map中已经存在，也不会替换value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict        如果为false，数组table在创建模式中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果value被替换，则返回旧的value，否则返回null。当然，可能key对应的value就是null。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; p;</span><br><span class="line">        <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">//如果哈希表为空，调用resize()创建一个哈希表，并用变量n记录哈希表长度</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果指定参数hash在表中没有对应的桶，即为没有碰撞</span></span><br><span class="line"><span class="comment">         * Hash函数，(n - 1) &amp; hash 计算key将被放置的槽位</span></span><br><span class="line"><span class="comment">         * (n - 1) &amp; hash 本质上是hash % n，位运算更快</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//直接将键值对插入到map中即可</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">// 桶中已经存在元素</span></span><br><span class="line">            Node&lt;K, V&gt; e;</span><br><span class="line">            K k;</span><br><span class="line">            <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">// 将第一个元素赋值给e，用e来记录</span></span><br><span class="line">                e = p;</span><br><span class="line">                <span class="comment">// 当前桶中无该键值对，且桶是红黑树结构，按照红黑树结构插入</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">                <span class="comment">// 当前桶中无该键值对，且桶是链表结构，按照链表结构插入到尾部</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">// 遍历到链表尾部</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 检查链表长度是否达到阈值，达到将该槽位节点组织形式转为红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 链表节点的&lt;key, value&gt;与put操作&lt;key, value&gt;相同时，不做重复操作，跳出循环</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到或新建一个key和hashCode与插入元素相等的键值对，进行put操作</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">// 记录e的value</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * onlyIfAbsent为false或旧值为null时，允许替换旧值</span></span><br><span class="line"><span class="comment">                 * 否则无需替换</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                <span class="comment">// 访问后回调</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="comment">// 返回旧值</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新结构化修改信息</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="comment">// 键值对数目超过阈值时，进行rehash</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 插入后回调</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对table进行初始化或者扩容。</span></span><br><span class="line"><span class="comment">     * 如果table为null，则对table进行初始化</span></span><br><span class="line"><span class="comment">     * 如果对table扩容，因为每次扩容都是翻倍，与原来计算（n-1）&amp;hash的结果相比，节点要么就在原来的位置，要么就被分配到“原位置+旧容量”这个位置</span></span><br><span class="line"><span class="comment">     * resize的步骤总结为:</span></span><br><span class="line"><span class="comment">     * 1.计算扩容后的容量，临界值。</span></span><br><span class="line"><span class="comment">     * 2.将hashMap的临界值修改为扩容后的临界值</span></span><br><span class="line"><span class="comment">     * 3.根据扩容后的容量新建数组，然后将hashMap的table的引用指向新数组。</span></span><br><span class="line"><span class="comment">     * 4.将旧数组的元素复制到table中。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">        <span class="comment">//新建oldTab数组保存扩容前的数组table</span></span><br><span class="line">        Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">//获取原来数组的长度</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="comment">//原来数组扩容的临界值</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果扩容前的容量 &gt; 0</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果原来的数组长度大于最大值(2^30)</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                <span class="comment">//扩容临界值提高到正无穷</span></span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="comment">//无法进行扩容，返回原来的数组</span></span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">                <span class="comment">//如果现在容量的两倍小于MAXIMUM_CAPACITY且现在的容量大于DEFAULT_INITIAL_CAPACITY</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                <span class="comment">//临界值变为原来的2倍</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">//如果旧容量 &lt;= 0，而且旧临界值 &gt; 0</span></span><br><span class="line">            <span class="comment">//数组的新容量设置为老数组扩容的临界值</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//如果旧容量 &lt;= 0，且旧临界值 &lt;= 0，新容量扩充为默认初始化容量，新临界值为DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//新数组初始容量设置为默认值</span></span><br><span class="line">            newThr = (<span class="keyword">int</span>) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<span class="comment">//计算默认容量下的阈值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算新的resize上限</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;<span class="comment">//在当上面的条件判断中，只有oldThr &gt; 0成立时，newThr == 0</span></span><br><span class="line">            <span class="comment">//ft为临时临界值，下面会确定这个临界值是否合法，如果合法，那就是真正的临界值</span></span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>) newCap * loadFactor;</span><br><span class="line">            <span class="comment">//当新容量&lt; MAXIMUM_CAPACITY且ft &lt; (float)MAXIMUM_CAPACITY，新的临界值为ft，否则为Integer.MAX_VALUE</span></span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>) MAXIMUM_CAPACITY ?</span><br><span class="line">                    (<span class="keyword">int</span>) ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将扩容后hashMap的临界值设置为newThr</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="comment">//创建新的table，初始化容量为newCap</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) <span class="keyword">new</span> Node[newCap];</span><br><span class="line">        <span class="comment">//修改hashMap的table为新建的newTab</span></span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="comment">//如果旧table不为空，将旧table中的元素复制到新的table中</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历旧哈希表的每个桶，将旧哈希表中的桶复制到新的哈希表中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K, V&gt; e;</span><br><span class="line">                <span class="comment">//如果旧桶不为null，使用e记录旧桶</span></span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//将旧桶置为null</span></span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//如果旧桶中只有一个node</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="comment">//将e也就是oldTab[j]放入newTab中e.hash &amp; (newCap - 1)的位置</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                        <span class="comment">//如果旧桶中的结构为红黑树</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">//将树中的node分离</span></span><br><span class="line">                        ((TreeNode&lt;K, V&gt;) e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123;  <span class="comment">//如果旧桶中的结构为链表,链表重排，jdk1.8做的一系列优化</span></span><br><span class="line">                        Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; next;</span><br><span class="line">                        <span class="comment">//遍历整个链表中的节点</span></span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">// 原索引</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 原索引+oldCap</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将链表转化为红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, index;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="comment">//如果桶数组table为空，或者桶数组table的长度小于MIN_TREEIFY_CAPACITY，不符合转化为红黑树的条件</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            <span class="comment">//扩容</span></span><br><span class="line">            resize();</span><br><span class="line">            <span class="comment">//如果符合转化为红黑树的条件，而且hash对应的桶不为null</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 红黑树的头、尾节点</span></span><br><span class="line">            TreeNode&lt;K, V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//遍历链表</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//替换链表node为树node，建立双向链表</span></span><br><span class="line">                TreeNode&lt;K, V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">// 确定树头节点</span></span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//遍历链表插入每个节点到红黑树</span></span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将参数map中的所有键值对映射插入到hashMap中，如果有碰撞，则覆盖value。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m 参数map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException 如果map为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        putMapEntries(m, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hashMap中key映射的node</span></span><br><span class="line"><span class="comment">     * remove方法的实现可以分为三个步骤：</span></span><br><span class="line"><span class="comment">     * 1.通过 hash(Object key)方法计算key的哈希值。</span></span><br><span class="line"><span class="comment">     * 2.通过 removeNode 方法实现功能。</span></span><br><span class="line"><span class="comment">     * 3.返回被删除的node的value。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 参数key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果没有映射到node，返回null，否则返回对应的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="comment">//根据key来删除node。removeNode方法的具体实现在下面</span></span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">                <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map.remove和相关方法的实现需要的方法</span></span><br><span class="line"><span class="comment">     * removeNode方法的步骤总结为:</span></span><br><span class="line"><span class="comment">     * 1.如果数组table为空或key映射到的桶为空，返回null。</span></span><br><span class="line"><span class="comment">     * 2.如果key映射到的桶上第一个node的就是要删除的node，记录下来。</span></span><br><span class="line"><span class="comment">     * 3.如果桶内不止一个node，且桶内的结构为红黑树，记录key映射到的node。</span></span><br><span class="line"><span class="comment">     * 4.桶内的结构不为红黑树，那么桶内的结构就肯定为链表，遍历链表，找到key映射到的node，记录下来。</span></span><br><span class="line"><span class="comment">     * 5.如果被记录下来的node不为null，删除node，size-1被删除。</span></span><br><span class="line"><span class="comment">     * 6.返回被删除的node。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash       key的哈希值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        key的哈希值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value      如果 matchValue 为true，则value也作为确定被删除的node的条件之一，否则忽略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matchValue 如果为true，则value也作为确定被删除的node的条件之一</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> movable    如果为false，删除node时不会删除其他node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回被删除的node，如果没有node被删除，则返回null（针对红黑树的删除方法）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; p;</span><br><span class="line">        <span class="keyword">int</span> n, index;</span><br><span class="line">        <span class="comment">//如果数组table不为空且key映射到的桶不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K, V&gt; node = <span class="keyword">null</span>, e;</span><br><span class="line">            K k;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="comment">//如果桶上第一个node的就是要删除的node</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">//记录桶上第一个node</span></span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;<span class="comment">//如果桶内不止一个node</span></span><br><span class="line">                <span class="comment">//如果桶内的结构为红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//记录key映射到的node</span></span><br><span class="line">                    node = ((TreeNode&lt;K, V&gt;) p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">//如果桶内的结构为链表</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;<span class="comment">//遍历链表，找到key映射到的node</span></span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((k = e.key) == key ||</span><br><span class="line">                                        (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            <span class="comment">//记录key映射到的node</span></span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果得到的node不为null且(matchValue为false||node.value和参数value匹配)</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                    (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="comment">//如果桶内的结构为红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//使用红黑树的删除方法删除node</span></span><br><span class="line">                    ((TreeNode&lt;K, V&gt;) node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)<span class="comment">//如果桶的第一个node的就是要删除的node</span></span><br><span class="line">                    <span class="comment">//删除node</span></span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span><span class="comment">//如果桶内的结构为链表，使用链表删除元素的方式删除node</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;<span class="comment">//结构性修改次数+1</span></span><br><span class="line">                --size;<span class="comment">//哈希表大小-1</span></span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;<span class="comment">//返回被删除的node</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//如果数组table为空或key映射到的桶为空，返回null。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除map中所有的键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果hashMap中的键值对有一对或多对的value为参数value，返回true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 参数value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果hashMap中的键值对有一对或多对的value为参数value，返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历数组table</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="comment">//遍历桶中的node</span></span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K, V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((v = e.value) == value ||</span><br><span class="line">                            (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回hashMap中所有key的视图。</span></span><br><span class="line"><span class="comment">     * 改变hashMap会影响到set，反之亦然。</span></span><br><span class="line"><span class="comment">     * 如果当迭代器迭代set时，hashMap被修改(除非是迭代器自己的remove()方法)，迭代器的结果是不确定的。</span></span><br><span class="line"><span class="comment">     * set支持元素的删除，通过Iterator.remove、Set.remove、removeAll、retainAll、clear操作删除hashMap中对应的键值对。</span></span><br><span class="line"><span class="comment">     * 不支持add和addAll方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回hashMap中所有key的set视图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; ks = keySet;</span><br><span class="line">        <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">            keySet = ks;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类KeySet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsKey(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K, V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K, V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回hashMap中所有value的collection视图</span></span><br><span class="line"><span class="comment">     * 改变hashMap会改变collection，反之亦然。</span></span><br><span class="line"><span class="comment">     * 如果当迭代器迭代collection时，hashMap被修改（除非是迭代器自己的remove()方法），迭代器的结果是不确定的。</span></span><br><span class="line"><span class="comment">     * collection支持元素的删除，通过Iterator.remove、Collection.remove、removeAll、retainAll、clear操作删除hashMap中对应的键值对。</span></span><br><span class="line"><span class="comment">     * 不支持add和addAll方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回hashMap中所有key的collection视图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;V&gt; vs = values;</span><br><span class="line">        <span class="keyword">if</span> (vs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            vs = <span class="keyword">new</span> Values();</span><br><span class="line">            values = vs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类Values</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsValue(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;V&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueSpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K, V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K, V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.value);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回hashMap中所有键值对的set视图</span></span><br><span class="line"><span class="comment">     * 改变hashMap会影响到set，反之亦然。</span></span><br><span class="line"><span class="comment">     * 如果当迭代器迭代set时，hashMap被修改(除非是迭代器自己的remove()方法)，迭代器的结果是不确定的。</span></span><br><span class="line"><span class="comment">     * set支持元素的删除，通过Iterator.remove、Set.remove、removeAll、retainAll、clear操作删除hashMap中对应的键值对。</span></span><br><span class="line"><span class="comment">     * 不支持add和addAll方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回hashMap中所有键值对的set视图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet() &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K, V&gt;&gt; es;</span><br><span class="line">        <span class="keyword">return</span> (es = entrySet) == <span class="keyword">null</span> ? (entrySet = <span class="keyword">new</span> EntrySet()) : es;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类EntrySet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K, V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;) o;</span><br><span class="line">            Object key = e.getKey();</span><br><span class="line">            Node&lt;K, V&gt; candidate = getNode(hash(key), key);</span><br><span class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?, ?&gt; e = (Map.Entry&lt;?, ?&gt;) o;</span><br><span class="line">                Object key = e.getKey();</span><br><span class="line">                Object value = e.getValue();</span><br><span class="line">                <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;Map.Entry&lt;K, V&gt;&gt; spliterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntrySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K, V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K, V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K, V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JDK8重写的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key映射到对应node，如果没映射到则返回默认值defaultValue</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key映射到对应的node，如果没映射到则返回默认值defaultValue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? defaultValue : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在hashMap中插入参数key和value组成的键值对，如果key在hashMap中已经存在，不替换value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果key在hashMap中不存在，返回旧value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hashMap中key为参数key，value为参数value的键值对。如果桶中结构为树，则级联删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除成功，返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用newValue替换key和oldValue映射到的键值对中的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 替换成功，返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                ((v = e.value) == oldValue || (v != <span class="keyword">null</span> &amp;&amp; v.equals(oldValue)))) &#123;</span><br><span class="line">            e.value = newValue;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用参数value替换key映射到的键值对中的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 替换成功，返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">replace</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfAbsent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Function&lt;? <span class="keyword">super</span> K, ? extends V&gt; mappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; first;</span><br><span class="line">        <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K, V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K, V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">                (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K, V&gt; e = first;</span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++binCount;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            V oldValue;</span><br><span class="line">            <span class="keyword">if</span> (old != <span class="keyword">null</span> &amp;&amp; (oldValue = old.value) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        V v = mappingFunction.apply(key);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">            old.value = v;</span><br><span class="line">            afterNodeAccess(old);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">            t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, v);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[i] = newNode(hash, key, v, first);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        ++size;</span><br><span class="line">        afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfPresent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        V oldValue;</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash, key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (oldValue = e.value) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V v = remappingFunction.apply(key, oldValue);</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">                e.value = v;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> v;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">compute</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                     BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; first;</span><br><span class="line">        <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K, V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K, V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">                (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K, V&gt; e = first;</span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++binCount;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        V oldValue = (old == <span class="keyword">null</span>) ? <span class="keyword">null</span> : old.value;</span><br><span class="line">        V v = remappingFunction.apply(key, oldValue);</span><br><span class="line">        <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">                old.value = v;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, v);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tab[i] = newNode(hash, key, v, first);</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                    treeifyBin(tab, hash);</span><br><span class="line">            &#125;</span><br><span class="line">            ++modCount;</span><br><span class="line">            ++size;</span><br><span class="line">            afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">merge</span><span class="params">(K key, V value,</span></span></span><br><span class="line"><span class="function"><span class="params">                   BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; first;</span><br><span class="line">        <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K, V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K, V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">                (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K, V&gt; e = first;</span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++binCount;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">if</span> (old.value != <span class="keyword">null</span>)</span><br><span class="line">                v = remappingFunction.apply(old.value, value);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v = value;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">                old.value = v;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tab[i] = newNode(hash, key, value, first);</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                    treeifyBin(tab, hash);</span><br><span class="line">            &#125;</span><br><span class="line">            ++modCount;</span><br><span class="line">            ++size;</span><br><span class="line">            afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K, V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e.key, e.value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; function)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (function == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K, V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    e.value = function.apply(e.key, e.value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// 克隆和序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝。</span></span><br><span class="line"><span class="comment">     * clone方法虽然生成了新的HashMap对象，新的HashMap中的table数组虽然也是新生成的，但是数组中的元素还是引用以前的HashMap中的元素。</span></span><br><span class="line"><span class="comment">     * 这就导致在对HashMap中的元素进行修改的时候，即对数组中元素进行修改，会导致原对象和clone对象都发生改变，但进行新增或删除就不会影响对方，因为这相当于是对数组做出的改变，clone对象新生成了一个数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hashMap的浅拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;K, V&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = (HashMap&lt;K, V&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">        result.reinitialize();</span><br><span class="line">        result.putMapEntries(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These methods are also used when serializing HashSets</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">float</span> <span class="title">loadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadFactor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (table != <span class="keyword">null</span>) ? table.length :</span><br><span class="line">                (threshold &gt; <span class="number">0</span>) ? threshold :</span><br><span class="line">                        DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化hashMap到ObjectOutputStream中</span></span><br><span class="line"><span class="comment">     * 将hashMap的总容量capacity、实际容量size、键值对映射写入到ObjectOutputStream中。键值对映射序列化时是无序的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The &lt;i&gt;capacity&lt;/i&gt; of the HashMap (the length of the</span></span><br><span class="line"><span class="comment">     * bucket array) is emitted (int), followed by the</span></span><br><span class="line"><span class="comment">     * &lt;i&gt;size&lt;/i&gt; (an int, the number of key-value</span></span><br><span class="line"><span class="comment">     * mappings), followed by the key (Object) and value (Object)</span></span><br><span class="line"><span class="comment">     * for each key-value mapping.  The key-value mappings are</span></span><br><span class="line"><span class="comment">     * emitted in no particular order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> buckets = capacity();</span><br><span class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        <span class="comment">//写入总容量</span></span><br><span class="line">        s.writeInt(buckets);</span><br><span class="line">        <span class="comment">//写入实际容量</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line">        <span class="comment">//写入键值对</span></span><br><span class="line">        internalWriteEntries(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到ObjectOutputStream中读取hashMap</span></span><br><span class="line"><span class="comment">     * 将hashMap的总容量capacity、实际容量size、键值对映射读取出来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 将hashMap的总容量capacity、实际容量size、键值对映射读取出来</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="comment">//重置hashMap</span></span><br><span class="line">        reinitialize();</span><br><span class="line">        <span class="comment">//如果加载因子不合法，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                    loadFactor);</span><br><span class="line">        s.readInt();                <span class="comment">//读出桶的数量，忽略</span></span><br><span class="line">        <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">//读出实际容量size</span></span><br><span class="line">        <span class="comment">//如果读出的实际容量size小于0，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal mappings count: "</span> +</span><br><span class="line">                    mappings);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">            <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">            <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">            <span class="comment">//调整hashMap大小</span></span><br><span class="line">            <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);            <span class="comment">// 加载因子</span></span><br><span class="line">            <span class="keyword">float</span> fc = (<span class="keyword">float</span>) mappings / lf + <span class="number">1.0f</span>;         <span class="comment">//初步得到的总容量，后续还会处理</span></span><br><span class="line">            <span class="comment">//处理初步得到的容量，确认最终的总容量</span></span><br><span class="line">            <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                    DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                    (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                            MAXIMUM_CAPACITY :</span><br><span class="line">                            tableSizeFor((<span class="keyword">int</span>) fc));</span><br><span class="line">            <span class="comment">//计算临界值，得到初步的临界值</span></span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>) cap * lf;</span><br><span class="line">            <span class="comment">//得到最终的临界值</span></span><br><span class="line">            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                    (<span class="keyword">int</span>) ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check Map.Entry[].class since it's the nearest public type to</span></span><br><span class="line">            <span class="comment">// what we're actually creating.</span></span><br><span class="line">            SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[]<span class="class">.<span class="keyword">class</span>, <span class="title">cap</span>)</span>;</span><br><span class="line">            <span class="comment">//新建桶数组table</span></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line">            Node&lt;K, V&gt;[] tab = (Node&lt;K, V&gt;[]) <span class="keyword">new</span> Node[cap];</span><br><span class="line">            table = tab;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读出key和value，并组成键值对插入hashMap中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// iterators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">        Node&lt;K, V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">        <span class="keyword">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">        HashIterator() &#123;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            Node&lt;K, V&gt;[] t = table;</span><br><span class="line">            current = next = <span class="keyword">null</span>;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                &#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K, V&gt;[] t;</span><br><span class="line">            Node&lt;K, V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> ((next = (current = e).next) == <span class="keyword">null</span> &amp;&amp; (t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                &#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K, V&gt; p = current;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">            K key = p.key;</span><br><span class="line">            removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextNode().key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextNode().value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K, V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextNode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// spliterators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HashMap&lt;K, V&gt; map;</span><br><span class="line">        Node&lt;K, V&gt; current;          <span class="comment">//记录当前的节点</span></span><br><span class="line">        <span class="keyword">int</span> index;                  <span class="comment">//当前节点的下标</span></span><br><span class="line">        <span class="keyword">int</span> fence;                  <span class="comment">//堆大小</span></span><br><span class="line">        <span class="keyword">int</span> est;                    <span class="comment">//估计大小</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;       <span class="comment">// for comodification checks</span></span><br><span class="line"></span><br><span class="line">        HashMapSpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin,</span><br><span class="line">                           <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                           <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.map = m;</span><br><span class="line">            <span class="keyword">this</span>.index = origin;</span><br><span class="line">            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">            <span class="keyword">this</span>.est = est;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize fence and size on first use</span></span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                HashMap&lt;K, V&gt; m = map;</span><br><span class="line">                est = m.size;</span><br><span class="line">                expectedModCount = m.modCount;</span><br><span class="line">                Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            getFence(); <span class="comment">// force init</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>) est;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        KeySpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                       <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> KeySpliterator&lt;K, V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                    <span class="keyword">new</span> KeySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>,</span><br><span class="line">                            expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K, V&gt; m = map;</span><br><span class="line">            Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                    (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                Node&lt;K, V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        action.accept(p.key);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K, V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        K k = current.key;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(k);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>) |</span><br><span class="line">                    Spliterator.DISTINCT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        ValueSpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                         <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ValueSpliterator&lt;K, V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                    <span class="keyword">new</span> ValueSpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>,</span><br><span class="line">                            expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K, V&gt; m = map;</span><br><span class="line">            Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                    (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                Node&lt;K, V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        action.accept(p.value);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K, V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        V v = current.value;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(v);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        EntrySpliterator(HashMap&lt;K, V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                         <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> EntrySpliterator&lt;K, V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                    <span class="keyword">new</span> EntrySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>,</span><br><span class="line">                            expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K, V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K, V&gt; m = map;</span><br><span class="line">            Node&lt;K, V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                    (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                Node&lt;K, V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        action.accept(p);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K, V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K, V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Node&lt;K, V&gt; e = current;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>) |</span><br><span class="line">                    Spliterator.DISTINCT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// LinkedHashMap support</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The following package-protected methods are designed to be</span></span><br><span class="line"><span class="comment">     * overridden by LinkedHashMap, but not by any other subclass.</span></span><br><span class="line"><span class="comment">     * Nearly all other internal methods are also package-protected</span></span><br><span class="line"><span class="comment">     * but are declared final, so can be used by LinkedHashMap, view</span></span><br><span class="line"><span class="comment">     * classes, and HashSet.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个链表结点</span></span><br><span class="line">    <span class="function">Node&lt;K, V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换一个链表节点</span></span><br><span class="line">    <span class="function">Node&lt;K, V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K, V&gt; p, Node&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个红黑树节点</span></span><br><span class="line">    <span class="function">TreeNode&lt;K, V&gt; <span class="title">newTreeNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换一个红黑树节点</span></span><br><span class="line">    <span class="function">TreeNode&lt;K, V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K, V&gt; p, Node&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reset to initial default state.  Called by clone and readObject.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reinitialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        table = <span class="keyword">null</span>;</span><br><span class="line">        entrySet = <span class="keyword">null</span>;</span><br><span class="line">        keySet = <span class="keyword">null</span>;</span><br><span class="line">        values = <span class="keyword">null</span>;</span><br><span class="line">        modCount = <span class="number">0</span>;</span><br><span class="line">        threshold = <span class="number">0</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K, V&gt; p)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K, V&gt; p)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入hashMap键值对到ObjectOutputStream中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K, V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    s.writeObject(e.key);</span><br><span class="line">                    s.writeObject(e.value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// Tree bins</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDK1.8新增，用来支持桶的红黑树结构实现</span></span><br><span class="line"><span class="comment">     * 性质1. 节点是红色或黑色。</span></span><br><span class="line"><span class="comment">     * 性质2. 根是黑色。</span></span><br><span class="line"><span class="comment">     * 性质3. 所有叶子都是黑色（叶子是NIL节点）。</span></span><br><span class="line"><span class="comment">     * 性质4. 每个红色节点必须有两个黑色的子节点。(从每个叶子到根的所有路径上不能有两个连续的红色节点。)</span></span><br><span class="line"><span class="comment">     * 性质5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K, V&gt; parent;  <span class="comment">//节点的父亲</span></span><br><span class="line">        TreeNode&lt;K, V&gt; left;    <span class="comment">//节点的左孩子</span></span><br><span class="line">        TreeNode&lt;K, V&gt; right;   <span class="comment">//节点的右孩子</span></span><br><span class="line">        TreeNode&lt;K, V&gt; prev;    <span class="comment">//节点的前一个节点</span></span><br><span class="line">        <span class="keyword">boolean</span> red;            <span class="comment">//true表示红节点，false表示黑节点</span></span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K, V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取红黑树的根</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; r = <span class="keyword">this</span>, p; ; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                r = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 确保root是桶中的第一个元素 ，将root移到中中的第一个</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K, V&gt;[] tab, TreeNode&lt;K, V&gt; root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line">                TreeNode&lt;K, V&gt; first = (TreeNode&lt;K, V&gt;) tab[index];</span><br><span class="line">                <span class="keyword">if</span> (root != first) &#123;</span><br><span class="line">                    Node&lt;K, V&gt; rn;</span><br><span class="line">                    tab[index] = root;</span><br><span class="line">                    TreeNode&lt;K, V&gt; rp = root.prev;</span><br><span class="line">                    <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K, V&gt;) rn).prev = rp;</span><br><span class="line">                    <span class="keyword">if</span> (rp != <span class="keyword">null</span>)</span><br><span class="line">                        rp.next = rn;</span><br><span class="line">                    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">                        first.prev = root;</span><br><span class="line">                    root.next = first;</span><br><span class="line">                    root.prev = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查找hash为h，key为k的节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K, V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> ph, dir;</span><br><span class="line">                K pk;</span><br><span class="line">                TreeNode&lt;K, V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                        (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                        (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = pl;</span><br><span class="line">            &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取树节点，通过根节点查找</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 比较2个对象的大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> d;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</span><br><span class="line">                    (d = a.getClass().getName().</span><br><span class="line">                            compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">                d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">                        -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将链表转为二叉树</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> root of tree</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K, V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K, V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K, V&gt;) x.next;</span><br><span class="line">                x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = <span class="keyword">null</span>;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    root = x;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    K k = x.key;</span><br><span class="line">                    <span class="keyword">int</span> h = x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;K, V&gt; p = root; ; ) &#123;</span><br><span class="line">                        <span class="keyword">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;</span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                                (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                            dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                        TreeNode&lt;K, V&gt; xp = p;</span><br><span class="line">                        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            x.parent = xp;</span><br><span class="line">                            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                                xp.left = x;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                xp.right = x;</span><br><span class="line">                            root = balanceInsertion(root, x);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            moveRootToFront(tab, root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将二叉树转为链表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K, V&gt; map)</span> </span>&#123;</span><br><span class="line">            Node&lt;K, V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K, V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">                Node&lt;K, V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    tl.next = p;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加一个键值对</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">            TreeNode&lt;K, V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; p = root; ; ) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph;</span><br><span class="line">                K pk;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                        (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                        TreeNode&lt;K, V&gt; q, ch;</span><br><span class="line">                        searched = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                                ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                        (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line">                            <span class="keyword">return</span> q;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K, V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Node&lt;K, V&gt; xpn = xp.next;</span><br><span class="line">                    TreeNode&lt;K, V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    xp.next = x;</span><br><span class="line">                    x.parent = x.prev = xp;</span><br><span class="line">                    <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K, V&gt;) xpn).prev = x;</span><br><span class="line">                    moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the given node, that must be present before this call.</span></span><br><span class="line"><span class="comment">         * This is messier than typical red-black deletion code because we</span></span><br><span class="line"><span class="comment">         * cannot swap the contents of an interior node with a leaf</span></span><br><span class="line"><span class="comment">         * successor that is pinned by "next" pointers that are accessible</span></span><br><span class="line"><span class="comment">         * independently during traversal. So instead we swap the tree</span></span><br><span class="line"><span class="comment">         * linkages. If the current tree appears to have too few nodes,</span></span><br><span class="line"><span class="comment">         * the bin is converted back to a plain bin. (The test triggers</span></span><br><span class="line"><span class="comment">         * somewhere between 2 and 6 nodes, depending on tree structure).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeTreeNode</span><span class="params">(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; hash;</span><br><span class="line">            TreeNode&lt;K, V&gt; first = (TreeNode&lt;K, V&gt;) tab[index], root = first, rl;</span><br><span class="line">            TreeNode&lt;K, V&gt; succ = (TreeNode&lt;K, V&gt;) next, pred = prev;</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                tab[index] = first = succ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = succ;</span><br><span class="line">            <span class="keyword">if</span> (succ != <span class="keyword">null</span>)</span><br><span class="line">                succ.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (root.parent != <span class="keyword">null</span>)</span><br><span class="line">                root = root.root();</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.right == <span class="keyword">null</span> ||</span><br><span class="line">                    (rl = root.left) == <span class="keyword">null</span> || rl.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                tab[index] = first.untreeify(map);  <span class="comment">// too small</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode&lt;K, V&gt; p = <span class="keyword">this</span>, pl = left, pr = right, replacement;</span><br><span class="line">            <span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                TreeNode&lt;K, V&gt; s = pr, sl;</span><br><span class="line">                <span class="keyword">while</span> ((sl = s.left) != <span class="keyword">null</span>) <span class="comment">// find successor</span></span><br><span class="line">                    s = sl;</span><br><span class="line">                <span class="keyword">boolean</span> c = s.red;</span><br><span class="line">                s.red = p.red;</span><br><span class="line">                p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">                TreeNode&lt;K, V&gt; sr = s.right;</span><br><span class="line">                TreeNode&lt;K, V&gt; pp = p.parent;</span><br><span class="line">                <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s's direct parent</span></span><br><span class="line">                    p.parent = s;</span><br><span class="line">                    s.right = p;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    TreeNode&lt;K, V&gt; sp = s.parent;</span><br><span class="line">                    <span class="keyword">if</span> ((p.parent = sp) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                            sp.left = p;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            sp.right = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((s.right = pr) != <span class="keyword">null</span>)</span><br><span class="line">                        pr.parent = s;</span><br><span class="line">                &#125;</span><br><span class="line">                p.left = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((p.right = sr) != <span class="keyword">null</span>)</span><br><span class="line">                    sr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((s.left = pl) != <span class="keyword">null</span>)</span><br><span class="line">                    pl.parent = s;</span><br><span class="line">                <span class="keyword">if</span> ((s.parent = pp) == <span class="keyword">null</span>)</span><br><span class="line">                    root = s;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                    pp.left = s;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = s;</span><br><span class="line">                <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                    replacement = sr;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    replacement = p;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="keyword">null</span>)</span><br><span class="line">                replacement = pl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="keyword">null</span>)</span><br><span class="line">                replacement = pr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                replacement = p;</span><br><span class="line">            <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">                TreeNode&lt;K, V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">                <span class="keyword">if</span> (pp == <span class="keyword">null</span>)</span><br><span class="line">                    root = replacement;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                    pp.left = replacement;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = replacement;</span><br><span class="line">                p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TreeNode&lt;K, V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (replacement == p) &#123;  <span class="comment">// detach</span></span><br><span class="line">                TreeNode&lt;K, V&gt; pp = p.parent;</span><br><span class="line">                p.parent = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (pp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                        pp.left = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                        pp.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (movable)</span><br><span class="line">                moveRootToFront(tab, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将结点太多的桶分割</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> map   the map</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> tab   the table for recording bin heads</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> index the index of the table being split</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> bit   the bit of hash to split on</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K, V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">            TreeNode&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">            TreeNode&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K, V&gt;) e.next;</span><br><span class="line">                e.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                        loHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        loTail.next = e;</span><br><span class="line">                    loTail = e;</span><br><span class="line">                    ++lc;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                        hiHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        hiTail.next = e;</span><br><span class="line">                    hiTail = e;</span><br><span class="line">                    ++hc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index] = loHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index] = loHead;</span><br><span class="line">                    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                        loHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index + bit] = hiHead;</span><br><span class="line">                    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                        hiHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">        <span class="comment">// 红黑树方法，都是从CLR中修改的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左旋转</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K, V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                TreeNode&lt;K, V&gt; p)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K, V&gt; r, pp, rl;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">                    rl.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">                    pp.left = r;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = r;</span><br><span class="line">                r.left = p;</span><br><span class="line">                p.parent = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右旋转</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K, V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 TreeNode&lt;K, V&gt; p)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K, V&gt; l, pp, lr;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">                    lr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">                    pp.right = l;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.left = l;</span><br><span class="line">                l.right = p;</span><br><span class="line">                p.parent = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 保证插入后平衡</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K, V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      TreeNode&lt;K, V&gt; x)</span> </span>&#123;</span><br><span class="line">            x.red = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; xp, xpp, xppl, xppr; ; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                        xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                            root = rotateLeft(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                        xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                            root = rotateRight(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 删除后调整平衡</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function">TreeNode&lt;K, V&gt; <span class="title">balanceDeletion</span><span class="params">(TreeNode&lt;K, V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     TreeNode&lt;K, V&gt; x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K, V&gt; xp, xpl, xpr; ; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="keyword">null</span> || x == root)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xpr = xp.right) != <span class="keyword">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class="line">                        xpr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                        xpr = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K, V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sr == <span class="keyword">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                                (sl == <span class="keyword">null</span> || !sl.red)) &#123;</span><br><span class="line">                            xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sr == <span class="keyword">null</span> || !sr.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sl != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpr);</span><br><span class="line">                                xpr = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                        <span class="keyword">null</span> : xp.right;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpr.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateLeft(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="keyword">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                        xpl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K, V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sl == <span class="keyword">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                                (sr == <span class="keyword">null</span> || !sr.red)) &#123;</span><br><span class="line">                            xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sl == <span class="keyword">null</span> || !sl.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpl);</span><br><span class="line">                                xpl = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                        <span class="keyword">null</span> : xp.left;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpl.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sl = xpl.left) != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateRight(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检测是否符合红黑树</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K, V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">checkInvariants</span><span class="params">(TreeNode&lt;K, V&gt; t)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K, V&gt; tp = t.parent, tl = t.left, tr = t.right,</span><br><span class="line">                    tb = t.prev, tn = (TreeNode&lt;K, V&gt;) t.next;</span><br><span class="line">            <span class="keyword">if</span> (tb != <span class="keyword">null</span> &amp;&amp; tb.next != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tn != <span class="keyword">null</span> &amp;&amp; tn.prev != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tp != <span class="keyword">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (t.red &amp;&amp; tl != <span class="keyword">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class="keyword">null</span> &amp;&amp; tr.red)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转载Github<a href="https://github.com/wupeixuan" target="_blank" rel="noopener">用户</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
</search>
